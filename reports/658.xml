<?xml version="1.0" encoding="UTF-8"?>
<Attack_Pattern_Catalog xmlns="http://capec.mitre.org/capec-3" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CAPEC-658: ATT&amp;CK Related Patterns " Version="3.9" Date="2023-01-24" xsi:schemaLocation="http://capec.mitre.org/capec-3 http://capec.mitre.org/data/xsd/ap_schema_v3.5.xsd">
   <Attack_Patterns>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="1" Name="Accessing Functionality Not Properly Constrained by ACLs" Abstraction="Standard" Status="Draft">
         <Description>In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="122"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey] The attacker surveys the target application, possibly as a valid and authenticated user</Description>
               <Technique>Spidering web sites for all available links</Technique>
               <Technique>Brute force guessing of resource names</Technique>
               <Technique>Brute force guessing of user names / credentials</Technique>
               <Technique>Brute force guessing of function names / actions</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions</Description>
               <Technique>Use the web inventory of all forms and inputs and apply attack data to those inputs.</Technique>
               <Technique>Use a packet sniffer to capture and record network traffic</Technique>
               <Technique>Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.</Description>
               <Technique>Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.</Prerequisite>
            <Prerequisite>The various resources, or individual URLs, must be somehow discoverable by the attacker</Prerequisite>
            <Prerequisite>The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>
               <xhtml:p>In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as "NoAccess", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user.</xhtml:p>
               <xhtml:p>Having done so, any direct access to those protected Servlets will be prohibited by the web container.</xhtml:p>
               <xhtml:p>In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.</xhtml:p>
            </Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a "Single front controller" pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets.</xhtml:p>
               <xhtml:p>If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="276"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="434"/>
            <Related_Weakness CWE_ID="693"/>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="1191"/>
            <Related_Weakness CWE_ID="1193"/>
            <Related_Weakness CWE_ID="1220"/>
            <Related_Weakness CWE_ID="1297"/>
            <Related_Weakness CWE_ID="1311"/>
            <Related_Weakness CWE_ID="1314"/>
            <Related_Weakness CWE_ID="1315"/>
            <Related_Weakness CWE_ID="1318"/>
            <Related_Weakness CWE_ID="1320"/>
            <Related_Weakness CWE_ID="1321"/>
            <Related_Weakness CWE_ID="1327"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.010</Entry_ID>
               <Entry_Name>Hijack Execution Flow: ServicesFile Permissions Weakness</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Pattern, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Pattern, Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Skills_Required, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="11" Name="Cause Web Server Misclassification" Abstraction="Detailed" Status="Draft">
         <Description>An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.</Description>
         <Extended_Description>
            <xhtml:p>This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="635"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Footprint file input vectors] Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.</Description>
               <Technique>Attacker manually crawls application to identify file inputs</Technique>
               <Technique>Attacker uses an automated tool to crawl application identify file inputs</Technique>
               <Technique>Attacker manually assesses strength of access control protecting native application files from user control</Technique>
               <Technique>Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[File misclassification shotgunning] An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.</Description>
               <Technique>Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server.</Technique>
               <Technique>Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[File misclassification sniping] Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.</Description>
               <Technique>Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server.</Technique>
               <Technique>Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Disclose information] The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).</Description>
               <Technique>Manipulate the file names that are explicitly sent to the server.</Technique>
               <Technique>Manipulate the MIME sent in order to confuse the web server.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Web server software must rely on file name or file extension for processing.</Prerequisite>
            <Prerequisite>The attacker must be able to make HTTP requests to the web server.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To modify file name or file extension</Skill>
            <Skill Level="Medium">To use misclassification to force the Web server to disclose configuration information, source, or binary data</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Server routines should be determined by content not determined by filename or file extension.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>J2EE application servers are supposed to execute Java Server Pages (JSP). There have been disclosure issues relating to Orion Application Server, where an attacker that appends either a period (.) or space characters to the end of a legitimate Http request, then the server displays the full source code in the attackers' web browser.</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="attack">http://victim.site/login.jsp.</xhtml:div>
               <xhtml:p>Since remote data and directory access may be accessed directly from the JSP, this is a potentially very serious issue.</xhtml:p>
               <xhtml:p>[REF-6]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="430"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1036.006</Entry_ID>
               <Entry_Name>Masquerading: Space after Filename</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Example_Instances</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="112" Name="Brute Force" Abstraction="Meta" Status="Draft">
         <Description>In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.</Description>
         <Extended_Description>
            <xhtml:p>Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information.</xhtml:p>
         </Extended_Description>
         <Typical_Severity>High</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine secret testing procedure] Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.</Description>
               <Technique>Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Reduce search space] Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.</Description>
               <Technique>If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.)</Technique>
               <Technique>If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.</Technique>
               <Technique>If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.</Technique>
               <Technique>Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Explore</Phase>
               <Description>[Expand victory conditions] It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Gather information so attack can be performed independently.] If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The attack simply requires basic scripting ability to automate the exploration of the search space. More sophisticated attackers may be able to use more advanced methods to reduce the search space and increase the speed with which the secret is located.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources the attacker has at their disposal. This attack method is resource expensive: having large amounts of computational power do not guarantee timely success, but having only minimal resources makes the problem intractable against all but the weakest secret selection procedures.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Repeated submissions of incorrect secret values may indicate a brute force attack. For example, repeated bad passwords when accessing user accounts or repeated queries to databases using non-existent keys.</Indicator>
            <Indicator>Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.</Indicator>
            <Indicator>If the attacker is able to perform the checking offline then there will likely be no indication that an attack is ongoing.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.</Mitigation>
            <Mitigation>Use a secret space that is well known and with no known patterns that may reduce functional size.</Mitigation>
            <Mitigation>Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="330"/>
            <Related_Weakness CWE_ID="326"/>
            <Related_Weakness CWE_ID="521"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1110</Entry_ID>
               <Entry_Name>Brute Force</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>11</Entry_ID>
               <Entry_Name>Brute Force</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <Entry_Name>Brute force attack</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Description, Mitigations, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="114" Name="Authentication Abuse" Abstraction="Meta" Status="Draft">
         <Description>An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.</Description>
         <Extended_Description>
            <xhtml:p>This attack may exploit assumptions made by the target's authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the "Exploitation of Session Variables, Resource IDs and other Trusted Credentials" attack patterns.</xhtml:p>
         </Extended_Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
            <Related_Weakness CWE_ID="1244"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1548</Entry_ID>
               <Entry_Name>Abuse Elevation Control Mechanism</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="115" Name="Authentication Bypass" Abstraction="Meta" Status="Draft">
         <Description>An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.</Description>
         <Extended_Description>
            <xhtml:p>This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</xhtml:p>
         </Extended_Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A client application, such as a web browser, or a scripting language capable of interacting with the target.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1548</Entry_ID>
               <Entry_Name>Abuse Elevation Control Mechanism</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-598" Section="Testing for Bypassing Authentication Schema"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="122" Name="Privilege Abuse" Abstraction="Meta" Status="Draft">
         <Description>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.</Description>
         <Extended_Description>
            <xhtml:p>If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.</xhtml:p>
            <xhtml:p>This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="664"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.</Prerequisite>
            <Prerequisite>The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. The ability to access the target is required.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="269"/>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="1317"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1548</Entry_ID>
               <Entry_Name>Abuse Elevation Control Mechanism</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Consequences, Example_Instances, Likelihood_Of_Attack, Mitigations, Skills_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description, Skills_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="125" Name="Flooding" Abstraction="Meta" Status="Stable">
         <Description>An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>Any target that services requests is vulnerable to this attack on some level of scale.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Impact>Resource Consumption</Impact>
               <Note>A successful flooding attack compromises the availability of the target system's service by exhausting its available resources.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure that protocols have specific limits of scale configured.</Mitigation>
            <Mitigation>Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.</Mitigation>
            <Mitigation>Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="404"/>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1498.001</Entry_ID>
               <Entry_Name>Network Denial of Service: Direct Network Flood</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499</Entry_ID>
               <Entry_Name>Endpoint Denial of Service</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>10</Entry_ID>
               <Entry_Name>Denial of Service</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <Entry_Name>Traffic flood</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="127" Name="Directory Indexing" Abstraction="Detailed" Status="Draft">
         <Description>An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="54"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.</Description>
               <Technique>Send requests to the web server for common directory names</Technique>
               <Technique>If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.</Technique>
               <Technique>Search for uncommon or potentially user created directories that may be present.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods</Description>
               <Technique>Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.</Technique>
               <Technique>Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.</Technique>
               <Technique>Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.</Technique>
               <Technique>Sequentially request a list of common base files to each directory discovered.</Technique>
               <Technique>Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a "/" request</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods</Description>
               <Technique>Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a "/" request</Technique>
               <Technique>Try other known exploits to elevate privileges sufficient to bypass protected directories.</Technique>
               <Technique>List the files in the directory by issuing a request with the URL ending in a "/" slash.</Technique>
               <Technique>Access the files via direct URL and capture contents.</Technique>
               <Technique>Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.</Technique>
               <Technique>Sequentially request a list of common base files to each directory discovered.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.</Prerequisite>
            <Prerequisite>The adversary must be able to control the path that is requested of the target.</Prerequisite>
            <Prerequisite>The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.</Prerequisite>
            <Prerequisite>The server version or patch level must not inherently prevent known directory listing attacks from working.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To issue the request to URL without given a specific file name</Skill>
            <Skill Level="High">To bypass the access control of the directory of listings</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to send HTTP requests to a web application.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.</Mitigation>
            <Mitigation>2. Preventing with .htaccess in Apache web server: In .htaccess, write "Options-indexes".</Mitigation>
            <Mitigation>3. Suppressing error messages: using error 403 "Forbidden" message exactly like error 404 "Not Found" message.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80</xhtml:p>
               <xhtml:p>The target application does not have direct hyperlink to the "backup" directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a "db_dump.php" file in it. This sensitive data should not be disclosed publicly.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="424"/>
            <Related_Weakness CWE_ID="425"/>
            <Related_Weakness CWE_ID="288"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="276"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1083</Entry_ID>
               <Entry_Name>File and Directory Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-11" Section="WASC-16 - Directory Indexing"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Related_Vulnerabilities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="13" Name="Subverting Environment Variable Values" Abstraction="Detailed" Status="Stable">
         <Description>The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="77"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="14"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="10"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Find user-controlled environment variables] Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.</Description>
               <Technique>Alter known environment variables such as "$PATH", "$HOSTNAME", or "LD_LIBRARY_PATH" and see if application behavior changes.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Manipulate user-controlled environment variables] The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An environment variable is accessible to the user.</Prerequisite>
            <Prerequisite>An environment variable used by the application can be tainted with user supplied data.</Prerequisite>
            <Prerequisite>Input data used in an environment variable is not validated properly.</Prerequisite>
            <Prerequisite>The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.</Skill>
            <Skill Level="High">Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Protect environment variables against unauthorized read and write access.</Mitigation>
            <Mitigation>Protect the configuration files which contain environment variables against illegitimate read and write access.</Mitigation>
            <Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</Mitigation>
            <Mitigation>Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as \\172.16.2.100\shared_files\trojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)</Example>
            <Example>The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to "ignorespace". HISTCONTROL can also be set to ignore duplicate commands by setting it to "ignoredups". In some Linux systems, this is set by default to "ignoreboth" which covers both of the previous examples. This means that " ls" will not be saved, but "ls" would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="353"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="15"/>
            <Related_Weakness CWE_ID="73"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.003</Entry_ID>
               <Entry_Name>Impair Defenses:Impair Command History Logging</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.006</Entry_ID>
               <Entry_Name>Hijack Execution Flow:Dynamic Linker Hijacking</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.007</Entry_ID>
               <Entry_Name>Hijack Execution Flow:Path Interception by PATH Environment Variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Examples-Instances, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Example_Instances</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Consequences, Mitigations, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Prerequisites</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="130" Name="Excessive Allocation" Abstraction="Meta" Status="Stable">
         <Description>An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>A successful excessive allocation attack forces the target system to exhaust its resources, thereby compromising the availability of its service.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Limit the amount of resources that are accessible to unprivileged users.</Mitigation>
            <Mitigation>Assume all input is malicious. Consider all potentially relevant properties when validating input.</Mitigation>
            <Mitigation>Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</Mitigation>
            <Mitigation>Use resource-limiting settings, if possible.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="404"/>
            <Related_Weakness CWE_ID="770"/>
            <Related_Weakness CWE_ID="1325"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499.003</Entry_ID>
               <Entry_Name>Endpoint Denial of Service:Application Exhaustion Flood</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>10</Entry_ID>
               <Entry_Name>Denial of Service</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="131" Name="Resource Leak Exposure" Abstraction="Meta" Status="Stable">
         <Description>An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.</Description>
         <Extended_Description>
            <xhtml:p>Resource leaks most often come in the form of memory leaks where memory is allocated but never released after it has served its purpose, however, theoretically, any other resource that can be reserved can be targeted if the target fails to release the reservation when the reserved resource block is no longer needed.</xhtml:p>
            <xhtml:p>In this attack, the adversary determines what activity results in leaked resources and then triggers that activity on the target. Since some leaks may be small, this may require a large number of requests by the adversary. However, this attack differs from a flooding attack in that the rate of requests is generally not significant. This is because the lost resources due to the leak accumulate until the target is reset, usually by restarting it. Thus, a resource-poor adversary who would be unable to flood the target can still utilize this attack.</xhtml:p>
            <xhtml:p>Resource depletion through leak differs from resource depletion through allocation in that, in the former, the adversary may not be able to control the size of each leaked allocation, but instead allows the leak to accumulate until it is large enough to affect the target's performance. When depleting resources through allocation, the allocated resource may eventually be released by the target so the attack relies on making sure that the allocation size itself is prohibitive of normal operations by the target.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must have a resource leak that the adversary can repeatedly trigger.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Impact>Resource Consumption</Impact>
               <Note>A successful resource leak exposure attack compromises the availability of the target system's services.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).</Mitigation>
            <Mitigation>Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)</Mitigation>
            <Mitigation>Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="404"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499</Entry_ID>
               <Entry_Name>Endpoint Denial of Service</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>10</Entry_ID>
               <Entry_Name>Denial of Service</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="132" Name="Symlink Attack" Abstraction="Detailed" Status="Draft">
         <Description>An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.</Description>
         <Extended_Description>
            <xhtml:p>The endpoint file may be either output or input. If the file is output, the result is that the endpoint is modified, instead of a file at the intended location. Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications.</xhtml:p>
            <xhtml:p>In some variants of this attack the adversary may be able to control the change to a file while in other cases they cannot. The former is especially damaging since the adversary may be able to grant themselves increased privileges or insert false information, but the latter can also be damaging as it can expose sensitive information or corrupt or destroy vital system or application files. Alternatively, the endpoint file may serve as input to the targeted application. This can be used to feed malformed input into the target or to cause the target to process different information, possibly allowing the adversary to control the actions of the target or to cause the target to expose information to the adversary. Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the adversary would normally have.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="159"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify Target] Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.</Description>
               <Technique>The adversary writes to files in different directories to check whether the application has sufficient checking before file operations.</Technique>
               <Technique>The adversary creates symlinks to files in different directories.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Try to create symlinks to different files] The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.</Description>
               <Technique>The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using "sleep(2)" and "usleep()" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.</Technique>
               <Technique>The adversary may need a little guesswork on the filenames on which the target application would operate.</Technique>
               <Technique>The adversary tries to create symlinks to the various filenames.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Target application operates on created symlinks to sensitive files] The adversary is able to create symlinks to sensitive files while the target application is operating on the file.</Description>
               <Technique>Create the symlink to the sensitive file such as configuration files, etc.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To create symlinks</Skill>
            <Skill Level="High">To identify the files and create the symlinks during the file operation time window</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. The only requirement is the ability to create the necessary symbolic link.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.</Mitigation>
            <Mitigation>Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The adversary creates a symlink with the "same" name as the file which the application is intending to write to. The application will write to the file- "causing the data to be written where the symlink is pointing". An attack like this can be demonstrated as follows:</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="informative">root# vulprog myFile<xhtml:div>
                     <xhtml:i>{...program does some processing...]</xhtml:i>
                  </xhtml:div>
                  <xhtml:br/>adversary# ln –s /etc/nologin myFile<xhtml:div>
                     <xhtml:i>[...program writes to 'myFile', which points to /etc/nologin...]</xhtml:i>
                  </xhtml:div>
               </xhtml:div>
               <xhtml:p>In the above example, the root user ran a program with poorly written file handling routines, providing the filename "myFile" to vulnprog for the relevant data to be written to. However, the adversary happened to be looking over the shoulder of "root" at the time, and created a link from myFile to /etc/nologin. The attack would make no user be able to login.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="59"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1547.009</Entry_ID>
               <Entry_Name>Boot or Logon Autostart Execution:Shortcut Modification</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-13"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Extended_Description, Prerequisites</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Example_Instances</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="141" Name="Cache Poisoning" Abstraction="Standard" Status="Draft">
         <Description>An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="161">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.</Description>
               <Technique>Run tools that check available entries in the cache.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.</Description>
               <Technique>Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.</Description>
               <Technique>Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).</Technique>
               <Technique>Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The attacker must be able to modify the value stored in a cache to match a desired value.</Prerequisite>
            <Prerequisite>The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">To overwrite/modify targeted cache</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Configuration: Disable client side caching.</Mitigation>
            <Mitigation>Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.</xhtml:p>
               <xhtml:p>Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com</xhtml:p>
               <xhtml:p>When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="348"/>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="349"/>
            <Related_Weakness CWE_ID="346"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1557.002</Entry_ID>
               <Entry_Name>Adversary-in-the-Middle: ARP Cache Poisoning</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <Entry_Name>Cache Poisoning</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-22" Section="DNS Cache Poisoning"/>
            <Reference External_Reference_ID="REF-23" Section="DNS Threats &amp; Weaknesses of the Domain Name System"/>
            <Reference External_Reference_ID="REF-24" Section="Arp Spoofing"/>
            <Reference External_Reference_ID="REF-599" Section="Testing for Browser Cache Weaknesses"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Execution_Flow, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="142" Name="DNS Cache Poisoning" Abstraction="Detailed" Status="Draft">
         <Description>A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="141"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="89"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.</Description>
               <Technique>Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.</Technique>
               <Technique>Figure out if the client's browser has DNS cache enabled.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.</Description>
               <Technique>Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.</Technique>
               <Technique>If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction</Technique>
               <Technique>Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.</Description>
               <Technique>Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.</Technique>
               <Technique>Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">To overwrite/modify targeted DNS cache</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Configuration: Make sure your DNS servers have been updated to the latest versions</Mitigation>
            <Mitigation>Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.</Mitigation>
            <Mitigation>Configuration: Disable client side DNS caching.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.</xhtml:p>
               <xhtml:p>Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com</xhtml:p>
               <xhtml:p>When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="348"/>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="349"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="350"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1584.002</Entry_ID>
               <Entry_Name>Compromise Infrastructure: DNS Server</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-22" Section="DNS Cache Poisoning"/>
            <Reference External_Reference_ID="REF-23" Section="DNS Threats &amp; Weaknesses of the Domain Name System"/>
            <Reference External_Reference_ID="REF-27"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="148" Name="Content Spoofing" Abstraction="Meta" Status="Stable">
         <Description>An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must provide content but fail to adequately protect it against modification.The adversary must have the means to alter data to which they are not authorized. If the content is to be modified in transit, the adversary must be able to intercept the targeted messages.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>
               <xhtml:p>If the content is to be modified in transit, the adversary requires a tool capable of intercepting the target's communication and generating/creating custom packets to impact the communications.</xhtml:p>
               <xhtml:p>In some variants, the targeted content is altered so that all or some of it is redirected towards content published by the attacker (for example, images and frames in the target's web site might be modified to be loaded from a source controlled by the attacker). In these cases, the attacker requires the necessary resources to host the replacement content.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>A successful content spoofing attack compromises the integrity of the application data.</Note>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="345"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1491</Entry_ID>
               <Entry_Name>Defacement</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>12</Entry_ID>
               <Entry_Name>Content Spoofing</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <Entry_Name>Content Spoofing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Prerequisites</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="150" Name="Collect Data from Common Resource Locations" Abstraction="Standard" Status="Draft">
         <Description>An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="116">
               <Exclude_Related Exclude_ID="437"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside.</Resource>
         </Resources_Required>
         <Example_Instances>
            <Example>An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device’s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="552"/>
            <Related_Weakness CWE_ID="1239"/>
            <Related_Weakness CWE_ID="1258"/>
            <Related_Weakness CWE_ID="1266"/>
            <Related_Weakness CWE_ID="1272"/>
            <Related_Weakness CWE_ID="1323"/>
            <Related_Weakness CWE_ID="1330"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1003</Entry_ID>
               <Entry_Name>OS Credential Dumping</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1119</Entry_ID>
               <Entry_Name>Automated Collection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1213</Entry_ID>
               <Entry_Name>Data from Information Repositories</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1530</Entry_ID>
               <Entry_Name>Data from Cloud Storage Object</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1555</Entry_ID>
               <Entry_Name>Credentials from Password Stores</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1602</Entry_ID>
               <Entry_Name>Data from Configuration Repository</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Common Resource Location Exploration</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="158" Name="Sniffing Network Traffic" Abstraction="Detailed" Status="Draft">
         <Description>In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must be communicating on a network protocol visible by a network sniffing application.</Prerequisite>
            <Prerequisite>The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Adversaries can obtain and set up open-source network sniffing tools easily.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.).</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Obfuscate network traffic through encryption to prevent its readability by network sniffers.</Mitigation>
            <Mitigation>Employ appropriate levels of segmentation to your network in accordance with best practices.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1040</Entry_ID>
               <Entry_Name>Network Sniffing</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1111</Entry_ID>
               <Entry_Name>Multi-Factor Authentication Interception</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="159" Name="Redirect Access to Libraries" Abstraction="Standard" Status="Stable">
         <Description>An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="154">
               <Exclude_Related Exclude_ID="403"/>
               <Exclude_Related Exclude_ID="437"/>
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="185"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify Target] The adversary identifies the target application and determines what libraries are being used.</Description>
               <Technique>Find public source code and identify library dependencies.</Technique>
               <Technique>Gain access to the system hosting the application and look for libraries in common locations.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Deploy Malicious Libraries] The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Redirect Library Calls to Malicious Library] Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.</Description>
               <Technique>Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location</Technique>
               <Technique>Create a symlink that tricks the application into thinking that a malicious library is the legitimate library.</Technique>
               <Technique>Use DLL side-loading to place a malicious verison of a DLL in the windows directory.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To modify the entries in the configuration file pointing to malicious libraries</Skill>
            <Skill Level="Medium">To force symlink and timing issues for redirecting access to libraries</Skill>
            <Skill Level="High">To reverse engineering the libraries and inject malicious code into the libraries</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Restrict the permission to modify the entries in the configuration file.</Mitigation>
            <Mitigation>Implementation: Check the integrity of the dynamically linked libraries before use them.</Mitigation>
            <Mitigation>Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... • mark the text segment writeable • save the PLT(GOT) entry • replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... • do the payload of the new lib call • restore the original PLT(GOT) entry • call the lib call • save the PLT(GOT) entry again (if its changed) • replace the PLT(GOT) entry with the address of the new lib call</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="706"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.008</Entry_ID>
               <Entry_Name>Hijack Execution Flow:Path Interception by Search Order Hijacking</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-29"/>
            <Reference External_Reference_ID="REF-30" Section="OWASP Top 10 2007 A3 – Malicious File Execution"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Description, Description Summary, References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="163" Name="Spear Phishing" Abstraction="Detailed" Status="Draft">
         <Description>An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="98"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Obtain useful contextual detailed information about the targeted user or organization] An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.</Description>
               <Technique>Conduct web searching research of target. See also: CAPEC-118.</Technique>
               <Technique>Identify trusted associates, colleagues and friends of target. See also: CAPEC-118.</Technique>
               <Technique>Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407.</Technique>
               <Technique>Collect social information via dumpster diving. See also: CAPEC-406.</Technique>
               <Technique>Collect social information via traditional sources. See also: CAPEC-118.</Technique>
               <Technique>Collect social information via Non-traditional sources. See also: CAPEC-118.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Optional: Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.</Description>
               <Technique>Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).</Technique>
               <Technique>Optionally obtain a legitimate SSL certificate for the new domain name.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Optional: Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.</Description>
               <Technique>Use spidering software to get copy of web pages on legitimate site.</Technique>
               <Technique>Manually save copies of required web pages from legitimate site.</Technique>
               <Technique>Create new web pages that have the legitimate site's look at feel, but contain completely new content.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>[Optional: Build variants of the website with very specific user information e.g., living area, etc.] Once the adversary has their website which duplicates a legitimate website, they need to build very custom user related information in it. For example, they could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.</Description>
               <Technique>Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Convince user to enter sensitive information on adversary's site.] An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.</Description>
               <Technique>Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.</Technique>
               <Technique>Place phishing link in post to online forum.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>6</Step>
               <Phase>Exploit</Phase>
               <Description>[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.</Description>
               <Technique>Log in to the legitimate site using another user's supplied credentials.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>None. Any user can be targeted by a Spear Phishing attack.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc).</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>An adversay must have the ability communicate their phishing scheme to the victims (via email, instance message, etc.), as well as a website or other platform for victims to enter personal information into.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Information Leakage</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>Privilege Escalation</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Note>Data Modification</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity that happened in a different area from where they live (details might be provided by the spear phishers) and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An adversary has just collected the target's online banking information which can now be used by them to log into the target's bank account and transfer money to a bank account of the adversary's choice.</Example>
            <Example>An adversary can leverage a weakness in the SMB protocol by sending the target, an official looking e-mail from their employer's IT Department stating that their system has vulnerable software, which they need to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, the target is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate the target to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a "Pass The Hash" attack.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="451"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1534</Entry_ID>
               <Entry_Name>Internal Spearfishing</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1566.001</Entry_ID>
               <Entry_Name>Phishing: Spearfishing Attachment</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1566.002</Entry_ID>
               <Entry_Name>Phishing: Spearfishing Link</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1566.003</Entry_ID>
               <Entry_Name>Phishing: Spearfishing via Service</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1598.001</Entry_ID>
               <Entry_Name>Phishing for Information: Spearfishing Service</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1598.002</Entry_ID>
               <Entry_Name>Phishing for Information: Spearfishing Attachment</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1598.003</Entry_ID>
               <Entry_Name>Phishing for Information: Spearfishing Link</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Execution_Flow, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="165" Name="File Manipulation" Abstraction="Meta" Status="Draft">
         <Description>An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Prerequisites>
            <Prerequisite>The target must use the affected file without verifying its integrity.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack. In some cases, tools can be used to better control the response of the targeted application to the modified file.</Resource>
         </Resources_Required>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1036.003</Entry_ID>
               <Entry_Name>Masquerading: Rename System Utilities</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="169" Name="Footprinting" Abstraction="Meta" Status="Stable">
         <Description>An adversary engages in probing and exploration activities to identify constituents and properties of the target.</Description>
         <Extended_Description>
            <xhtml:p>Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. Although similar to fingerprinting, footprinting aims to get a more holistic view of a system or network, whereas fingerprinting is more targeted to a specific application or operating system. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very Low</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.</Description>
               <Technique>Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.</Technique>
               <Technique>Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.</Technique>
               <Technique>DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.</Technique>
               <Technique>Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary knows how to send HTTP request, run the scan tool.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation>
            <Mitigation>Shut down unnecessary services/ports.</Mitigation>
            <Mitigation>Change default passwords by choosing strong passwords.</Mitigation>
            <Mitigation>Curtail unexpected input.</Mitigation>
            <Mitigation>Encrypt and password-protect sensitive data.</Mitigation>
            <Mitigation>Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1217</Entry_ID>
               <Entry_Name>Browser Bookmark Discovery</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1592</Entry_ID>
               <Entry_Name>Gather Victim Host Information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1595</Entry_ID>
               <Entry_Name>Active Scanning</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-31"/>
            <Reference External_Reference_ID="REF-32"/>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pp. 38-39"/>
            <Reference External_Reference_ID="REF-34" Section="Section 3.1 Introduction, pg. 47"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="17" Name="Using Malicious Files" Abstraction="Standard" Status="Draft">
         <Description>An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="122">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="233"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine File/Directory Configuration] The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.</Description>
               <Technique>Through shell access to a system, use the command "ls -l" to view permissions for files and directories.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Upload Malicious Files] If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.</Description>
               <Technique>Upload a malicious file through a misconfigured FTP server.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Execute Malicious File] The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To identify and execute against an over-privileged system interface</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Consider a directory on a web server with the following permissions</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="informative">drwxrwxrwx 5 admin public 170 Nov 17 01:08 webroot</xhtml:div>
               <xhtml:p>This could allow an attacker to both execute and upload and execute programs' on the web server. This one vulnerability can be exploited by a threat to probe the system and identify additional vulnerabilities to exploit.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="272"/>
            <Related_Weakness CWE_ID="59"/>
            <Related_Weakness CWE_ID="282"/>
            <Related_Weakness CWE_ID="270"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.005</Entry_ID>
               <Entry_Name>Hijack Execution Flow: Executable Installer File Permissions Weakness</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.010</Entry_ID>
               <Entry_Name>Hijack Execution Flow: Services File Permissions Weakness</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Accessing, Modifying or Executing Executable Files</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="177" Name="Create files with the same name as files protected with a higher classification" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.</Description>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target application must include external files. Most non-trivial applications meet this criterion.</Prerequisite>
            <Prerequisite>The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.</Prerequisite>
            <Prerequisite>The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="706"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1036</Entry_ID>
               <Entry_Name>Masquerading</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="180" Name="Exploiting Incorrectly Configured Access Control Security Levels" Abstraction="Standard" Status="Draft">
         <Description>An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.</Description>
         <Extended_Description>
            <xhtml:p>Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, "Accessing Functionality Not Properly Constrained by ACLs" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="122"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey] The attacker surveys the target application, possibly as a valid and authenticated user.</Description>
               <Technique>Spider the web site for all available links.</Technique>
               <Technique>Brute force to guess all function names/action with different privileges.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.</Description>
               <Technique>The attacker attempts authenticated access to targeted functions and data.</Technique>
               <Technique>The attacker attempts unauthenticated access to targeted functions and data.</Technique>
               <Technique>The attacker attempts indirect and side channel access to targeted functions and data.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.</Description>
               <Technique>The attacker executes the function or accesses the data not authorized to them.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Configure the access control correctly.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="732"/>
            <Related_Weakness CWE_ID="1190"/>
            <Related_Weakness CWE_ID="1191"/>
            <Related_Weakness CWE_ID="1193"/>
            <Related_Weakness CWE_ID="1220"/>
            <Related_Weakness CWE_ID="1268"/>
            <Related_Weakness CWE_ID="1280"/>
            <Related_Weakness CWE_ID="1297"/>
            <Related_Weakness CWE_ID="1311"/>
            <Related_Weakness CWE_ID="1315"/>
            <Related_Weakness CWE_ID="1318"/>
            <Related_Weakness CWE_ID="1320"/>
            <Related_Weakness CWE_ID="1321"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.010</Entry_ID>
               <Entry_Name>Hijack Execution Flow: Services File Permissions Weaknesses</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-29"/>
            <Reference External_Reference_ID="REF-30" Section="OWASP Top 10 2007 A3 – Malicious File Execution"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Phases</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Execution_Flow, Related_Weaknesses, Skills_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated References, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="186" Name="Malicious Software Update" Abstraction="Standard" Status="Draft">
         <Description>An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.</Description>
         <Extended_Description>
            <xhtml:p>Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an adversary to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity.</xhtml:p>
            <xhtml:p>As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the adversary immense latitude when structuring the attack, as well as many targets of opportunity. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters.</xhtml:p>
         </Extended_Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="184"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="98"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify target] The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users).</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Craft a deployment mechanism based on the target] The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.</Description>
               <Technique>Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update.</Technique>
               <Technique>Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update</Technique>
               <Technique>Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages.</Technique>
               <Technique>Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update.</Technique>
               <Technique>Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Deploy malicious software update] Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Skills_Required>
            <Skill Level="High">This attack requires advanced cyber capabilities</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the adversary to host a payload and then trigger the installation of the payload code.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Availability</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Validate software updates before installing.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.002</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-697"/>
         </References>
         <Notes>
            <Note Type="Other">Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Description, Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Description, Execution_Flow, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Extended_Description, References, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="187" Name="Malicious Automated Software Update via Redirection" Abstraction="Detailed" Status="Draft">
         <Description>An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.</Description>
         <Extended_Description>
            <xhtml:p>One predominate type of redirection attack requires DNS spoofing or hijacking of a domain name corresponding to an update server. The target software initiates an update request and the DNS request resolves the domain name of the update server to the IP address of the attacker, at which point the software accepts updates either transmitted by or pulled from the attackers' server. Attacks against DNS mechanisms comprise an initial phase of a chain of attacks that facilitate automated update hijacking attack, and such attacks have a precedent in targeted activities that have been as complex as DNS/BIND attacks of corporate infrastructures, to untargeted attacks aimed at compromising home broadband routers, as well as attacks involving the compromise of wireless access points, as well as 'evil twin' attacks coupled with DNS redirection. Due to the plethora of options open to the attacker in forcing name resolution to arbitrary servers the Automated Update Hijacking attack strategies are the tip of the spear for many multi-stage attack chains.</xhtml:p>
            <xhtml:p>The second weakness that is exploited by the attacker is the lack of integrity checking by the software in validating the update. Software which relies only upon domain name resolution to establish the identity of update code is particularly vulnerable, because this signals an absence of other security countermeasures that could be applied to invalidate the attackers' payload on basis of code identity, hashing, signing, encryption, and other integrity checking mechanisms. Redirection-based attack patterns work equally well against client-side software as well as local servers or daemons that provide software update functionality.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="186">
               <Exclude_Related Exclude_ID="403"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Availability</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1072</Entry_ID>
               <Entry_Name>Software Deployment Tools</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Architectural_Paradigms, Injection_Vector, Payload, Payload_Activation_Impact, References, Technical_Context</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated @Name, Consequences, Description, Likelihood_Of_Attack, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2020-12-17">Malicious Automated Software Update</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="19" Name="Embedding Scripts within Scripts" Abstraction="Standard" Status="Stable">
         <Description>An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.</Description>
         <Extended_Description>
            <xhtml:p>The adversary must have the ability to inject their script into a script that is likely to be executed. If this is done, then the adversary can potentially launch a variety of probes and attacks against the web server's local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts. With the proliferation of intermediaries, such as Web App Firewalls, network devices, and even printers having JVMs and Web servers, there are many locales where an adversary can inject malicious scripts. Since this attack pattern defines scripts within scripts, there are likely privileges to execute said attack on the host. These attacks are not solely limited to the server side, client side scripts like Ajax and client side JavaScript can contain malicious scripts as well.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="242"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Spider] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.</Description>
               <Technique>Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.</Technique>
               <Technique>Use a proxy tool to record all links visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.</Description>
               <Technique>Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.</Technique>
               <Technique>Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.</Technique>
               <Technique>Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.</Technique>
               <Technique>Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.</Technique>
               <Technique>Use a proxy tool to record results of the created requests.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Steal session IDs, credentials, page content, etc.] As the adversary succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the adversary.</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute appropriately.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Forceful browsing] When the adversary targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</Technique>
               <Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Content spoofing] By manipulating the content, the adversary targets the information that the user would like to get from the website.</Description>
               <Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes adversary-modified invalid information to the user on the current web page.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To load malicious script into open, e.g. world writable directory</Skill>
            <Skill Level="Medium">Executing remote scripts on host and collecting output</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation>
            <Mitigation>Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Perform input validation for all remote content.</Mitigation>
            <Mitigation>Perform output validation for all remote content.</Mitigation>
            <Mitigation>Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Session tokens for specific host</Mitigation>
            <Mitigation>Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
            <Mitigation>Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Ajax applications enable rich functionality for browser based web applications. Applications like Google Maps deliver unprecedented ability to zoom in and out, scroll graphics, and change graphic presentation through Ajax. The security issues that an adversary may exploit in this instance are the relative lack of security features in JavaScript and the various browser's implementation of JavaScript, these security gaps are what XSS and a host of other client side vulnerabilities are based on. While Ajax may not open up new security holes, per se, due to the conversational aspects between client and server of Ajax communication, attacks can be optimized. A single zoom in or zoom out on a graphic in an Ajax application may round trip to the server dozens of times. One of the first steps many adversarys take is frequently footprinting an environment, this can include scanning local addresses like 192.*.*.* IP addresses, checking local directories, files, and settings for known vulnerabilities, and so on.</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="informative">&lt;IMG SRC=javascript:alert('XSS')&gt;</xhtml:div>
               <xhtml:p>The XSS script that is embedded in a given IMG tag can be manipulated to probe a different address on every click of the mouse or other motions that the Ajax application is aware of.</xhtml:p>
               <xhtml:p>In addition the enumerations allow for the adversary to nest sequential logic in the attacks. While Ajax applications do not open up brand new attack vectors, the existing attack vectors are more than adequate to execute attacks, and now these attacks can be optimized to sequentially execute and enumerate host environments.</xhtml:p>
            </Example>
            <Example>~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027.009</Entry_ID>
               <Entry_Name>Obfuscated Files or Information: Embedded Payloads</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1546.004</Entry_ID>
               <Entry_Name>Event Triggered Execution:.bash_profile and .bashrc</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1546.016</Entry_ID>
               <Entry_Name>Event Triggered Execution: Installer Packages</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Description, Execution_Flow, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Example_Instances</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="191" Name="Read Sensitive Constants Within an Executable" Abstraction="Detailed" Status="Draft">
         <Description>
            <xhtml:p>An adversary engages in activities to discover any sensitive constants present within the compiled code of an executable. These constants may include literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user's authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password. When analyzing an executable the adversary may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include 'strings,' 'grep,' or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions.</xhtml:p>
            <xhtml:p>Additionally, sensitive numeric values can occur within an executable. This can be used to discover the location of cryptographic constants.</xhtml:p>
         </Extended_Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="167">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to a binary or executable such that it can be analyzed by various utilities.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Binary analysis programs such as 'strings' or 'grep', or hex editors.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="798"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1552.001</Entry_ID>
               <Entry_Name>Unsecured Credentials:Credentials in files</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-51" Section="Decompiler"/>
            <Reference External_Reference_ID="REF-52" Section="Debugger"/>
            <Reference External_Reference_ID="REF-53" Section="Disassembler"/>
         </References>
         <Notes>
            <Note Type="Other">
               <xhtml:p>More sophisticated methods of searching for sensitive strings within a file involve disassembly or decompiling of the file. One could, for example, utilize disassembly methods on an ISAPI executable or dll to discover a hard-coded password within the code as it executes. This type of analysis usually involves four stages in which first a debugger is attached to the running process, anti-debugging countermeasures are circumvented or bypassed, the program is analyzed step-by-step, and breakpoints are established so that discrete functions and data structures can be analyzed.</xhtml:p>
               <xhtml:p>Debugging tools such as SoftICE, Ollydbg, or vendor supplied debugging tools are often used. Disassembly tools such as IDA pro, or similar tools, can also be employed. A third strategy for accessing sensitive strings within a binary involves the decompilation of the file itself into source code that reveals the strings. An example of this type of analysis involves extracting source code from a java JAR file and then using functionality within a java IDE to search the source code for sensitive, hard-coded information. In performing this analysis native java tools, such as "jar" are used to extract the compiled class files. Next, a java decompiler such as "DJ" is used to extract java source code from the compiled classes, revealing source code. Finally, the source code is audited to reveal sensitive information, a step that is usually assisted by source code analysis programs.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Other_Notes, References, Related_Attack_Patterns, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated @Name, Description, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2020-07-30">Read Sensitive Strings Within an Executable</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="196" Name="Session Credential Falsification through Forging" Abstraction="Standard" Status="Draft">
         <Description>An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="384"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="61"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="21"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.</Description>
               <Technique>An attacker makes many anonymous connections and records the session IDs.</Technique>
               <Technique>An attacker makes authorized connections and records the session tokens or credentials.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.</Description>
               <Technique>The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.</Description>
               <Technique>The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality.</Technique>
               <Technique>The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Forge the session credential and reply the request.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.</Mitigation>
            <Mitigation>Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>This example uses client side scripting to set session ID in the victim's browser. The JavaScript code</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="informative">document.cookie="sessionid=0123456789"</xhtml:div>
               <xhtml:p>fixates a falsified session credential into victim's browser, with the help of crafted a URL link.</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="informative">http://www.example.com/&lt;script&gt;document.cookie="sessionid=0123456789";&lt;/script&gt;</xhtml:div>
               <xhtml:p>A similar example uses session ID as an argument of the URL.</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="informative">http://www.example.com/index.php/sessionid=0123456789</xhtml:div>
               <xhtml:p>Once the victim clicks the links, the attacker may be able to bypass authentication or piggy-back off some other authenticated victim's session.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="664"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1134.002</Entry_ID>
               <Entry_Name>Access Token Manipulation: Create Process with Token</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1134.003</Entry_ID>
               <Entry_Name>Access Token Manipulation: Make and Impersonate Token</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1606</Entry_ID>
               <Entry_Name>Forge Web Credentials</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-62"/>
            <Reference External_Reference_ID="REF-63" Section="Testing for Session Management"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences, Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="2" Name="Inducing Account Lockout" Abstraction="Standard" Status="Draft">
         <Description>An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="212">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>[Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout</Description>
               <Technique>Analyze system documentation to find list of events that could potentially cause account lockout</Technique>
               <Technique>Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly</Technique>
               <Technique>Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out</Description>
               <Technique>Obtain list of authorized users using another attack pattern, such as SQL Injection.</Technique>
               <Technique>Attempt to create accounts if possible; system should indicate if a user ID is already taken.</Technique>
               <Technique>Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.</Description>
               <Technique>For each user ID to be locked out, perform the lockout procedure discovered in the first step.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system has a lockout mechanism.</Prerequisite>
            <Prerequisite>An attacker must be able to reproduce behavior that would result in an account being locked.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Computer with access to the login portion of the target system</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.</Mitigation>
            <Mitigation>When implementing security features, consider how they can be misused and made to turn on themselves.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="645"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1531</Entry_ID>
               <Entry_Name>Account Access Removal</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="203" Name="Manipulate Registry Information" Abstraction="Standard" Status="Stable">
         <Description>An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="176">
               <Exclude_Related Exclude_ID="437"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted application must rely on values stored in a registry.</Prerequisite>
            <Prerequisite>The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The adversary requires privileged credentials or the development/acquiring of a tailored remote access tool.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Ensure proper permissions are set for Registry hives to prevent users from modifying keys.</Mitigation>
            <Mitigation>Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.</Mitigation>
            <Mitigation>Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="15"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1112</Entry_ID>
               <Entry_Name>Modify Registry</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1647</Entry_ID>
               <Entry_Name>Plist Modification</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, References, Related_Weaknesses, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Manipulate Application Registry Values</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="204" Name="Lifting Sensitive Data Embedded in Cache" Abstraction="Detailed" Status="Draft">
         <Description>An adversary examines a target application's cache, or a browser cache, for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="167"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="560"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify Application Cache] An adversary first identifies an application that utilizes a cache. This could either be a web application storing data in a browser cache, or an application running on a separate machine. The adversary examines the cache to determine file permissions and possible encryption.</Description>
               <Technique>Use probing tools to look for application cache files on a machine.</Technique>
               <Technique>Use a web application and determine if any sensitive information is stored in browser cache.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt to Access Cache] Once the cache has been discovered, the adversary attempts to access the cached data. This often requires previous access to a machine hosting the target application.</Description>
               <Technique>Use priviledge escalation to access cache files that might have strict privileges.</Technique>
               <Technique>If the application cache is encrypted with weak encryption, attempt to understand the encryption technique and break the encryption.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Lift Sensitive Data from Cache] After gaining access to cached data, an adversary looks for potentially sensitive information and stores it for malicious use. This sensitive data could possibly be used in follow-up attacks related to authentication or authorization.</Description>
               <Technique>Using a public computer, or gaining access to a victim's computer, examine browser cache to look for sensitive data left over from previous sessions.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target application must store sensitive information in a cache.</Prerequisite>
            <Prerequisite>The cache must be inadequately protected against attacker access.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file.</Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="524"/>
            <Related_Weakness CWE_ID="311"/>
            <Related_Weakness CWE_ID="1239"/>
            <Related_Weakness CWE_ID="1258"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1005</Entry_ID>
               <Entry_Name>Data from Local System</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Lifting cached, sensitive data embedded in client distributions (thick or thin)</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="206" Name="Signing Malicious Code" Abstraction="Detailed" Status="Draft">
         <Description>The adversary extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the adversary has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the adversary to execute arbitrary code on the victim's computer. This differs from CAPEC-673, because the adversary is performing the code signing.</Description>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The adversary first attempts to obtain a digital certificate in order to sign their malware or tools. This certificate could be stolen, created by the adversary, or acquired normally through a certificate authority.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>Based on the type of certificate obtained, the adversary will create a goal for their attack. This is either a broad or targeted attack. If an adversary was able to steal a certificate from a targeted organization, they could target this organization by pretending to have legitimate code signed by them. In other cases, the adversary would simply sign their malware and pose as legitimate software such that any user might trust it. This is the more broad approach</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>The adversary creates their malware and signs it with the obtained digital certificate. The adversary then checks if the code that they signed is valid either through downloading from the targeted source or testing locally.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>Once the malware has been signed, it is then deployed to the desired location. They wait for a trusting user to run their malware, thinking that it is legitimate software. This malware could do a variety of things based on the motivation of the adversary.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted developer must use a signing key to sign code bundles. (Note that not doing this is not a defense - it only means that the adversary does not need to steal the signing key before forging code bundles in the developer's name.)</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Ensure digital certificates are protected and inaccessible by unauthorized uses.</Mitigation>
            <Mitigation>If a digital certificate has been compromised it should be revoked and regenerated.</Mitigation>
            <Mitigation>Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In the famous Stuxnet malware incident, two digital certificates were compromised in order to sign malicious device drivers with legitimate credentials. The signing resulted in the malware appearing as trusted by the system it was running on, which facilitated the installation of the malware in kernel mode. This further resulted in Stuxnet remaining undetected for a significant amount of time. [REF-699]</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>The cyber espionage group CyberKittens leveraged a stolen certificate from AI Squared that allowed them to leverage a signed executable within Operation Wilted Tulip. This ultimately allowed the executable to run as trusted on the system, allowing a Crowd Strike stager to be loaded within the system's memory. [REF-714]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="732"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1553.002</Entry_ID>
               <Entry_Name>Subvert Trust Controls:Code Signing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-699"/>
            <Reference External_Reference_ID="REF-700"/>
            <Reference External_Reference_ID="REF-714"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Description, Prerequisites, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Execution_Flow, Mitigations, References</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Lifting signing key and signing malicious code from a production environment</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="21" Name="Exploitation of Trusted Identifiers" Abstraction="Meta" Status="Stable">
         <Description>
            <xhtml:p>An adversary guesses, obtains, or "rides" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>Attacks leveraging trusted identifiers typically result in the adversary laterally moving within the local network, since users are often allowed to authenticate to systems/applications within the network using the same identifier. This allows the adversary to obtain sensitive data, download/install malware on the system, pose as a legitimate user for social engineering purposes, and more.</xhtml:p>
            <xhtml:p>Attacks on trusted identifiers take advantage of the fact that some software accepts user input without verifying its authenticity. Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes "trust" other systems because they are behind a firewall. Similarly, servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Identifiers may be guessed or obtained due to insufficient randomness, poor protection (passed/stored in the clear), lack of integrity (unsigned), or improper correlation with access control policy enforcement points. Exposed configuration and properties files that contain sensitive data may additionally provide an adversary with the information needed to obtain these identifiers. An adversary may also "ride" an identifier via a malicious link, as is the case in Cross Site Request Forgery (CSRF) attacks.</xhtml:p>
            <xhtml:p>Regardless of the attack vector, successful spoofing and impersonation of trusted credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application for Indicators of Susceptibility] Using a variety of methods, until one is found that applies to the target, the adversary probes for cookies, session tokens, or entry points that bypass identifiers altogether.</Description>
               <Technique>Spider all available pages</Technique>
               <Technique>Attack known bad interfaces</Technique>
               <Technique>Search outward-facing configuration and properties files for identifiers.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Fetch samples] The adversary fetches many samples of identifiers. This may be through legitimate access (logging in, legitimate connections, etc.) or via systematic probing.</Description>
               <Technique>An adversary makes many anonymous connections and records the session IDs assigned.</Technique>
               <Technique>An adversary makes authorized connections and records the session tokens or credentials issued.</Technique>
               <Technique>An adversary gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connection from it, attempting to gain the same privileges as a trusted system.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Server software must rely on weak identifier proof and/or verification schemes.</Prerequisite>
            <Prerequisite>Identifiers must have long lifetimes and potential for reusability.</Prerequisite>
            <Prerequisite>Server software must allow concurrent sessions to exist.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to deploy software on network.</Resource>
            <Resource>Ability to communicate synchronously or asynchronously with server.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.</Mitigation>
            <Mitigation>Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.</Mitigation>
            <Mitigation>Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.</Mitigation>
            <Mitigation>Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.</Mitigation>
            <Mitigation>Design: Use strong session identifiers that are protected in transit and at rest.</Mitigation>
            <Mitigation>Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.</Mitigation>
            <Mitigation>Implementation: Verify authenticity of all identifiers at runtime.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Thin client applications like web applications are particularly vulnerable to session ID attacks. Since the server has very little control over the client, but still must track sessions, data, and objects on the server side, cookies and other mechanisms have been used to pass the key to the session data between the client and server. When these session keys are compromised it is trivial for an adversary to impersonate a user's session in effect, have the same capabilities as the authorized user. There are two main ways for an adversary to exploit session IDs.</xhtml:p>
               <xhtml:p>A brute force attack involves an adversary repeatedly attempting to query the system with a spoofed session header in the HTTP request. A web server that uses a short session ID can be easily spoofed by trying many possible combinations so the parameters session-ID= 1234 has few possible combinations, and an adversary can retry several hundred or thousand request with little to no issue on their side.</xhtml:p>
               <xhtml:p>The second method is interception, where a tool such as wireshark is used to sniff the wire and pull off any unprotected session identifiers. The adversary can then use these variables and access the application.</xhtml:p>
            </Example>
            <Example>For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="290"/>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="539"/>
            <Related_Weakness CWE_ID="6"/>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="664"/>
            <Related_Weakness CWE_ID="602"/>
            <Related_Weakness CWE_ID="642"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1134</Entry_ID>
               <Entry_Name>Access Token Manipulation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1528</Entry_ID>
               <Entry_Name>Steal Application Access Token</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1539</Entry_ID>
               <Entry_Name>Steal Web Session Cookie</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated @Name, @Status, Consequences, Description, Example_Instances, Execution_Flow, Mitigations, Prerequisites, Resources_Required, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Exploitation of Session Variables, Resource IDs and other Trusted Credentials</Previous_Entry_Name>
            <Previous_Entry_Name Date="2020-07-30">Exploitation of Trusted Credentials</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="227" Name="Sustained Client Engagement" Abstraction="Meta" Status="Draft">
         <Description>An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.</Description>
         <Extended_Description>
            <xhtml:p>The degree to which the attack is successful depends upon the adversary's ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual.</xhtml:p>
         </Extended_Description>
         <Prerequisites>
            <Prerequisite>This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="400"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499</Entry_ID>
               <Entry_Name>Endpoint Denial of Service</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>10</Entry_ID>
               <Entry_Name>Denial of Service</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="233" Name="Privilege Escalation" Abstraction="Meta" Status="Draft">
         <Description>An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.</Description>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="269"/>
            <Related_Weakness CWE_ID="1264"/>
            <Related_Weakness CWE_ID="1311"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1548</Entry_ID>
               <Entry_Name>Abuse Elevation Control Mechanism</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-600" Section="Testing for Privelege Escalation"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, Relationships, Type (Category -&gt; Attack_Pattern)</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated @Abstraction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated @Abstraction</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="25" Name="Forced Deadlock" Abstraction="Meta" Status="Stable">
         <Description>The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The adversary initiates an exploratory phase to get familiar with the system.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Explore</Phase>
               <Description>If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]</Prerequisite>
            <Prerequisite>The target host exposes an API to the user.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">This type of attack may be sophisticated and require knowledge about the system's resources and APIs.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>A successful forced deadlock attack compromises the availability of the system by exhausting its available resources.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).</Mitigation>
            <Mitigation>For competing actions, use well-known libraries which implement synchronization.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="412"/>
            <Related_Weakness CWE_ID="567"/>
            <Related_Weakness CWE_ID="662"/>
            <Related_Weakness CWE_ID="667"/>
            <Related_Weakness CWE_ID="833"/>
            <Related_Weakness CWE_ID="1322"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499.004</Entry_ID>
               <Entry_Name>Endpoint Denial of Service: Application or System Exploitation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
            <Reference External_Reference_ID="REF-101" Section="Deadlock"/>
            <Reference External_Reference_ID="REF-609" Section="Testing for XML Injection"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Type (Relationship -&gt; Attack_Pattern)</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Phases, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Probing_Techniques, Related_Weaknesses, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Prerequisites</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="251" Name="Local Code Inclusion" Abstraction="Standard" Status="Stable">
         <Description>The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="175"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.</Prerequisite>
            <Prerequisite>Some variants of this attack may require that old versions of some code files be present and in predictable locations.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Through local code inclusion, the adversary compromises the integrity of the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>An attacker may leverage local code inclusion in order to print sensitive data to a page, such as hidden configuration files or or password hashes.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1055</Entry_ID>
               <Entry_Name>Process Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-613" Section="Testing for Local File Inclusion"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="267" Name="Leverage Alternate Encoding" Abstraction="Standard" Status="Draft">
         <Description>An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="153"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.</Description>
               <Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</Technique>
               <Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</Technique>
               <Technique>Manually inspect the application to find entry points.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the "Explore" phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</Description>
               <Technique>Try to use different encodings of content in order to bypass validation routines.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An adversary can inject different representation of a filtered character in a different encoding.</Skill>
            <Skill Level="Medium">An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)</Mitigation>
            <Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified "encoding strings," which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka "Post Encoding Information Disclosure Vulnerability." Related Vulnerabilities CVE-2010-0488</Example>
            <Example>Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="173"/>
            <Related_Weakness CWE_ID="172"/>
            <Related_Weakness CWE_ID="180"/>
            <Related_Weakness CWE_ID="181"/>
            <Related_Weakness CWE_ID="73"/>
            <Related_Weakness CWE_ID="74"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="697"/>
            <Related_Weakness CWE_ID="692"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027</Entry_ID>
               <Entry_Name>Obfuscated Files or Information</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-108" Section="WASC-20 - Improper Input Handling"/>
            <Reference External_Reference_ID="REF-109" Section="Category: Encoding"/>
            <Reference External_Reference_ID="REF-110" Section="Canonicalization, locale and Unicode"/>
            <Reference External_Reference_ID="REF-69" Section="XSS (Cross Site Scripting) Prevention Cheat Sheet"/>
            <Reference External_Reference_ID="REF-112" Section="Chapter 5 Section 9: Character Encoding"/>
            <Reference External_Reference_ID="REF-113" Section="Character encoding"/>
            <Reference External_Reference_ID="REF-114"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Skills_Required, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Execution_Flow, Skills_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="268" Name="Audit Log Manipulation" Abstraction="Standard" Status="Draft">
         <Description>The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="161">
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target host is logging the action and data of the user.</Prerequisite>
            <Prerequisite>The target host insufficiently protects access to the logs or logging mechanisms.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>
               <xhtml:p>The attacker must understand how the logging mechanism works.</xhtml:p>
               <xhtml:p>Optionally, the attacker must know the location and the format of individual entries of the log files.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="117"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1070</Entry_ID>
               <Entry_Name>Indicator Removal on Host</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.002</Entry_ID>
               <Entry_Name>Impair Defenses: Disable Windows Event Logging</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.003</Entry_ID>
               <Entry_Name>Impair Defenses: Impair Command History Logging</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.008</Entry_ID>
               <Entry_Name>Impair Defenses: Disable Cloud Logs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <Entry_Name>Log Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="270" Name="Modification of Registry Run Keys" Abstraction="Detailed" Status="Stable">
         <Description>An adversary adds a new entry to the "run keys" in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="203"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="568"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="529"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="646"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="555"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target system] The adversary must first determine the system they wish to target. This attack only works on Windows.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the Windows registry.</Description>
               <Technique>Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.</Technique>
               <Technique>Gain remote access to a system through a variety of means.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Modify Windows registry] The adversary will modify the Windows registry by adding a new entry to the "run keys" referencing a desired program. This program will be run whenever the user logs in.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary can place a malicious executable (RAT) on the target system and then configure it to automatically run when the user logs in to maintain persistence on the target system.</Example>
            <Example>Through the modification of registry "run keys" the adversary can masquerade a malicious executable as a legitimate program.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="15"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1547.001</Entry_ID>
               <Entry_Name>Boot or Logon Autostart Execution: Registry Run Keys / Start Folder</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1547.014</Entry_ID>
               <Entry_Name>Boot or Logon Autostart Execution: Active</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Description, Mitigations, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Description, Execution_Flow, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="292" Name="Host Discovery" Abstraction="Standard" Status="Stable">
         <Description>An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires logical access to the target network in order to carry out host discovery.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1018</Entry_ID>
               <Entry_Name>Remote System Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 1: Footprinting, pp.44"/>
            <Reference External_Reference_ID="REF-34" Section="Section 3.6 Host Discover Techniques, pg.57"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="295" Name="Timestamp Request" Abstraction="Detailed" Status="Stable">
         <Description>This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="292">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to send a timestamp request to a remote target and receive a response.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Scanners or utilities that provide the ability to send custom ICMP queries.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.</Example>
            <Example>An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1124</Entry_ID>
               <Entry_Name>System Time Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pp. 44-51"/>
            <Reference External_Reference_ID="REF-123"/>
            <Reference External_Reference_ID="REF-124"/>
            <Reference External_Reference_ID="REF-125"/>
            <Reference External_Reference_ID="REF-147" Section="Section 3.7.2 ICMP Probe Selection, pg. 70"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Description Summary, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">ICMP Timestamp Request</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="30" Name="Hijacking a Privileged Thread of Execution" Abstraction="Standard" Status="Draft">
         <Description>An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="233">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target thread] The adversary determines the underlying system thread that is subject to user-control</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Gain handle to thread] The adversary then gains a handle to a process thread.</Description>
               <Technique>Use the "OpenThread" API call in Windows on a known thread.</Technique>
               <Technique>Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Alter process memory] Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.</Description>
               <Technique>On Windows, use "SuspendThread" followed by "VirtualAllocEx", "WriteProcessMemory", and "SetThreadContext".</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Resume thread execution] Once the process memory has been altered to execute malicious code, the thread is then resumed.</Description>
               <Technique>On Windows, use "ResumeThread".</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users</Prerequisite>
            <Prerequisite>In order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>
               <xhtml:p>None: No specialized resources are required to execute this type of attack. The adversary needs to be able to latch onto a privileged thread.</xhtml:p>
               <xhtml:p>The adversary does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the adversary's malicious code. This is the case even if the adversary conducts the attack remotely.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.</Mitigation>
            <Mitigation>Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="270"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1055.003</Entry_ID>
               <Entry_Name>Process Injection: Thread Execution Hijacking</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Probing_Techniques, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, Probing_Techniques</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Execution_Flow, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Description, Execution_Flow, Prerequisites</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="300" Name="Port Scanning" Abstraction="Standard" Status="Stable">
         <Description>An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.</Description>
         <Extended_Description>
            <xhtml:p>Although common services have assigned port numbers, services and applications can run on arbitrary ports. Additionally, port scanning is complicated by the potential for any machine to have up to 65535 possible UDP or TCP services. The goal of port scanning is often broader than identifying open ports, but also give the adversary information concerning the firewall configuration.</xhtml:p>
            <xhtml:p>Depending upon the method of scanning that is used, the process can be stealthy or more obtrusive, the latter being more easily detectable due to the volume of packets involved, anomalous packet traits, or system logging. Typical port scanning activity involves sending probes to a range of ports and observing the responses. There are four port statuses that this type of attack aims to identify: open, closed, filtered, and unfiltered. For strategic purposes it is useful for an adversary to distinguish between an open port that is protected by a filter vs. a closed port that is not protected by a filter. Making these fine grained distinctions is requires certain scan types. Collecting this type of information tells the adversary which ports can be attacked directly, which must be attacked with filter evasion techniques like fragmentation, source port scans, and which ports are unprotected (i.e. not firewalled) but aren't hosting a network service. An adversary often combines various techniques in order to gain a more complete picture of the firewall filtering mechanisms in place for a host.</xhtml:p>
         </Extended_Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary requires logical access to the target's network in order to carry out this type of attack.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1046</Entry_ID>
               <Entry_Name>Network Service Scanning</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 54"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-158"/>
            <Reference External_Reference_ID="REF-34" Section="Section 4.1 Introduction to Port Scanning, pg. 73"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Notes>
            <Note Type="Other">There are four types of port status that this type of attack aims to identify: 1) Open Port: The port is open and a firewall does not block access to the port, 2) Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port, 3) Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified, and 4) Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Description, Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="309" Name="Network Topology Mapping" Abstraction="Standard" Status="Draft">
         <Description>An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="664"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1016</Entry_ID>
               <Entry_Name>System Network Configuration Discovery</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1049</Entry_ID>
               <Entry_Name>System Network Connections Discovery</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1590</Entry_ID>
               <Entry_Name>Gather Victim Network Information</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="31" Name="Accessing/Intercepting/Modifying HTTP Cookies" Abstraction="Detailed" Status="Draft">
         <Description>This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="39"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.</Description>
               <Technique>Sniff cookie using a network sniffer such as Wireshark</Technique>
               <Technique>Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor.</Technique>
               <Technique>Steal cookie via a cross-site scripting attack.</Technique>
               <Technique>Guess cookie contents if it contains predictable information.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.</Description>
               <Technique>If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.</Technique>
               <Technique>Analyze the cookie's contents to determine whether it contains any sensitive information.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.</Description>
               <Technique>Modify logical parts of cookie and send it back to server to observe the effects.</Technique>
               <Technique>Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.</Technique>
               <Technique>Modify cookie bitwise and send it back to server to observe the effects.</Technique>
               <Technique>Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a "points balance" for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Target server software must be a HTTP daemon that relies on cookies.</Prerequisite>
            <Prerequisite>The cookies must contain sensitive information.</Prerequisite>
            <Prerequisite>The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To overwrite session cookie data, and submit targeted attacks via HTTP</Skill>
            <Skill Level="High">Exploiting a remote buffer overflow generated by attack</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Use input validation for cookies</Mitigation>
            <Mitigation>Design: Generate and validate MAC for cookies</Mitigation>
            <Mitigation>Implementation: Use SSL/TLS to protect cookie in transit</Mitigation>
            <Mitigation>Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="565"/>
            <Related_Weakness CWE_ID="302"/>
            <Related_Weakness CWE_ID="311"/>
            <Related_Weakness CWE_ID="113"/>
            <Related_Weakness CWE_ID="539"/>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="315"/>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="472"/>
            <Related_Weakness CWE_ID="602"/>
            <Related_Weakness CWE_ID="642"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1539</Entry_ID>
               <Entry_Name>Steal Web Session Cookie</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Execution_Flow, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Execution_Flow, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="312" Name="Active OS Fingerprinting" Abstraction="Standard" Status="Stable">
         <Description>An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="224"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>
               <xhtml:p>Any type of active probing that involves non-standard packet headers requires the use of raw sockets, which is not available on particular operating systems (Microsoft Windows XP SP 2, for example). Raw socket manipulation on Unix/Linux requires root privileges.</xhtml:p>
               <xhtml:p>A tool capable of sending and receiving packets from a remote system.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1082</Entry_ID>
               <Entry_Name>System Information Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="313" Name="Passive OS Fingerprinting" Abstraction="Standard" Status="Stable">
         <Description>An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="224"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1082</Entry_ID>
               <Entry_Name>System Information Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-33" Section="Chapter 2: Scanning, pg. 56"/>
            <Reference External_Reference_ID="REF-128"/>
            <Reference External_Reference_ID="REF-212" Section="Chapter 8. Remote OS Detection"/>
            <Reference External_Reference_ID="REF-130"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="35" Name="Leverage Executable Code in Non-Executable Files" Abstraction="Detailed" Status="Draft">
         <Description>An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="636"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="23"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="75"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must have the ability to modify non-executable files consumed by the target software.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To identify and execute against an over-privileged system interface</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
            <Mitigation>Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.</Mitigation>
            <Mitigation>Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix "cp" command can be rerouted to "rm" or other standard command so the user's intention is subverted.</Example>
            <Example>The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.</Example>
            <Example>
               <xhtml:p>Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)</xhtml:p>
               <xhtml:p>http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here</xhtml:p>
               <xhtml:p>The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name "public" grants all users with the public role the ability to use the administration functionality.</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="informative">&lt; security-constraint&gt;<xhtml:div style="margin-left:1em;">&lt;description&gt;Security processing rules for admin screens&lt;/description&gt;<xhtml:br/>&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;<xhtml:br/>&lt;http-method&gt;POST&lt;/http-method&gt;<xhtml:br/>&lt;http-method&gt;GET&lt;/http-method&gt;<xhtml:div style="margin-left:1em;">&lt;auth-constraint&gt;<xhtml:div style="margin-left:1em;">&lt;role-name&gt;administrator&lt;/role-name&gt;<xhtml:br/>&lt;role-name&gt;public&lt;/role-name&gt;</xhtml:div>
                        <xhtml:br/>&lt;/auth-constraint&gt;</xhtml:div>
                  </xhtml:div>
                  <xhtml:br/>&lt;/security-constraint&gt;</xhtml:div>
               <xhtml:p>The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="94"/>
            <Related_Weakness CWE_ID="96"/>
            <Related_Weakness CWE_ID="95"/>
            <Related_Weakness CWE_ID="97"/>
            <Related_Weakness CWE_ID="272"/>
            <Related_Weakness CWE_ID="59"/>
            <Related_Weakness CWE_ID="282"/>
            <Related_Weakness CWE_ID="270"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027.006</Entry_ID>
               <Entry_Name>Obfuscated Files or Information: HTML Smuggling</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027.009</Entry_ID>
               <Entry_Name>Obfuscated Files or Information: Embedded Payloads</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1564.009</Entry_ID>
               <Entry_Name>Hide Artifacts: Resource Forking</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, Examples-Instances, Related_Attack_Patterns, Type (Attack_Pattern -&gt; Relationship)</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="37" Name="Retrieve Embedded Sensitive Data" Abstraction="Detailed" Status="Draft">
         <Description>An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="167"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.</Description>
               <Technique>Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.</Technique>
               <Technique>Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Retrieve Embedded Data] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.</Description>
               <Technique>API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.</Technique>
               <Technique>Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.</Technique>
               <Technique>Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.</Technique>
               <Technique>Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>In order to feasibly execute this type of attack, some valuable data must be present in client software.</Prerequisite>
            <Prerequisite>Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as "Strings" or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.</Example>
            <Example>An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.</Example>
            <Example>Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="226"/>
            <Related_Weakness CWE_ID="311"/>
            <Related_Weakness CWE_ID="525"/>
            <Related_Weakness CWE_ID="312"/>
            <Related_Weakness CWE_ID="314"/>
            <Related_Weakness CWE_ID="315"/>
            <Related_Weakness CWE_ID="318"/>
            <Related_Weakness CWE_ID="1239"/>
            <Related_Weakness CWE_ID="1258"/>
            <Related_Weakness CWE_ID="1266"/>
            <Related_Weakness CWE_ID="1272"/>
            <Related_Weakness CWE_ID="1278"/>
            <Related_Weakness CWE_ID="1301"/>
            <Related_Weakness CWE_ID="1330"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1005</Entry_ID>
               <Entry_Name>Data from Local System</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1552.004</Entry_ID>
               <Entry_Name>Unsecured Credentials: Private Keys</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Execution_Flow, Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Lifting Data Embedded in Client Distributions</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="38" Name="Leveraging/Manipulating Configuration File Search Paths" Abstraction="Detailed" Status="Draft">
         <Description>This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="159"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must be able to write to redirect search paths on the victim host.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To identify and execute against an over-privileged system interface</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program</Mitigation>
            <Mitigation>Implementation: Host integrity monitoring</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Another method is to redirect commands by aliasing one legitimate command to another to create unexpected results. the Unix command "rm" could be aliased to "mv" and move all files the victim thinks they are deleting to a directory the attacker controls. In a Unix shell .profile setting</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="informative">alias rm=mv /usr/home/attacker</xhtml:div>
               <xhtml:p>In this case the attacker retains a copy of all the files the victim attempts to remove.</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>A standard UNIX path looks similar to this</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="informative">/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin</xhtml:div>
               <xhtml:p>If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers' behalf:</xhtml:p>
               <xhtml:div style="margin-left:1em;" class="informative">/evildir/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin</xhtml:div>
               <xhtml:p>This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="426"/>
            <Related_Weakness CWE_ID="427"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.007</Entry_ID>
               <Entry_Name>Hijack Execution Flow: Path Interception by PATH Environment Variable</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.009</Entry_ID>
               <Entry_Name>Hijack Execution Flow: Path Interception by Unquoted Path</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description, Description Summary, Examples-Instances, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="383" Name="Harvesting Information via API Event Monitoring" Abstraction="Detailed" Status="Draft">
         <Description>An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a "virtual sale" of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="407"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target software is utilizing application framework APIs</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>The adversary is able to gather information to potentially support further nefarious activities.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="311"/>
            <Related_Weakness CWE_ID="319"/>
            <Related_Weakness CWE_ID="419"/>
            <Related_Weakness CWE_ID="602"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1056.004</Entry_ID>
               <Entry_Name>Input Capture: Credential API Hooking</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-327"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Harvesting Usernames or UserIDs via Application API Event Monitoring</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="407" Name="Pretexting" Abstraction="Standard" Status="Draft">
         <Description>An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.</Description>
         <Extended_Description>
            <xhtml:p>Pretexting can also be used to impersonate people in certain jobs and roles that they never themselves have done. In simple form, these attacks can be leveraged to learn information about a target. More complicated iterations may seek to solicit a target to perform some action that assists the adversary in exploiting organizational weaknesses or obtaining access to secure facilities or systems. Pretexting is not a one-size fits all solution. Good information gathering techniques can make or break a good pretext. A solid pretext is an essential part of building trust. If an adversary’s alias, story, or identity has holes or lacks credibility or even the perception of credibility the target will most likely catch on.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="416"/>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="410"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="163"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary requires strong inter-personal and communication skills.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1589</Entry_ID>
               <Entry_Name>Gather Victim Identity Information</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-348"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Social Information Gathering via Pretexting</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="438" Name="Modification During Manufacture" Abstraction="Meta" Status="Draft">
         <Description>An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.</Description>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195</Entry_ID>
               <Entry_Name>Supply Chain Compromise</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-379"/>
            <Reference External_Reference_ID="REF-380"/>
            <Reference External_Reference_ID="REF-381"/>
            <Reference External_Reference_ID="REF-382" Section="Section 1. Introduction"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Integrity Modification During Manufacture</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="439" Name="Manipulation During Distribution" Abstraction="Meta" Status="Draft">
         <Description>An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.</Description>
         <Example_Instances>
            <Example>A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.</Example>
            <Example>External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1269"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195</Entry_ID>
               <Entry_Name>Supply Chain Compromise</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-379"/>
            <Reference External_Reference_ID="REF-384"/>
            <Reference External_Reference_ID="REF-382" Section="Section 1. Introduction"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Integrity Modification During Distribution</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="440" Name="Hardware Integrity Attack" Abstraction="Meta" Status="Stable">
         <Description>An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Prerequisites>
            <Prerequisite>Influence over the deployed system at a victim location.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1200</Entry_ID>
               <Entry_Name>Hardware Additions</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Description, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Integrity Modification During Deployed Use</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="442" Name="Infected Software" Abstraction="Standard" Status="Stable">
         <Description>An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="441">
               <Exclude_Related Exclude_ID="515"/>
               <Exclude_Related Exclude_ID="437"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="506"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.001</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.002</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-387"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Malicious Logic Inserted Into Product Software</Previous_Entry_Name>
            <Previous_Entry_Name Date="2018-07-31">Malicious Logic Inserted Into To Product Software</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="443" Name="Malicious Logic Inserted Into Product by Authorized Developer" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product.</Description>
         <Extended_Description>
            <xhtml:p>Supply chain attacks from approved or trusted developers are extremely difficult to detect as it is generally assumed the quality control and internal security measures of these organizations conform to best practices. In some cases the malicious logic is intentional, embedded by a disgruntled employee, programmer, or individual with an otherwise hidden agenda. In other cases, the integrity of the product is compromised by accident (e.g. by lapse in the internal security of the organization that results in a product becoming contaminated). In further cases, the developer embeds a backdoor into a product to serve some purpose, such as product support, but discovery of the backdoor results in its malicious use by adversaries. It is also worth noting that this attack can occur during initial product development or throughout a product's sustainment.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the product during the initial or continuous development.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In January 2022 the author of popular JavaScript packages "Faker" and "colors", used for generating mock data and including colored text within NodeJS consoles respectively, introduced malicious code that resulted in a Denial of Service (DoS) via an infinite loop. When applications that leveraged these packages updated to the malicious version, their applications executed the infinite loop and output gibberish ASCI characters endlessly. This resulted in the application being unusable until a stable version of the package was obtained. [REF-705]</xhtml:p>
            </Example>
            <Example>During initial development, an authorized hardware developer implants a malicious microcontroller within an Internet of Things (IOT) device and programs the microcontroller to communicate with the vulnerable device. Each time the device initializes, the malicious microcontroller's code is executed, which ultimately provides the adversary with backdoor access to the vulnerable device. This can further allow the adversary to sniff network traffic, exfiltrate date, execute unauthorized commands, and/or pivot to other vulnerable devices.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.002</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-379"/>
            <Reference External_Reference_ID="REF-704"/>
            <Reference External_Reference_ID="REF-705"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated @Name, Description, Example_Instances, Extended_Description, Mitigations, Prerequisites, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2022-09-29">Malicious Logic Inserted Into Product Software by Authorized Developer</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="445" Name="Malicious Logic Insertion into Product Software via Configuration Management Manipulation" Abstraction="Detailed" Status="Stable">
         <Description>
            <xhtml:p>An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>Configuration management servers operate on the basis of a client pool, instructing each client on which software to install. In some cases the configuration management server will automate the software installation process. A malicious insider or an adversary who has compromised the server can alter the software baseline that clients must install, allowing the adversary to compromise a large number of satellite machines using the configuration management system. If an adversary can control elements of a product's configuration management for its deployed environment they can potentially alter fundamental security properties of the system based on assumptions that secure configurations are in place. It is also worth noting that this attack can occur during initial product development or throughout a product's sustainment.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.</Mitigation>
            <Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In 2016, the policy-based configuration management system Chef was shown to be vulnerable to remote code execution attacks based on its Chef Manage add-on improperly deserializing user-driven cookie data. This allowed unauthenticated users the ability to craft cookie data that executed arbitrary code with the web server's privileges. [REF-706]</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.001</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-379"/>
            <Reference External_Reference_ID="REF-706"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Extended_Description, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="446" Name="Malicious Logic Insertion into Product via Inclusion of Third-Party Component" Abstraction="Detailed" Status="Stable">
         <Description>
            <xhtml:p>An adversary conducts supply chain attacks by the inclusion of insecure third-party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>The result is a window of opportunity for exploiting the product until the insecure component is discovered. This supply chain threat can result in the installation of malicious software or hardware that introduces widespread security vulnerabilities within an organization. Additionally, because software often depends upon a large number of interdependent libraries and components to be present, security holes can be introduced merely by installing Commercial off the Shelf (COTS) or Open Source Software (OSS) software that comes pre-packaged with the components required for it to operate. It is also worth noting that this attack can occur during initial product development or throughout a product's sustainment.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the product during the initial or continuous development. This access is often obtained via insider access to include the third-party component after deployment.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.</Mitigation>
            <Mitigation>Don't assume popular third-party components are free from malware or vulnerabilities. For software, assess for malicious functionality via update/commit reviews or automated static/dynamic analysis prior to including the component within the application and deploying in a production environment.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>From mid-2014 to early 2015, Lenovo computers were shipped with the Superfish Visual Search software that ultimately functioned as adware on the system. The Visual Search installation included a self-signed root HTTPS certificate that was able to intercept encrypted traffic for any site visited by the user. Of more concern was the fact that the certificate's corresponding private key was the same for every Lenovo machine. Once the private key was discovered [REF-709], an adversary could then conduct an Adversary-in-the-Middle (AitM) attack that would go undetected by machines that had this certificate installed on it. Adversaries could then masquerade as legitimate entities such as financial institutions, popular corporations, or other secure destinations on the Internet. [REF-708]</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>In 2018 it was discovered that Chinese spies infiltrated several U.S. government agencies and corporations as far back as 2015 by including a malicious microchip within the motherboard of servers sold by Elemental Technologies to the victims. Although these servers were assembled via a U.S. based company, the motherboards used within the servers were manufactured and maliciously altered via a Chinese subcontractor. Elemental Technologies then sold these malicious servers to various U.S. government agencies, such as the DoD and CIA, and corporations like Amazon and Apple. The malicious microchip provided adversaries with a backdoor into the system, which further allowed them to access any network that contained the exploited systems, to exfiltrate data to be sent to the Chinese government.[REF-713]</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195</Entry_ID>
               <Entry_Name>Supply Chain Compromise</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-379"/>
            <Reference External_Reference_ID="REF-707"/>
            <Reference External_Reference_ID="REF-708"/>
            <Reference External_Reference_ID="REF-709"/>
            <Reference External_Reference_ID="REF-713"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Example_Instances, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated @Name, Description, Example_Instances, Extended_Description, Mitigations, Prerequisites, References, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2022-09-29">Malicious Logic Insertion into Product Software via Inclusion of 3rd Party Component Dependency</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="448" Name="Embed Virus into DLL" Abstraction="Detailed" Status="Stable">
         <Description>An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="442">
               <Exclude_Related Exclude_ID="515"/>
               <Exclude_Related Exclude_ID="437"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="506"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027.009</Entry_ID>
               <Entry_Name>Obfuscated Files or Information: Embedded Payloads</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">Malware Infection into Product Software</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="457" Name="USB Memory Attacks" Abstraction="Detailed" Status="Draft">
         <Description>An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="456"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="529"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine Target System] In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.</Description>
               <Technique>If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Develop or Obtain malware and install on a USB device] The adversary develops or obtains the malicious software necessary to exploit the target system, which they then install on an external USB device such as a USB flash drive.</Description>
               <Technique>The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Connect or deceive a user into connecting the infected USB device] Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.</Description>
               <Technique>The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on their own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Some level of physical access to the device being attacked.</Prerequisite>
            <Prerequisite>Information pertaining to the target organization on how to best execute a USB Drop Attack.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.</Mitigation>
            <Mitigation>Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.</Mitigation>
            <Mitigation>Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1299"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1091</Entry_ID>
               <Entry_Name>Replication Through Removable Media</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1092</Entry_ID>
               <Entry_Name>Communication Through Removable Media</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-379"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description, Description Summary, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Execution_Flow, Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="464" Name="Evercookie" Abstraction="Standard" Status="Draft">
         <Description>An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.</Description>
         <Extended_Description>
            <xhtml:p>The places a persistent cookie is stored on a victim's machine include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others.</xhtml:p>
         </Extended_Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="554"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim's browser is not configured to reject all cookiesThe victim visits a website that serves the attackers' evercookie</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Evercookie source code</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.</Mitigation>
            <Mitigation>Design: Safari browser's private browsing mode is currently effective against evercookies.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="359"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1606.001</Entry_ID>
               <Entry_Name>Forge Web Credentials: Web Cookies</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-401"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="465" Name="Transparent Proxy Abuse" Abstraction="Standard" Status="Draft">
         <Description>A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client.</Description>
         <Extended_Description>
            <xhtml:p>Transparent proxies are often used by enterprises and ISPs. For requests originating at the client transparent proxies need to figure out the final destination of the client's data packet. Two ways are available to do that: either by looking at the layer three (network) IP address or by examining layer seven (application) HTTP header destination. A browser has same origin policy that typically prevents scripts coming from one domain initiating requests to other websites from which they did not come. To circumvent that, however, malicious Flash or an Applet that is executing in the user's browser can attempt to create a cross-domain socket connection from the client to the remote domain. The transparent proxy will examine the HTTP header of the request and direct it to the remote site thereby partially bypassing the browser's same origin policy. This can happen if the transparent proxy uses the HTTP host header information for addressing rather than the IP address information at the network layer. This attack allows malicious scripts inside the victim's browser to issue cross-domain requests to any hosts accessible to the transparent proxy.</xhtml:p>
         </Extended_Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="554"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Transparent proxy is usedVulnerable configuration of network topology involving the transparent proxy (e.g., no NAT happening between the client and the proxy)Execution of malicious Flash or Applet in the victim's browser</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Creating malicious Flash or Applet to open a cross-domain socket connection to a remote system</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.</Mitigation>
            <Mitigation>Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="441"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1090.001</Entry_ID>
               <Entry_Name>Proxy: Internal Proxy</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-402"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Socket Capable Browser Plugins Result In Transparent Proxy Abuse</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="469" Name="HTTP DoS" Abstraction="Standard" Status="Draft">
         <Description>An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="227"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>Ability to issues hundreds of HTTP requests</Resource>
         </Resources_Required>
         <Mitigations>
            <Mitigation>Configuration: Configure web server software to limit the waiting period on opened HTTP sessions</Mitigation>
            <Mitigation>Design: Use load balancing mechanisms</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
            <Related_Weakness CWE_ID="772"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499.002</Entry_ID>
               <Entry_Name>Endpoint Denial of Service: Service Exhaustion Flood</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-406"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="471" Name="Search Order Hijacking" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="159"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify target general susceptibility] An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.</Description>
               <Technique>The attacker uses a tool such as the OSX "otool" utility or manually probes whether the target application uses dynamically linked libraries.</Technique>
               <Technique>The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Craft malicious libraries] The attacker uses knowledge gained in the Explore phase to craft malicious libraries that they will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.</Description>
               <Technique>The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using "sleep(2)" and "usleep()" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Redirect the access to libraries to the malicious libraries] The attacker redirects the target to the malicious libraries they crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.</Description>
               <Technique>The attacker modifies the entries in the configuration files pointing to the malicious libraries they crafted.</Technique>
               <Technique>The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-132.</Technique>
               <Technique>The attacker leverages file search path order issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-38.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Attacker has a mechanism to place its malicious libraries in the needed location on the file system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Ability to create a malicious library.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected</Mitigation>
            <Mitigation>Design: Sign system DLLs so that unauthorized DLLs can be detected.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:\Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:\Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.</Example>
            <Example>macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="427"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.001</Entry_ID>
               <Entry_Name>Hijack Execution Flow:DLL search order hijacking</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.004</Entry_ID>
               <Entry_Name>Hijack Execution Flow: Dylib Hijacking</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.008</Entry_ID>
               <Entry_Name>Hijack Execution Flow: Path Interception by Search Order Hijacking</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-409"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Examples-Instances, References, Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Execution_Flow, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2018-07-31">DLL Search Order Hijacking</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="473" Name="Signature Spoof" Abstraction="Standard" Status="Draft">
         <Description>An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="151">
               <Exclude_Related Exclude_ID="515"/>
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="403"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.</Prerequisite>
            <Prerequisite>The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Technical understanding of how signature verification algorithms work with data and applications</Skill>
         </Skills_Required>
         <Consequences><!--Privilege Escalation--><!--Privilege Escalation--><Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.</Example>
            <Example>An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="20"/>
            <Related_Weakness CWE_ID="327"/>
            <Related_Weakness CWE_ID="290"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1036.001</Entry_ID>
               <Entry_Name>Masquerading: Invalid Code Signature</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1553.002</Entry_ID>
               <Entry_Name>Subvert Trust Controls: Code Signing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="474" Name="Signature Spoofing by Key Theft" Abstraction="Detailed" Status="Draft">
         <Description>An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An authoritative or reputable signer is storing their private signature key with insufficient protection.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Knowledge of common location methods and access methods to sensitive data</Skill>
            <Skill Level="High">Ability to compromise systems containing sensitive data</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Restrict access to private keys from non-supervisory accounts</Mitigation>
            <Mitigation>Restrict access to administrative personnel and processes only</Mitigation>
            <Mitigation>Ensure all remote methods are secured</Mitigation>
            <Mitigation>Ensure all services are patched and up to date</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1552.004</Entry_ID>
               <Entry_Name>Unsecured Credentials: Private Keys</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-411"/>
            <Reference External_Reference_ID="REF-412"/>
            <Reference External_Reference_ID="REF-413"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="478" Name="Modification of Windows Service Configuration" Abstraction="Detailed" Status="Usable">
         <Description>An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. The goal of this attack is to execute a malicious binary in place of an existing service.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="203"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target system] The adversary must first determine the system they wish to modify the registry of. This needs to be a windows machine as this attack only works on the windows registry.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the windows registry.</Description>
               <Technique>Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.</Technique>
               <Technique>Gain remote access to a system through a variety of means.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Modify windows registry] The adversary will modify the windows registry by changing the configuration settings for a service. Specifically, the adversary will change the path settings to define a path to a malicious binary to be executed.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must have the capability to write to the Windows Registry on the targeted system.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>By altering specific configuration settings for the service, the adversary could run arbitrary code to be executed.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.011</Entry_ID>
               <Entry_Name>Hijack Execution Flow:Service Registry Permissions Weakness</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1543.003</Entry_ID>
               <Entry_Name>Create or Modify System Process:Windows Service</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-04-25</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Description, Execution_Flow</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="479" Name="Malicious Root Certificate" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the ability to create a new root certificate.</Prerequisite>
         </Prerequisites>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1553.004</Entry_ID>
               <Entry_Name>Subvert Trust Controls:Install Root Certificate</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-04-26</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="480" Name="Escaping Virtualization" Abstraction="Standard" Status="Draft">
         <Description>An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="115"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Probing] The adversary probes the target application, service, or device to find a possible weakness that would allow escaping the virtualized environment.</Description>
               <Technique>Probing applications, services, or devices for virtualization weaknesses.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Verify the exploitable security weaknesses] Using the found weakness, the adversary attempts to escape the virtualized environment.</Description>
               <Technique>Using an application weakness to escape a virtualized environment</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Execute more complex attacks] Once outside of the virtualized environment, the adversary attempts to perform other more complex attacks such as accessing system resources or executing unauthorized code within the host environment.</Description>
               <Technique>Executing complex attacks when given higher permissions by escaping a virtualized environment</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Run Arbitrary Code</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure virtualization software is current and up-to-date.</Mitigation>
            <Mitigation>Abide by the least privilege principle to avoid assigning users more privileges than necessary.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1611</Entry_ID>
               <Entry_Name>Escape to Host</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2019-09-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="481" Name="Contradictory Destinations in Traffic Routing Schemes" Abstraction="Standard" Status="Draft">
         <Description>Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="161">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.</Prerequisite>
            <Prerequisite>If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The adversary must have some knowledge of how messages are routed.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="923"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1090.004</Entry_ID>
               <Entry_Name>Proxy:Domain Fronting</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2019-04-04</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="482" Name="TCP Flood" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain. This often involves the use of TCP SYN messages.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1498.001</Entry_ID>
               <Entry_Name>Network Denial of Service: Direct Network Flood</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499.001</Entry_ID>
               <Entry_Name>Endpoint Denial of Service: OS Exhaustion Flood</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499.002</Entry_ID>
               <Entry_Name>Endpoint Denial of Service: Service Exhaustion Flood</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Description, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="485" Name="Signature Spoofing by Key Recreation" Abstraction="Detailed" Status="Draft">
         <Description>An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An authoritative signer is using a weak method of random number generation or weak signing software that causes key leakage or permits key inference.</Prerequisite>
            <Prerequisite>An authoritative signer is using a signature algorithm with a direct weakness or with poorly chosen parameters that enable the key to be recovered using signatures from that signer.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Cryptanalysis of signature generation algorithm</Skill>
            <Skill Level="High">Reverse engineering and cryptanalysis of signature generation algorithm implementation and random number generation</Skill>
            <Skill Level="High">Ability to create malformed data blobs and know how to present them directly or indirectly to a victim.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Ensure cryptographic elements have been sufficiently tested for weaknesses.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="330"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1552.004</Entry_ID>
               <Entry_Name>Unsecure Credentials: Private Keys</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-419"/>
            <Reference External_Reference_ID="REF-420"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="488" Name="HTTP Flood" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Design: Use a Web Application Firewall (WAF) to help filter out malicious traffic. This can be setup with rules to block IP addresses found in IP reputation databases, which contains lists of known bad IP addresses. Analysts should also monitor when the traffic flow becomes abnormally large, and be able to add on-the-fly rules to block malicious traffic. Special care should be taken to ensure low false positive rates in block rules and functionality should be implemented to allow a legitimate user to resume sending traffic if they have been blocked.</Mitigation>
            <Mitigation>Hire a third party provider to implement a Web Application Firewall (WAF) for your application. Third party providers have dedicated resources and expertise that could allow them to update rules and prevent HTTP Floods very quickly.</Mitigation>
            <Mitigation>Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.</Mitigation>
            <Mitigation>Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499.002</Entry_ID>
               <Entry_Name>Endpoint Denial of Service:Service Exhaustion Flood</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-751"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Mitigations, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="489" Name="SSL Flood" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499.002</Entry_ID>
               <Entry_Name>Endpoint Denial of Service:Service Exhaustion Flood</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="49" Name="Password Brute Forcing" Abstraction="Standard" Status="Draft">
         <Description>An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.</Description>
         <Extended_Description>
            <xhtml:p>A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy. In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.). Knowing the password policy on the system can make a brute force attack more efficient. For instance, if the policy states that all passwords must be of a certain level, there is no need to check smaller candidates.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="112"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="600"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="560"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="561"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="653"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine application's/system's password policy] Determine the password policies of the target application/system.</Description>
               <Technique>Determine minimum and maximum allowed password lengths.</Technique>
               <Technique>Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).</Technique>
               <Technique>Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.</Description>
               <Technique>Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.</Technique>
               <Technique>Perform an offline dictionary attack or a rainbow table attack against a known password hash.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An adversary needs to know a username to target.</Prerequisite>
            <Prerequisite>The system uses password based authentication as the one factor authentication mechanism.</Prerequisite>
            <Prerequisite>An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">A brute force attack is very straightforward. A variety of password cracking tools are widely available.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Many incorrect login attempts are detected by the system.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.</Mitigation>
            <Mitigation>Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.</Mitigation>
            <Mitigation>Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger.</xhtml:p>
               <xhtml:p>An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster.</xhtml:p>
            </Example>
            <Example>A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="521"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="257"/>
            <Related_Weakness CWE_ID="654"/>
            <Related_Weakness CWE_ID="307"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="309"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1110.001</Entry_ID>
               <Entry_Name>Brute Force:Password Guessing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Description, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Consequences, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="490" Name="Amplification" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1498.002</Entry_ID>
               <Entry_Name>Network Denial of Service:Reflection Amplification</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="497" Name="File Discovery" Abstraction="Standard" Status="Draft">
         <Description>An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must know the location of these common key files.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage file protection mechanisms to render these files accessible only to authorized parties.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1083</Entry_ID>
               <Entry_Name>File and Directory Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2019-09-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Resources_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="504" Name="Task Impersonation" Abstraction="Standard" Status="Stable">
         <Description>An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.</Description>
         <Extended_Description>
            <xhtml:p>When impersonating an expected task, the adversary monitors the task list maintained by the operating system and waits for a specific legitimate task to become active. Once the task is detected, the malicious application launches a new task in the foreground that mimics the user interface of the legitimate task. At this point, the user thinks that they are interacting with the legitimate task that they started, but instead they are interacting with the malicious application. Once the adversary's goal is reached, the malicious application can exit, leaving the original trusted application visible and the appearance that nothing out of the ordinary has occurred.</xhtml:p>
            <xhtml:p>A second approach entails the adversary impersonating an unexpected task, but one that may often be spawned by legitimate background processes. For example, an adversary may randomly impersonate a system credential prompt, implying that a background process requires authentication for some purpose. The user, believing they are interacting with a legitimate task, enters their credentials or authorizes the use of their stored credentials, which the adversary then leverages for nefarious purposes. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user, but may also be used to ride the user's privileges.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="173">
               <Exclude_Related Exclude_ID="403"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.</Description>
               <Technique>Determine what tasks prompt a user for their credentials.</Technique>
               <Technique>Determine what tasks may prompt a user to authorize a process to execute with elevated privileges.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.</Description>
               <Technique>Prompt a user for their credentials, while making the user believe the credential request is legitimate.</Technique>
               <Technique>Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must already have access to the target system via some means.</Prerequisite>
            <Prerequisite>A legitimate task must exist that an adversary can impersonate to glean credentials.</Prerequisite>
            <Prerequisite>The user's privileges allow them to execute certain tasks with elevated privileges.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once an adversary has gained access to the target system, impersonating a task is trivial.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Malware or some other means to initially comprise the target system.</Resource>
            <Resource>Additional malware to impersonate a legitimate task.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Credential or permission elevation prompts that appear illegitimate or unexpected.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.</Example>
            <Example>An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1021"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1036.004</Entry_ID>
               <Entry_Name>Masquerading: Masquerade Task or Service</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-434" Section="4.1.2 Man-In-The-Middle"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction, @Status, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, Resources_Required, Skills_Required, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="509" Name="Kerberoasting" Abstraction="Detailed" Status="Stable">
         <Description>Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="652"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>Scan for user accounts with set SPN values</Description>
               <Technique>These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>Request service tickets</Description>
               <Technique>Using user account's SPN value, request other service tickets from Active Directory</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>Extract ticket and save to disk</Description>
               <Technique>Certain tools like Mimikatz can extract local tickets and save them to memory/disk.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>Crack the encrypted ticket to harvest plain text credentials</Description>
               <Technique>Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary requires access as an authenticated user on the system. This attack pattern relates to elevating privileges.</Prerequisite>
            <Prerequisite>The adversary requires use of a third-party credential harvesting tool (e.g., Mimikatz).</Prerequisite>
            <Prerequisite>The adversary requires a brute force tool.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium"/>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Monitor system and domain logs for abnormal access.</Mitigation>
            <Mitigation>Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.</Mitigation>
            <Mitigation>Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.</Mitigation>
            <Mitigation>Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="309"/>
            <Related_Weakness CWE_ID="294"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="521"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1558.003</Entry_ID>
               <Entry_Name>Steal or Forge Kerberos Tickets:Kerberoasting</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-559"/>
            <Reference External_Reference_ID="REF-585"/>
            <Reference External_Reference_ID="REF-586"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2019-04-04</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated @Status, Example_Instances, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="511" Name="Infiltration of Software Development Environment" Abstraction="Detailed" Status="Draft">
         <Description>An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="513"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).</Prerequisite>
            <Prerequisite>The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.</Prerequisite>
            <Prerequisite>The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Intelligence about the manufacturer's operating environment and infrastructure.</Skill>
            <Skill Level="High">Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.</Skill>
            <Skill Level="High">Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc)</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Avoid the common delivery mechanisms of adversaries, such as email attachments, which could introduce the malware.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The attacker, knowing the victim runs email on a system adjacent to the IDE system, sends a phishing email with a malicious attachment to the victim. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent IDE system from the victim's workstation. The attacker is then able to exfiltrate sensitive data about the software being developed on the IDE system.</Example>
            <Example>Using rogue versions of Xcode (Apple's app development tool) downloaded from third-party websites, it was possible for the adversary to insert malicious code into legitimate apps during the development process.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.001</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="516" Name="Hardware Component Substitution During Baselining" Abstraction="Detailed" Status="Draft">
         <Description>An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="513"/>
               <Exclude_Related Exclude_ID="688"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary will need either physical access or be able to supply malicious hardware components to the product development facility.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Intelligence data on victim's purchasing habits.</Skill>
            <Skill Level="High">Resources to maliciously construct/alter hardware components used for testing by the supplier.</Skill>
            <Skill Level="High">Resources to physically infiltrate supplier.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.</Mitigation>
            <Mitigation>Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An adversary supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the adversary an advantage when attacking the victim in that the adversary's presence may not be detected by the device.</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
            <Reference External_Reference_ID="REF-712"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Mitigations, Prerequisites, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="520" Name="Counterfeit Hardware Component Inserted During Product Assembly" Abstraction="Detailed" Status="Draft">
         <Description>An adversary with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="513"/>
               <Exclude_Related Exclude_ID="515"/>
               <Exclude_Related Exclude_ID="688"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary will need either physical access or be able to supply malicious hardware components to the product development facility.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Resources to maliciously construct components used by the manufacturer.</Skill>
            <Skill Level="High">Resources to physically infiltrate manufacturer or manufacturer's supplier.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.</Mitigation>
            <Mitigation>Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>A manufacturer of a firewall system requires a hardware card which functions as a multi-jack ethernet card with four ethernet ports. The adversary constructs a counterfeit card that functions normally except that packets from the adversary's network are allowed to bypass firewall processing completely. Once deployed at a victim location, this allows the adversary to bypass the firewall unrestricted.</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>In 2018 it was discovered that Chinese spies infiltrated several U.S. government agencies and corporations as far back as 2015 by including a malicious microchip within the motherboard of servers sold by Elemental Technologies to the victims. Although these servers were assembled via a U.S. based company, the motherboards used within the servers were manufactured and maliciously altered via a Chinese subcontractor. Elemental Technologies then sold these malicious servers to various U.S. government agencies, such as the DoD and CIA, and corporations like Amazon and Apple. The malicious microchip provided adversaries with a backdoor into the system, which further allowed them to access any network that contained the exploited systems, to exfiltrate data to be sent to the Chinese government.[REF-713]</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
            <Reference External_Reference_ID="REF-712"/>
            <Reference External_Reference_ID="REF-713"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Mitigations, Prerequisites, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="522" Name="Malicious Hardware Component Replacement" Abstraction="Standard" Status="Draft">
         <Description>An adversary replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="439"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine Target Hardware] The adversary must first identify a system that they wish to target, and a specific hardware component that they can swap out with a malicious replacement.</Description>
               <Technique>Look for datasheets containing the system schematics that can help identify possible target hardware.</Technique>
               <Technique>Procure a system and inspect it manually, looking for possible hardware component targets. Search for manufacturer IDs on hardware chips or FCC IDs on wireless chips to determine their functionality.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.</Description>
               <Technique>Procure a system and observe the steps it takes in the shipment process.</Technique>
               <Technique>Identify possible warehouses that systems are stored after manufacturing.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Test a Malicious Component Replacement] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.</Description>
               <Technique>Design a malicious hardware component that will perform the same functionality as the target component, but also contains additional functionality.</Technique>
               <Technique>Obtain already designed malicious components that just need to be placed into the system.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Substitute Components in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary substitutes the malicious component for the targeted component. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Advanced knowledge of the design of the system.</Skill>
            <Skill Level="High">Hardware creation and manufacture of replacement components.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.</Mitigation>
            <Mitigation>Prevent or detect tampering with critical hardware or firmware components while in transit through use of state-of-the-art anti-tamper devices.</Mitigation>
            <Mitigation>Use tamper-resistant and tamper-evident packaging when shipping critical components (e.g., plastic coating for circuit boards, tamper tape, paint, sensors, and/or seals for cases and containers) and inspect received system components for evidence of tampering.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>During shipment the adversary is able to intercept a system that has been purchased by the victim, and replaces a math processor card that functions just like the original, but contains advanced malicious capability. Once deployed, the system functions as normal, but allows for the adversary to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
            <Reference External_Reference_ID="REF-712"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Execution_Flow, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="523" Name="Malicious Software Implanted" Abstraction="Standard" Status="Draft">
         <Description>An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="439">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine Entry Point] The adversary must first identify a system that they wish to target and search for an entry point they can use to install the malicious software. This could be a system which they have prior knowledge of, giving them insight into the software and environment.</Description>
               <Technique>Use a JTAGulator to identify exposed JTAG and UART interfaces in smaller embedded systems.</Technique>
               <Technique>Identify exposed USB connectors that could be used to load software.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.</Description>
               <Technique>Procure a system and observe the steps it takes in the shipment process.</Technique>
               <Technique>Identify possible warehouses that systems are stored after manufacturing.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Test Malicious Software] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.</Description>
               <Technique>Design malicious software that will give an adversary a backdoor into the system once it is deployed to the victim.</Technique>
               <Technique>Obtain already designed malicious software that just need to be placed into the system.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Implant Software in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary implants the malicious software into the system. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Advanced knowledge of the design of the system and it's operating system components and subcomponents.</Skill>
            <Skill Level="High">Malicious software creation.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Deploy strong code integrity policies to allow only authorized apps to run.</Mitigation>
            <Mitigation>Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.</Mitigation>
            <Mitigation>Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.</Mitigation>
            <Mitigation>Require SSL for update channels and implement certificate transparency based verification.</Mitigation>
            <Mitigation>Sign everything, including configuration files, XML files and packages.</Mitigation>
            <Mitigation>Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system, the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software, and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock, and is shipped and installed at the victim location with the malicious software in place, allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.002</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
            <Reference External_Reference_ID="REF-716"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Execution_Flow, Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="528" Name="XML Flood" Abstraction="Standard" Status="Draft">
         <Description>An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.</Description>
         <Extended_Description>
            <xhtml:p>XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.</xhtml:p>
         </Extended_Description>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XML Denial of Service (XML DoS)</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.</Description>
               <Technique>Use an automated tool to record all instances of URLs to process XML requests.</Technique>
               <Technique>Use a browser to manually explore the website and analyze how the application processes XML requests.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.</Description>
               <Technique>Send a large number of crafted XML messages to the target URL.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target must receive and process XML transactions.</Prerequisite>
            <Prerequisite>An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Denial of service</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.</Mitigation>
            <Mitigation>Implementation: Provide for network flow control and traffic shaping to control access to the resources.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="770"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499.002</Entry_ID>
               <Entry_Name>Endpoint Denial of Service:Service Exhaustion Flood</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1498.001</Entry_ID>
               <Entry_Name>Network Denial of Service:Direct Network Flood</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, Related_Attack_Patterns, Skills_Required, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="531" Name="Hardware Component Substitution" Abstraction="Detailed" Status="Draft">
         <Description>An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="534"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Physical access to the system or the integration facility where hardware components are kept.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Able to develop and manufacture malicious system components that perform the same functions and processes as their non-malicious counterparts.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An attacker has access to an organization's warehouse of card readers being included as a part of an overall security system. By replacing a critical hardware component in the card reader, the attacker is able to alter the function of the card reader to allow an attacker-supplied card to bypass a security checkpoint. The card reader is placed in the warehouse, and later used in the victim's security system. The attacker is then able to go to the victim and use their own card and bypass a physical security checkpoint and gain access to the victim's location for further malicious activity.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Hardware Component Substitution After Installation</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="532" Name="Altered Installed BIOS" Abstraction="Detailed" Status="Stable">
         <Description>An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"><!--&amp;amp;amp;amp;amp;amp;amp;lt;Exclude_Related Exclude_ID="514"/&amp;amp;amp;amp;amp;amp;amp;gt;--><Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Advanced knowledge about the installed target system design.</Prerequisite>
            <Prerequisite>Advanced knowledge about the download and update installation processes.</Prerequisite>
            <Prerequisite>Access to the download and update system(s) used to deliver BIOS images.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Able to develop a malicious BIOS image with the original functionality as a normal BIOS image, but with added functionality that allows for later compromise and/or disruption.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Deploy strong code integrity policies to allow only authorized apps to run.</Mitigation>
            <Mitigation>Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.</Mitigation>
            <Mitigation>Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.</Mitigation>
            <Mitigation>Require SSL for update channels and implement certificate transparency based verification.</Mitigation>
            <Mitigation>Sign update packages and BIOS patches.</Mitigation>
            <Mitigation>Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An attacker compromises the download and update portion of a manufacturer's web presence, and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website, the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system, which allows for additional compromise by the attacker.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1495</Entry_ID>
               <Entry_Name>Firmware Corruption</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1542.001</Entry_ID>
               <Entry_Name>Pre-OS Boot:System Firmware</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
            <Reference External_Reference_ID="REF-716"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Altered BIOS Installed After Installation</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="537" Name="Infiltration of Hardware Development Environment" Abstraction="Detailed" Status="Draft">
         <Description>An adversary, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).</Prerequisite>
            <Prerequisite>The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.</Prerequisite>
            <Prerequisite>The adversary must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Intelligence about the manufacturer's operating environment and infrastructure.</Skill>
            <Skill Level="High">Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.</Skill>
            <Skill Level="High">Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc)</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Verify software downloads and updates to ensure they have not been modified be adversaries</Mitigation>
            <Mitigation>Leverage antivirus tools to detect known malware</Mitigation>
            <Mitigation>Do not download software from untrusted sources</Mitigation>
            <Mitigation>Educate designers, developers, engineers, etc. on social engineering attacks to avoid downloading malicious software via attacks such as phishing attacks</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>The adversary, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the adversary to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The adversary is then able to exfiltrate and alter sensitive data on the hardware system, allowing for future compromise once the developed system is deployed at the victim location.</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
            <Reference External_Reference_ID="REF-712"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Mitigations, Prerequisites, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="538" Name="Open-Source Library Manipulation" Abstraction="Detailed" Status="Stable">
         <Description>Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="437"/><!--&amp;amp;amp;amp;amp;amp;amp;lt;Exclude_Related Exclude_ID="514"/&amp;amp;amp;amp;amp;amp;amp;gt;--><Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine the relevant open-source code project to target] The adversary will make the selection based on various criteria:<xhtml:ul>
                     <xhtml:li>The open-source code currently in use on a selected target system.</xhtml:li>
                     <xhtml:li>The depth in the dependency graph of the open source code in relationship to other code bases in use on the target system. Choosing an OSS lower in the graph decreases the probability of discovery, but also decreases the scope of its use within the target system.</xhtml:li>
                     <xhtml:li>The programming language in which the open source code is implemented. Different languages present different opportunities for using known software weaknesses.</xhtml:li>
                     <xhtml:li>The quality of processes in place to make a contribution. For instance, some contribution sites use static and dynamic analysis tools, which could increase the probability of discovery.</xhtml:li>
                     <xhtml:li>The security requirements necessary to make a contribution. For instance, is the ownership lax allowing unsigned commits or anonymous users.</xhtml:li>
                  </xhtml:ul>
               </Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Develop a plan for malicious contribution] The adversary develops a plan to contribute malicious code, taking the following into consideration:<xhtml:ul>
                     <xhtml:li>The adversary will probably avoid easy-to-find software weaknesses, especially ones that static and dynamic analysis tools are likely to discover.</xhtml:li>
                     <xhtml:li>Common coding errors or missing edge cases of the algorithm, which can be explained away as being accidental, if discovered, will be preferred by the adversary.</xhtml:li>
                     <xhtml:li>Sometimes no identity is required to make a contribution. Other options are to steal an existing identity or create one. When creating a new identity, strike a balance between too little or too much detail. Using an stolen identity could cause a notification to be sent to the actual user.</xhtml:li>
                  </xhtml:ul>
               </Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Execute the plan for malicious contribution] Write the code to be contributed based on the plan and then submit the contribution. Multiple commits, possibly using multiple identities, will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Advanced knowledge about the inclusion and specific usage of an open source code project within system being targeted for infiltration.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>An adversary with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The adversary commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met giving the adversary the ability to sniff plaintext traffic thought to be encrypted. This can provide to the adversary access to sensitive data of the victim.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.001</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Software Dependencies and Development Tools</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Description, Execution_Flow, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated @Name, Description, Example_Instances, Execution_Flow, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Execution_Flow, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2021-06-24">Open Source Libraries Altered</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="539" Name="ASIC With Malicious Functionality" Abstraction="Detailed" Status="Draft">
         <Description>An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must have working knowledge of some if not all of the components involved in the target system as well as the infrastructure and development environment of the manufacturer.</Prerequisite>
            <Prerequisite>Advanced knowledge about the ASIC installed within the target system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Able to develop and manufacture malicious subroutines for an ASIC environment without degradation of existing functions and processes.</Skill>
         </Skills_Required>
         <Example_Instances>
            <Example>A hardware manufacturer periodically updates its ASIC with new features. The attacker, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for ASIC design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent ASIC development system. The attacker is then able to exfiltrate and alter sensitive data on the ASIC system, allowing for future compromise once a new AISC is deployed at the victim location.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="541" Name="Application Fingerprinting" Abstraction="Standard" Status="Draft">
         <Description>An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="224"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="204"/>
            <Related_Weakness CWE_ID="205"/>
            <Related_Weakness CWE_ID="208"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1592.002</Entry_ID>
               <Entry_Name>Gather Victim Host Information: Software</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="542" Name="Targeted Malware" Abstraction="Standard" Status="Draft">
         <Description>An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="549"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="662"/>
         </Related_Attack_Patterns>
         <Indicators>
            <Indicator>Software being run on a system matches a file signature found in a malware database</Indicator>
            <Indicator>A suspicious module is loaded that is not regularly loaded by a system</Indicator>
            <Indicator>Software on a system is making calls to "GetProcAddress()" which is a commonly used function to implement dynamic API resolution</Indicator>
         </Indicators>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1587.001</Entry_ID>
               <Entry_Name>Develop Capabilities: Malware</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027</Entry_ID>
               <Entry_Name>Obfuscated Files or Information</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Other">Adversaries often utilize obfuscation techniques when developing malware with the purpose of either avoiding detection or prevent the target from reverse engineering and understanding a captured malware sample. Some of these techniques include, but are not limited to, binary padding, software packing, stripping symbols and strings from a payload, and utilizing dynamic API resolution.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Indicators, Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="543" Name="Counterfeit Websites" Abstraction="Detailed" Status="Draft">
         <Description>Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="194">
               <Exclude_Related Exclude_ID="513"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="89"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1036.005</Entry_ID>
               <Entry_Name>Masquerading: Match Legitimate Name or Location</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="545" Name="Pull Data from System Resources" Abstraction="Standard" Status="Draft">
         <Description>An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="116">
               <Exclude_Related Exclude_ID="514"/>
               <Exclude_Related Exclude_ID="437"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1239"/>
            <Related_Weakness CWE_ID="1243"/>
            <Related_Weakness CWE_ID="1258"/>
            <Related_Weakness CWE_ID="1266"/>
            <Related_Weakness CWE_ID="1272"/>
            <Related_Weakness CWE_ID="1278"/>
            <Related_Weakness CWE_ID="1323"/>
            <Related_Weakness CWE_ID="1258"/>
            <Related_Weakness CWE_ID="1330"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1005</Entry_ID>
               <Entry_Name>Data from Local System</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1555.001</Entry_ID>
               <Entry_Name>Credentials from Password Stores:Keychain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-11-09">Probe Application Queries</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="55" Name="Rainbow Table Password Cracking" Abstraction="Detailed" Status="Draft">
         <Description>An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.</Description>
         <Extended_Description>
            <xhtml:p>A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table. Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="49"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="600"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="560"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="561"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="653"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine application's/system's password policy] Determine the password policies of the target application/system.</Description>
               <Technique>Determine minimum and maximum allowed password lengths.</Technique>
               <Technique>Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).</Technique>
               <Technique>Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.</Description>
               <Technique>Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.)</Technique>
               <Technique>Obtain password hashes from platform-specific storage locations (e.g. Windows registry)</Technique>
               <Technique>Sniff network packets containing password hashes.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.</Description>
               <Technique>Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.</Prerequisite>
            <Prerequisite>Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).</Prerequisite>
            <Prerequisite>The system uses one factor password based authentication.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="261"/>
            <Related_Weakness CWE_ID="521"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="654"/>
            <Related_Weakness CWE_ID="916"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="309"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1110.002</Entry_ID>
               <Entry_Name>Brute Force:Password Cracking</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Description, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated @Abstraction, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="550" Name="Install New Service" Abstraction="Detailed" Status="Draft">
         <Description>When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Limit privileges of user accounts so new service creation can only be performed by authorized administrators.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1543</Entry_ID>
               <Entry_Name>Create or Modify System Process</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="551" Name="Modify Existing Service" Abstraction="Detailed" Status="Draft">
         <Description>When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
            <Related_Weakness CWE_ID="522"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1543</Entry_ID>
               <Entry_Name>Create or Modify System Process</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="552" Name="Install Rootkit " Abstraction="Detailed" Status="Draft">
         <Description>An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Prevent adversary access to privileged accounts necessary to install rootkits.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.</Example>
            <Example>Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1014</Entry_ID>
               <Entry_Name>Rootkit</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1542.003</Entry_ID>
               <Entry_Name>Pre-OS Boot:Bootkit</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1547.006</Entry_ID>
               <Entry_Name>Boot or Logon Autostart Execution:Kernel Modules and Extensions</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="555" Name="Remote Services with Stolen Credentials" Abstraction="Standard" Status="Stable">
         <Description>This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.</Description>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="560">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.</Example>
            <Example>Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="309"/>
            <Related_Weakness CWE_ID="294"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="521"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1021</Entry_ID>
               <Entry_Name>Remote Services</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1114.002</Entry_ID>
               <Entry_Name>Email Collection:Remote Email Collection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1133</Entry_ID>
               <Entry_Name>External Remote Services</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, Examples-Instances, References, Related_Weaknesses, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="556" Name="Replace File Extension Handlers" Abstraction="Detailed" Status="Draft">
         <Description>When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1546.001</Entry_ID>
               <Entry_Name>Event Triggered Execution:Change Default File Association</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="558" Name="Replace Trusted Executable" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Example_Instances>
            <Example>Specific versions of Windows contain accessibility features that may be launched with a key combination before a user has logged in (for example when they are on the Windows Logon screen). On Windows XP and Windows Server 2003/R2, the program (e.g. "C:\Windows\System32\utilman.exe") may be replaced with cmd.exe (or another program that provides backdoor access). Then pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over RDP will cause the replaced file to be executed with SYSTEM privileges.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1505.005</Entry_ID>
               <Entry_Name>Server Software Component: Terminal Services DLL</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1546.008</Entry_ID>
               <Entry_Name>Event Triggered Execution: Accessibility Features</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Description Summary, References, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="560" Name="Use of Known Domain Credentials" Abstraction="Meta" Status="Stable">
         <Description>
            <xhtml:p>An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>Attacks leveraging trusted credentials typically result in the adversary laterally moving within the local network, since users are often allowed to login to systems/applications within the network using the same password. This further allows the adversary to obtain sensitive data, download/install malware on the system, pose as a legitimate user for social engineering purposes, and more.</xhtml:p>
            <xhtml:p>Attacks on known passwords generally rely on the primary fact that users often reuse the same username/password combination for a variety of systems, applications, and services, coupled with poor password policies on the target system or application. Adversaries can also utilize known passwords to target Single Sign On (SSO) or cloud-based applications and services, which often don't verify the authenticity of the user's input. Known credentials are usually obtained by an adversary via a system/application breach and/or by purchasing dumps of credentials on the dark web. These credentials may be further gleaned via exposed configuration and properties files that contain system passwords, database connection strings, and other sensitive data.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.</Description>
               <Technique>An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.</Technique>
               <Technique>An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.</Technique>
               <Technique>An adversary conducts a sniffing attack to steal credentials as they are transmitted.</Technique>
               <Technique>An adversary gains access to a database and exfiltrates password hashes.</Technique>
               <Technique>An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.</Description>
               <Technique>Determine minimum and maximum allowed password lengths.</Technique>
               <Technique>Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).</Technique>
               <Technique>Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt authentication] Try each credential until the target grants access.</Description>
               <Technique>Manually or automatically enter each credential through the target's interface.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>6</Step>
               <Phase>Exploit</Phase>
               <Description>[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.</Prerequisite>
            <Prerequisite>The system/application does not have a sound password policy that is being enforced.</Prerequisite>
            <Prerequisite>The system/application does not implement an effective password throttling mechanism.</Prerequisite>
            <Prerequisite>The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once an adversary obtains a known credential, leveraging it is trivial.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A list of known credentials.</Resource>
            <Resource>A custom script that leverages the credential list to launch an attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Authentication attempts use credentials that have been used previously by the account in question.</Indicator>
            <Indicator>Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.</Indicator>
            <Indicator>Data is being transferred and/or removed from systems/applications within the network.</Indicator>
            <Indicator>Suspicious or Malicious software is downloaded/installed on systems within the domain.</Indicator>
            <Indicator>Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Authorization</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.</Mitigation>
            <Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation>
            <Mitigation>Ensure users are not reusing username/password combinations for multiple systems, applications, or services.</Mitigation>
            <Mitigation>Do not reuse local administrator account credentials across systems.</Mitigation>
            <Mitigation>Deny remote use of local admin credentials to log into domain systems.</Mitigation>
            <Mitigation>Do not allow accounts to be a local administrator on more than one system.</Mitigation>
            <Mitigation>Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.</Mitigation>
            <Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Throughout 2015 and 2016, APT28 — also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM — leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]</Example>
            <Example>In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows’ Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
            <Related_Weakness CWE_ID="307"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="309"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="654"/>
            <Related_Weakness CWE_ID="1273"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1078</Entry_ID>
               <Entry_Name>Valid Accounts</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-570"/>
            <Reference External_Reference_ID="REF-571"/>
            <Reference External_Reference_ID="REF-572"/>
            <Reference External_Reference_ID="REF-573"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction, @Status, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Extended_Description, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="561" Name="Windows Admin Shares with Stolen Credentials" Abstraction="Detailed" Status="Draft">
         <Description>An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.</Description>
         <Extended_Description>
            <xhtml:p>Windows systems within the Windows NT family contain hidden network shares that are only accessible to system administrators. These shares allow administrators to remotely access all disk volumes on a network-connected system and further allow for files to be copied, written, and executed, along with other administrative actions. Example network shares include: C$, ADMIN$ and IPC$. If an adversary is able to obtain legitimate Windows credentials, the hidden shares can be accessed remotely, via server message block (SMB) or the Net utility, to transfer files and execute code. It is also possible for adversaries to utilize NTLM hashes to access administrator shares on systems with certain configuration and patch levels.</xhtml:p>
         </Extended_Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="653"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="165"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="549"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="545"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Acquire known Windows administrator credentials] The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.</Description>
               <Technique>An adversary purchases breached Windows administrator credentials from the dark web.</Technique>
               <Technique>An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided.</Technique>
               <Technique>An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted.</Technique>
               <Technique>An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes.</Technique>
               <Technique>An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt domain authentication] Try each Windows administrator credential against the hidden network shares until the target grants access.</Description>
               <Technique>Manually or automatically enter each administrator credential through the target's interface.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Malware Execution] An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Data Exfiltration] The adversary can remotely obtain sensitive data contained within the administrative network shares.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system/application is connected to the Windows domain.</Prerequisite>
            <Prerequisite>The target administrative share allows remote use of local admin credentials to log into domain systems.</Prerequisite>
            <Prerequisite>The adversary possesses a list of known Windows administrator credentials that exist on the target domain.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once an adversary obtains a known Windows credential, leveraging it is trivial.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A list of known Windows administrator credentials for the targeted domain.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Data is being transferred and/or removed from administrative network shares.</Indicator>
            <Indicator>Suspicious or Malicious software is executed within administrative network shares.</Indicator>
            <Indicator>Suspicious or Malicious software is downloaded/installed on systems within the domain.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Authorization</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Do not reuse local administrator account credentials across systems.</Mitigation>
            <Mitigation>Deny remote use of local admin credentials to log into domain systems.</Mitigation>
            <Mitigation>Do not allow accounts to be a local administrator on more than one system.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]</Example>
            <Example>In May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="309"/>
            <Related_Weakness CWE_ID="294"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="521"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1021.002</Entry_ID>
               <Entry_Name>Remote Services:SMB/Windows Admin Shares</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-577"/>
            <Reference External_Reference_ID="REF-578"/>
            <Reference External_Reference_ID="REF-579"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="562" Name="Modify Shared File" Abstraction="Detailed" Status="Draft">
         <Description>An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1080</Entry_ID>
               <Entry_Name>Taint shared content</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="564" Name="Run Software at Logon" Abstraction="Detailed" Status="Draft">
         <Description>Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Restrict write access to logon scripts to necessary administrators.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1037</Entry_ID>
               <Entry_Name>Boot or Logon Initialization Scripts</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1543.001</Entry_ID>
               <Entry_Name>Create or Modify System Process: Launch Agent</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1543.004</Entry_ID>
               <Entry_Name>Create or Modify System Process: Launch Daemon</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1547</Entry_ID>
               <Entry_Name>Boot or Logon Autostart Execution</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="565" Name="Password Spraying" Abstraction="Detailed" Status="Draft">
         <Description>
            <xhtml:p>In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>Password Spraying attacks often target management services over commonly used ports such as SSH, FTP, Telnet, LDAP, Kerberos, MySQL, and more. Additional targets include Single Sign-On (SSO) or cloud-based applications/services that utilize federated authentication protocols, and externally facing applications. Successful execution of Password Spraying attacks usually lead to lateral movement within the target, which allows the adversary to impersonate the victim or execute any action that the victim is authorized to perform. If the password chosen by the user is commonly used or easily guessed, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.</xhtml:p>
            <xhtml:p>Password Spraying Attacks are similar to Dictionary-based Password Attacks (CAPEC-16) in that they both leverage precompiled lists (i.e. dictionaries) of username/password combinations to try against a system/application. The primary difference is that Password Spraying Attacks leverage a known list of user accounts and only try one password for each account before moving onto the next password. In contrast, Dictionary-based Password Attacks leverage unknown username/password combinations and are often executed offline against files containing hashed credentials, where inducing an account lockout is not a concern.</xhtml:p>
            <xhtml:p>Password Spraying Attacks are also similar to Credential Stuffing attacks (CAPEC-600), since both utilize known user accounts and often attack the same targets. Credential Stuffing attacks, however, leverage known username/password combinations, whereas Password Spraying attacks have no insight into known username/password pairs. If a Password Spraying attack succeeds, it may additionally lead to Credential Stuffing attacks on different targets.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="49"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="600"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="560"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="561"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="653"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target's password policy] Determine the password policies of the target system/application.</Description>
               <Technique>Determine minimum and maximum allowed password lengths.</Technique>
               <Technique>Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).</Technique>
               <Technique>Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Select passwords] Pick the passwords to be used in the attack (e.g. commonly used passwords, passwords tailored to individual users, etc.)</Description>
               <Technique>Select passwords based on common use or a particular user's additional details.</Technique>
               <Technique>Select passwords based on the target's password complexity policies.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Brute force password] Given the finite space of possible passwords dictated by information determined in the previous steps, try each password for all known user accounts until the target grants access.</Description>
               <Technique>Manually or automatically enter the first password for each known user account through the target's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.</Technique>
               <Technique>Iterate through the remaining passwords for each known user account.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system/application uses one factor password based authentication.</Prerequisite>
            <Prerequisite>The system/application does not have a sound password policy that is being enforced.</Prerequisite>
            <Prerequisite>The system/application does not implement an effective password throttling mechanism.</Prerequisite>
            <Prerequisite>The adversary possesses a list of known user accounts on the target system/application.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A machine with sufficient resources for the job (e.g. CPU, RAM, HD).</Resource>
            <Resource>Applicable password lists.</Resource>
            <Resource>A password cracking tool or a custom script that leverages the password list to launch the attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.</Indicator>
            <Indicator>The login attempts use passwords that have been used previously by the user account in question.</Indicator>
            <Indicator>Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Authorization</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation>
            <Mitigation>Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.</Mitigation>
            <Mitigation>Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A user selects the phrase "Password123" as their password, believing that it would be very difficult to guess. Password Spraying, leveraging a list of commonly used passwords, is used to crack this password and gain access to the account.</Example>
            <Example>The Iranian hacker group APT33 (AKA Holmium, Refined Kitten, or Elfin) carried out numerous Password Spraying attacks in 2019. On average, APT33 targeted 2,000 organizations per month, with upwards of 10 million authentication attempts each day. The majority of these attacks targeted manufacturers, suppliers, or maintainers of industrial control system equipment.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="521"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="654"/>
            <Related_Weakness CWE_ID="307"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="309"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1110.003</Entry_ID>
               <Entry_Name>Brute Force:Password Spraying</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-565"/>
            <Reference External_Reference_ID="REF-566"/>
            <Reference External_Reference_ID="REF-567"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2020-07-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="568" Name="Capture Credentials via Keylogger" Abstraction="Detailed" Status="Draft">
         <Description>An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="569"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="600"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="560"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="561"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="653"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine which user's credentials to capture] Since this is a more targeted attack, an adversary will first identify a particular user they wish the capture the credentials of.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Deploy keylogger] Once a user is identified, an adversary will deploy a keylogger to the user's system in one of many ways.</Description>
               <Technique>Send a phishing email with a malicious attachment that installs a keylogger on a user's system</Technique>
               <Technique>Conceal a keylogger behind fake software and get the user to download the software</Technique>
               <Technique>Get a user to click on a malicious URL that directs them to a webpage that will install a keylogger without their knowledge</Technique>
               <Technique>Gain access to the user's system through a vulnerability and manually install a keylogger</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Record keystrokes] Once the keylogger is deployed on the user's system, the adversary will record keystrokes over a period of time.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>[Analyze data and determine credentials] Using the captured keystrokes, the adversary will be able to determine the credentials of the user.</Description>
               <Technique>Search for repeated sequences that are following by the enter key</Technique>
               <Technique>Search for repeated sequences that are not found in a dictionary</Technique>
               <Technique>Search for several backspaces in a row. This could indicate a mistyped password. The correct password can then be inferred using the whole key sequence</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Use found credentials] After the adversary has found the credentials for the target user, they will then use them to gain access to a system in order to perform some follow-up attack</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The ability to install the keylogger, either in person or remote.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Strong physical security can help reduce the ability of an adversary to install a keylogger.</Mitigation>
         </Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1056.001</Entry_ID>
               <Entry_Name>Input Capture:Keylogging</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="569" Name="Collect Data as Provided by Users" Abstraction="Standard" Status="Draft">
         <Description>An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="116">
               <Exclude_Related Exclude_ID="437"/>
               <Exclude_Related Exclude_ID="514"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1056</Entry_ID>
               <Entry_Name>Input Capture</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="57" Name="Utilizing REST's Trust in the System Resource to Obtain Sensitive Data" Abstraction="Detailed" Status="Draft">
         <Description>This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.</Description>
         <Extended_Description>
            <xhtml:p>Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required.</xhtml:p>
            <xhtml:p>Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The adversary can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated. Once the adversary gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Find a REST-style application that uses SSL] The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Insert a listener to sniff client-server communication] The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.</Description>
               <Technique>Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Gather information passed in the clear] If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Opportunity to intercept must exist beyond the point where SSL is terminated.</Prerequisite>
            <Prerequisite>The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">To insert a network sniffer or other listener into the communication stream</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Implement message level security such as HMAC in the HTTP communication</Mitigation>
            <Mitigation>Design: Utilize defense in depth, do not rely on a single security mechanism like SSL</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="300"/>
            <Related_Weakness CWE_ID="287"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1040</Entry_ID>
               <Entry_Name>Network Sniffing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Name, Description, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Extended_Description, Prerequisites</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2019-09-30">Utilizing REST's Trust in the System Resource to Register Man in the Middle</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="571" Name="Block Logging to Central Repository" Abstraction="Standard" Status="Draft">
         <Description>
            <xhtml:p>An adversary prevents host-generated logs being delivered to a central location in an attempt to hide indicators of compromise.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>In the case of network based reporting of indicators, an adversary may block traffic associated with reporting to prevent central station analysis. This may be accomplished by many means such as stopping a local process to creating a host-based firewall rule to block traffic to a specific server.</xhtml:p>
            <xhtml:p>In the case of local based reporting of indicators, an adversary may block delivery of locally-generated log files themselves to the central repository.</xhtml:p>
         </Extended_Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="161">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.002</Entry_ID>
               <Entry_Name>Impair Defenses: Disable Windows Event Logging</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.002</Entry_ID>
               <Entry_Name>Impair Defenses: Impair Command History Logging</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.006</Entry_ID>
               <Entry_Name>Impair Defenses: Indicator Blocking</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.008</Entry_ID>
               <Entry_Name>Impair Defenses: Disable Cloud Logs</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="572" Name="Artificially Inflate File Sizes" Abstraction="Standard" Status="Draft">
         <Description>
            <xhtml:p>An adversary modifies file contents by adding data to files for several reasons. Many different attacks could “follow” this pattern resulting in numerous outcomes. Adding data to a file could also result in a Denial of Service condition for devices with limited storage capacity.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="165"><!--&amp;amp;amp;amp;amp;amp;amp;lt;Exclude_Related Exclude_ID="512"/&amp;amp;amp;amp;amp;amp;amp;gt; &amp;amp;amp;amp;amp;amp;amp;lt;Exclude_Related Exclude_ID="515"/&amp;amp;amp;amp;amp;amp;amp;gt;--></Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
               <Note>Denial of Service</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>
               <xhtml:p>An adversary could potentially increase file sizes on devices containing limited storage resources, such as SCADA or IOT devices, resulting in denial of service conditions.</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027.001</Entry_ID>
               <Entry_Name>Obfuscated Files or Information:Binary Padding</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Consequences, Description, Example_Instances, Likelihood_Of_Attack, Taxonomy_Mappings, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="573" Name="Process Footprinting" Abstraction="Standard" Status="Stable">
         <Description>An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>On a Windows system, the command, "tasklist," displays information about processes. The same function on a Mac OS system is done with the command, "ps."</Example>
            <Example>In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1057</Entry_ID>
               <Entry_Name>Process Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="574" Name="Services Footprinting" Abstraction="Standard" Status="Stable">
         <Description>An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include "sc" and "tasklist/svc" using Tasklist, and "net start" using Net.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1007</Entry_ID>
               <Entry_Name>System Service Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="575" Name="Account Footprinting" Abstraction="Standard" Status="Stable">
         <Description>An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: "net user" and "dsquery".</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1087</Entry_ID>
               <Entry_Name>Account Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="576" Name="Group Permission Footprinting" Abstraction="Standard" Status="Stable">
         <Description>An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is "net localgroup".</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify programs (such as "net") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1069</Entry_ID>
               <Entry_Name>Permission Groups Discovery</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1615</Entry_ID>
               <Entry_Name>Group Policy Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="577" Name="Owner Footprinting" Abstraction="Standard" Status="Draft">
         <Description>An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is "dir /A ntuser.dat". Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.</Prerequisite>
            <Prerequisite>Administrator permissions are required to view the home folder of other users.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure that proper permissions on files and folders are enacted to limit accessibility.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1033</Entry_ID>
               <Entry_Name>System Owner/User Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="578" Name="Disable Security Software" Abstraction="Standard" Status="Usable">
         <Description>An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="176">
               <Exclude_Related Exclude_ID="437"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have the capability to interact with the configuration of the targeted system.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Hide Activities</Impact>
               <Note>By disabling certain security tools, the adversary can hide malicious activity and avoid detection.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="284"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1556.006</Entry_ID>
               <Entry_Name>Modify Authentication Process: Multi-Factor Authentication</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.001</Entry_ID>
               <Entry_Name>Impair Defenses: Disable or Modify Tools</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.002</Entry_ID>
               <Entry_Name>Impair Defenses: Disable Windows Event Logging</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.004</Entry_ID>
               <Entry_Name>Impair Defenses: Disable or Modify System Firewall</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.007</Entry_ID>
               <Entry_Name>Impair Defenses: Disable or Modify Cloud Firewall</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.008</Entry_ID>
               <Entry_Name>Impair Defenses: Disable Cloud Logs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1562.009</Entry_ID>
               <Entry_Name>Impair Defenses: Safe Mode Boot</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="579" Name="Replace Winlogon Helper DLL" Abstraction="Detailed" Status="Draft">
         <Description>Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Changes to registry entries in "HKLM\Software\Microsoft\Windows NT\Winlogon\Notify" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="15"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1547.004</Entry_ID>
               <Entry_Name>Boot or Logon Autostart Execution: Winlogon helper DLL</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="580" Name="System Footprinting" Abstraction="Standard" Status="Stable">
         <Description>An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have logical access to the target network and system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary needs to know basic linux commands.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation>
            <Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="204"/>
            <Related_Weakness CWE_ID="205"/>
            <Related_Weakness CWE_ID="208"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1082</Entry_ID>
               <Entry_Name>System Information Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated @Name, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2020-12-17">Application Footprinting</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="581" Name="Security Software Footprinting" Abstraction="Detailed" Status="Draft">
         <Description>Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.</Description>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="580"/>
         </Related_Attack_Patterns>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation>
         </Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1518.001</Entry_ID>
               <Entry_Name>Software Discovery:Security Software Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="593" Name="Session Hijacking" Abstraction="Standard" Status="Stable">
         <Description>This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="21"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Discover Existing Session Token] Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Insert Found Session Token] The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An application that leverages sessions to perform authentication.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary must have the ability to communicate with the application over the network.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>A successful attack can enable an adversary to gain unauthorized access to an application.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1185</Entry_ID>
               <Entry_Name>Browser Session Hijacking</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1550.001</Entry_ID>
               <Entry_Name>Use Alternate Authentication Material:Application Access Token</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1563</Entry_ID>
               <Entry_Name>Remote Service Session Hijacking</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <Entry_Name>Session hijacking attack</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-603" Section="Testing for Session Hijacking"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2017-04-15</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Description, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="60" Name="Reusing Session IDs (aka Session Replay)" Abstraction="Detailed" Status="Draft">
         <Description>This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="593"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>The attacker interacts with the target host and finds that session IDs are used to authenticate users.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>The attacker steals a session ID from a valid user.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The target host uses session IDs to keep track of the users.</Prerequisite>
            <Prerequisite>Session IDs are used to control access to resources.</Prerequisite>
            <Prerequisite>The session IDs used by the target host are not well protected from session theft.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID.</Skill>
            <Skill Level="Medium">More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Always invalidate a session ID after the user logout.</Mitigation>
            <Mitigation>Setup a session time out for the session IDs.</Mitigation>
            <Mitigation>Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).</Mitigation>
            <Mitigation>Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.</Mitigation>
            <Mitigation>Encrypt the session data associated with the session ID.</Mitigation>
            <Mitigation>Use multifactor authentication.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428</Example>
            <Example>Merak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="294"/>
            <Related_Weakness CWE_ID="290"/>
            <Related_Weakness CWE_ID="346"/>
            <Related_Weakness CWE_ID="384"/>
            <Related_Weakness CWE_ID="488"/>
            <Related_Weakness CWE_ID="539"/>
            <Related_Weakness CWE_ID="200"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="664"/>
            <Related_Weakness CWE_ID="732"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1134.001</Entry_ID>
               <Entry_Name>Access Token Manipulation:Token Impersonation/Theft</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1550.004</Entry_ID>
               <Entry_Name>Use Alternate Authentication Material:Web Session Cookie</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-1"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Skills_Required, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Mitigations, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="600" Name="Credential Stuffing" Abstraction="Standard" Status="Stable">
         <Description>
            <xhtml:p>An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>Attacks of this kind often target management services over commonly used ports such as SSH, FTP, Telnet, LDAP, Kerberos, MySQL, and more. Additional targets include Single Sign-On (SSO) or cloud-based applications/services that utilize federated authentication protocols, and externally facing applications.</xhtml:p>
            <xhtml:p>The primary goal of Credential Stuffing is to achieve lateral movement and gain authenticated access to additional systems, applications, and/or services. A successfully executed Credential Stuffing attack could result in the adversary impersonating the victim or executing any action that the victim is authorized to perform.</xhtml:p>
            <xhtml:p>Although not technically a brute force attack, Credential Stuffing attacks can function as such if an adversary possess multiple known passwords for the same user account. This may occur in the event where an adversary obtains user credentials from multiple sources or if the adversary obtains a user's password history for an account.</xhtml:p>
            <xhtml:p>Credential Stuffing attacks are similar to Password Spraying attacks (CAPEC-565) regarding their targets and their overall goals. However, Password Spraying attacks do not have any insight into known username/password combinations and instead leverage common or expected passwords. This also means that Password Spraying attacks must avoid inducing account lockouts, which is generally not a worry of Credential Stuffing attacks. Password Spraying attacks may additionally lead to Credential Stuffing attacks, once a successful username/password combination is discovered.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="560">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="653"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.</Description>
               <Technique>An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.</Technique>
               <Technique>An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.</Technique>
               <Technique>An adversary conducts a sniffing attack to steal credentials as they are transmitted.</Technique>
               <Technique>An adversary gains access to a database and exfiltrates password hashes.</Technique>
               <Technique>An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.</Description>
               <Technique>Determine minimum and maximum allowed password lengths.</Technique>
               <Technique>Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).</Technique>
               <Technique>Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt authentication] Try each username/password combination until the target grants access.</Description>
               <Technique>Manually or automatically enter each username/password combination through the target's interface.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.</Prerequisite>
            <Prerequisite>The system/application does not have a sound password policy that is being enforced.</Prerequisite>
            <Prerequisite>The system/application does not implement an effective password throttling mechanism.</Prerequisite>
            <Prerequisite>The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">A Credential Stuffing attack is very straightforward.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A machine with sufficient resources for the job (e.g. CPU, RAM, HD).</Resource>
            <Resource>A known list of username/password combinations.</Resource>
            <Resource>A custom script that leverages the credential list to launch the attack.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.</Indicator>
            <Indicator>The login attempts use passwords that have been used previously by the user account in question.</Indicator>
            <Indicator>Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Authorization</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.</Mitigation>
            <Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation>
            <Mitigation>Ensure users are not reusing username/password combinations for multiple systems, applications, or services.</Mitigation>
            <Mitigation>Do not reuse local administrator account credentials across systems.</Mitigation>
            <Mitigation>Deny remote use of local admin credentials to log into domain systems.</Mitigation>
            <Mitigation>Do not allow accounts to be a local administrator on more than one system.</Mitigation>
            <Mitigation>Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.</Mitigation>
            <Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A user leverages the password "Password123" for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.</Example>
            <Example>In October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
            <Related_Weakness CWE_ID="307"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="309"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="654"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1110.004</Entry_ID>
               <Entry_Name>Brute Force:Credential Stuffing</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <Entry_Name>Credential stuffing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-567"/>
            <Reference External_Reference_ID="REF-568"/>
            <Reference External_Reference_ID="REF-569"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2020-07-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="609" Name="Cellular Traffic Intercept" Abstraction="Detailed" Status="Draft">
         <Description>Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.</Description>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157">
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>None</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Adversaries can purchase hardware and software solutions, or create their own solutions, to capture/intercept cellular radio traffic. The cost of a basic Base Transceiver Station (BTS) to broadcast to local mobile cellular radios in mobile devices has dropped to very affordable costs. The ability of commercial cellular providers to monitor for "rogue" BTS stations is poor in many areas and it is assumed that "rogue" BTS stations exist in urban areas.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>Capture all cellular and RF traffic from mobile and retransmission devices. Move bulk traffic capture to storage area for cryptanalysis of encrypted traffic, and telemetry analysis of non-encrypted data. (packet headers, cellular power data, signal strength, etc.)</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="311"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1111</Entry_ID>
               <Entry_Name>Multi-Factor Authentication Interception</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Skills_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="616" Name="Establish Rogue Location" Abstraction="Standard" Status="Stable">
         <Description>An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="154"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="691"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>A resource is expected to available to the user.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Adversaries can often purchase low-cost technology to implement rogue access points.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Other</Impact>
               <Note>Successful attacks of this nature can result in a wide variety of consequences and negatively impact confidentiality and integrity based on the adversary's subsequent actions.</Note>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1036.005</Entry_ID>
               <Entry_Name>Masquerading: Match Legitimate Name or Location</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-05-01</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Typical_Likelihood_of_Exploit</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-05-01">Patiently Waiting at Incorrect Location</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="620" Name="Drop Encryption Level" Abstraction="Standard" Status="Draft">
         <Description>An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="212">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="757"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1600</Entry_ID>
               <Entry_Name>Weaken Encryption</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2015-11-09</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attack_Motivation-Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="633" Name="Token Impersonation" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="194">
               <Exclude_Related Exclude_ID="403"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>This pattern of attack is only applicable when a downstream user leverages tokens to verify identity, and then takes action based on that identity.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Note>By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Gain Privileges</Impact>
               <Note>By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Faking the source of data or services can be used to create a false trail in logs as the target will associated any actions with the impersonated identity instead of the adversary.</Note>
            </Consequence>
         </Consequences>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
            <Related_Weakness CWE_ID="1270"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1134</Entry_ID>
               <Entry_Name>Access Token Manipulation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-04-12</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="634" Name="Probe Audio and Video Peripherals" Abstraction="Detailed" Status="Stable">
         <Description>The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="651">
               <Exclude_Related Exclude_ID="514"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="545"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">To deploy a hidden process or malware on the system to automatically collect audio and video data.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Prevent unknown code from executing on a system through the use of an allowlist policy.</Mitigation>
            <Mitigation>Patch installed applications as soon as new updates become available.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary can capture audio and video, and transmit the recordings to a C2 server or a similar capability.</Example>
            <Example>An adversary can capture and record from audio peripherals in a vehicle via a Car Whisperer attack. If an adversary is within close proximity to a vehicle with Bluetooth capabilities, they may attempt to connect to the hands-free system when it is in pairing mode. With successful authentication, if an authentication system is present at all, an adversary may be able to play music/voice recordings, as well begin a recording and capture conversations happening inside the vehicle. Successful authentication relies on the pairing security key being set to a default value, or by brute force (which may be less practical in an outside environment) Depending on the sensitivity of the information being discussed, this scenario can be extremely compromising.</Example>
            <Example>An adversary may also use a technique called Bluebugging, which is similar to Bluesnarfing but requires the adversary to be between 10-15 meters of the target device. Bluebugging creates a backdoor for an attacker to listen/record phone calls, forward calls, send SMS and retrieve the phonebook.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="267"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1123</Entry_ID>
               <Entry_Name>Audio Capture</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1125</Entry_ID>
               <Entry_Name>Video Capture</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-653"/>
            <Reference External_Reference_ID="REF-654"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Example_Instances, References</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="635" Name="Alternative Execution Due to Deceptive Filenames" Abstraction="Standard" Status="Draft">
         <Description>The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="165"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The use of the file must be controlled by the file extension.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="162"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1036.007</Entry_ID>
               <Entry_Name>Masquerading: Double File Extension</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="636" Name="Hiding Malicious Data or Code within Files" Abstraction="Standard" Status="Draft">
         <Description>Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="165"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The operating system must support a file system that allows for alternate data storage for a file.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="506"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1001.002</Entry_ID>
               <Entry_Name>Data Obfuscation: Steganography</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027.003</Entry_ID>
               <Entry_Name>Obfuscated Files or Information: Steganography</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027.004</Entry_ID>
               <Entry_Name>Obfuscated Files or Information: Compile After Delivery</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1218.001</Entry_ID>
               <Entry_Name>Signed Binary Proxy Execution: Compiled HTML File</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1221</Entry_ID>
               <Entry_Name>Template Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-493"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="637" Name="Collect Data from Clipboard" Abstraction="Detailed" Status="Stable">
         <Description>The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150">
               <Exclude_Related Exclude_ID="514"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Find an application that allows copying sensititve data to clipboad] An adversary first needs to find an application that allows copying and pasting of sensitive information. This could be an application that prints out temporary passwords to the screen, private email addresses, or any other sensitive information or data</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Target users of the application] An adversary will target users of the application in order to obtain the information in their clipboard on a periodic basic</Description>
               <Technique>Install malware on a user's system designed to log clipboard contents periodically</Technique>
               <Technique>Get the user to click on a malicious link that will bring them to an application to log the contents of the clipboard</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Follow-up attack] Use any sensitive information found to carry out a follow-up attack</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">To deploy a hidden process or malware on the system to automatically collect clipboard data.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.</Mitigation>
            <Mitigation>Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="267"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1115</Entry_ID>
               <Entry_Name>Clipboard Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Description, Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="638" Name="Altered Component Firmware" Abstraction="Detailed" Status="Stable">
         <Description>An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="452"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Select Target] The adversary searches for a suitable target to attack, such as government and/or private industry organizations.</Description>
               <Technique>Conduct reconnaissance to determine potential targets to exploit.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Identify Components] After selecting a target, the adversary determines whether a vulnerable component, such as a specific make and model of a HDD, is contained within the target system.</Description>
               <Technique>[Remote Access Vector] The adversary gains remote access to the target, typically via additional malware, and explores the system to determine hardware components that are being leveraged.</Technique>
               <Technique>[Physical Access Vector] The adversary intercepts components in transit and determines if the component is vulnerable to attack.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Optional: Create Payload] If not using an already existing payload, the adversary creates their own to be executed at defined intervals and upon system boot processes. This payload may then be tested on the target system or a test system to confirm its functionality.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Insert Firmware Altering Malware] Once a vulnerable component has been identified, the adversary leverages known malware tools to infect the component's firmware and drop the payload within the component's MBR. This allows the adversary to maintain persistence on the target and execute the payload without being detected.</Description>
               <Technique>The adversary inserts the firmware altering malware on the target component, via the use of known malware tools.</Technique>
               <Technique>[Physical Access Vector] The adversary then sends the component to its original intended destination, where it will be installed onto a victim system.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Advanced knowledge about the target component's firmware</Prerequisite>
            <Prerequisite>Advanced knowledge about Master Boot Records (MBR)</Prerequisite>
            <Prerequisite>Advanced knowledge about tools used to insert firmware altering malware.</Prerequisite>
            <Prerequisite>Advanced knowledge about component shipments to the target organization.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Ability to access and reverse engineer hardware component firmware.</Skill>
            <Skill Level="High">Ability to intercept components in transit.</Skill>
            <Skill Level="Medium">Ability to create malicious payload to be executed from MBR.</Skill>
            <Skill Level="Low">Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Manufacturer source code for hardware components.</Resource>
            <Resource>Malware tools used to insert malware and payload onto target component.</Resource>
            <Resource>Either remote or physical access to the target component.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Output observed from processes, API calls, or Self-Monitoring, Analysis and Reporting Technology (SMART) may provide insight into malicious modifications of MBRs.</Indicator>
            <Indicator>Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Authentication</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
               <Impact>Execute Unauthorized Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Data</Impact>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage hardware components known to not be susceptible to these types of attacks.</Mitigation>
            <Mitigation>Implement hardware RAID infrastructure.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In 2014, the Equation group was observed levering known malware tools to conduct component firmware alteration attacks against hard drives. In total, 12 HDD categories were shown to be vulnerable from manufacturers such as Western Digital, HGST, Samsung, and Seagate. Because of their complexity, only a few victims were targeted by these attacks. [REF-664]</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1542.002</Entry_ID>
               <Entry_Name>Pre-OS Boot:Component Firmware</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-664"/>
            <Reference External_Reference_ID="REF-665"/>
            <Reference External_Reference_ID="REF-666"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Mitigations, Prerequisites, References, Resources_Required, Skills_Required, Typical_Severity</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="639" Name="Probe System Files" Abstraction="Detailed" Status="Stable">
         <Description>An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="545">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary has access to the file system of a system.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.</Example>
            <Example>Adversaries may search network shares on computers they have compromised to find files of interest.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="552"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1039</Entry_ID>
               <Entry_Name>Data from Network Shared Drive</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1552.001</Entry_ID>
               <Entry_Name>Unsecured Credentials: Credentials in Files</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1552.003</Entry_ID>
               <Entry_Name>Unsecured Credentials: Bash History</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1552.004</Entry_ID>
               <Entry_Name>Unsecured Credentials: Private Keys</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1552.006</Entry_ID>
               <Entry_Name>Unsecured Credentials: Group Policy Preferences</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-04</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="640" Name="Inclusion of Code in Existing Process" Abstraction="Detailed" Status="Stable">
         <Description>The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="251"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine target process] The adversary determines a process with sufficient privileges that they wish to include code into.</Description>
               <Technique>On Windows, use the process explorer's security tab to see if a process is running with administror privileges.</Technique>
               <Technique>On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt to include simple code with known output] The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Include arbitrary code into existing process] Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Prevent unknown or malicious software from loading through using an allowlist policy.</Mitigation>
            <Mitigation>Properly restrict the location of the software being used.</Mitigation>
            <Mitigation>Leverage security kernel modules providing advanced access control and process restrictions like SELinux.</Mitigation>
            <Mitigation>Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.</Mitigation>
            <Mitigation>Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.</Mitigation>
            <Mitigation>Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.</Mitigation>
            <Mitigation>Monitor processes and command-line arguments for unknown behavior related to code injection.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="114"/>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1505.005</Entry_ID>
               <Entry_Name>Server Software Component: Terminal Services DLL</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.006</Entry_ID>
               <Entry_Name>Hijack Execution Flow: Dynamic Linker Hijacking</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.013</Entry_ID>
               <Entry_Name>Hijack Execution Flow: KernelCallbackTable</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1620</Entry_ID>
               <Entry_Name>Reflective Code Loading</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Description, Mitigations, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Description, Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="641" Name="DLL Side-Loading" Abstraction="Detailed" Status="Stable">
         <Description>An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="159"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The target must fail to verify the integrity of the DLL before using them.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Trick the operating system in loading a malicious DLL instead of a legitimate DLL.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Prevent unknown DLLs from loading through using an allowlist policy.</Mitigation>
            <Mitigation>Patch installed applications as soon as new updates become available.</Mitigation>
            <Mitigation>Properly restrict the location of the software being used.</Mitigation>
            <Mitigation>Use of sxstrace.exe on Windows as well as manual inspection of the manifests.</Mitigation>
            <Mitigation>Require code signing and avoid using relative paths for resources.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="706"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.002</Entry_ID>
               <Entry_Name>Hijack Execution Flow:DLL Side-Loading</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-501"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="642" Name="Replace Binaries" Abstraction="Detailed" Status="Draft">
         <Description>Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The attacker must be able to place the malicious binary on the target machine.</Prerequisite>
         </Prerequisites>
         <Mitigations>
            <Mitigation>Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.</Example>
            <Example>By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:\Windows\system32\. This value is set in the registry at HKEY_CURRENT_USER\Control Panel\Desktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="732"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1505.005</Entry_ID>
               <Entry_Name>Server Software Component: Terminal Services DLL</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1554</Entry_ID>
               <Entry_Name>Compromise Client Software Binary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1574.005</Entry_ID>
               <Entry_Name>Hijack Execution Flow:Executable Installer File Permissions Weakness</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <Entry_Name>Binary planting</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="643" Name="Identify Shared Files/Directories on System" Abstraction="Detailed" Status="Draft">
         <Description>An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="309"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="561"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="545"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="165"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view \\remote system or net share).</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>The adversary is potentially able to identify the location of sensitive information or lateral pathways through the network.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="267"/>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1135</Entry_ID>
               <Entry_Name>Network Share Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Skills_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="644" Name="Use of Captured Hashes (Pass The Hash)" Abstraction="Detailed" Status="Stable">
         <Description>An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.</Description>
         <Extended_Description>
            <xhtml:p>When authenticating via LM or NTLM, an authenticating account's plaintext credentials are not required by the protocols for successful authentication. Instead, the hashed credentials are used to determine if an authentication attempt is valid. If an adversary can obtain an account's hashed credentials, the hash values can then be passed to a system or service to authenticate, without needing to brute-force the hashes to obtain their cleartext values. Successful Pass The Hash attacks result in the adversary fully authenticating as the targeted account, which can further allow the adversary to laterally move within the network, impersonate a legitimate user, and/or download/install malware to systems within the domain. This technique can be performed against any operating system that leverages the LM or NTLM protocols even if the operating system is not Windows-based, since these systems/accounts may still authenticate to a Windows domain.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="653"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="165"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="549"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="545"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Acquire known Windows credential hash value pairs] The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.</Description>
               <Technique>An adversary purchases breached Windows credential hash value pairs from the dark web.</Technique>
               <Technique>An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted.</Technique>
               <Technique>An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs.</Technique>
               <Technique>An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt domain authentication] Try each Windows credential hash value pair until the target grants access.</Description>
               <Technique>Manually or automatically enter each Windows credential hash value pair through the target's interface.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system/application is connected to the Windows domain.</Prerequisite>
            <Prerequisite>The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.</Prerequisite>
            <Prerequisite>The adversary possesses known Windows credential hash value pairs that exist on the target domain.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A list of known Window credential hash value pairs for the targeted domain.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Authentication attempts use credentials that have been used previously by the account in question.</Indicator>
            <Indicator>Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.</Indicator>
            <Indicator>Data is being transferred and/or removed from systems/applications within the network.</Indicator>
            <Indicator>Suspicious or Malicious software is downloaded/installed on systems within the domain.</Indicator>
            <Indicator>Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Authorization</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.</Mitigation>
            <Mitigation>Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.</Mitigation>
            <Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation>
            <Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation>
            <Mitigation>Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]</Example>
            <Example>Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
            <Related_Weakness CWE_ID="836"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="294"/>
            <Related_Weakness CWE_ID="308"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1550.002</Entry_ID>
               <Entry_Name>Use Alternate Authentication Material:Pass The Hash</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-575"/>
            <Reference External_Reference_ID="REF-580"/>
            <Reference External_Reference_ID="REF-581"/>
            <Reference External_Reference_ID="REF-582"/>
            <Reference External_Reference_ID="REF-583"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="645" Name="Use of Captured Tickets (Pass The Ticket)" Abstraction="Detailed" Status="Stable">
         <Description>An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="652"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary needs physical access to the victim system.</Prerequisite>
            <Prerequisite>The use of a third-party credential harvesting tool.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Determine if Kerberos authentication is used on the server.</Skill>
            <Skill Level="High">The adversary uses a third-party tool to obtain the necessary tickets to execute the attack.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.</Mitigation>
            <Mitigation>Monitor system and domain logs for abnormal access.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
            <Related_Weakness CWE_ID="294"/>
            <Related_Weakness CWE_ID="308"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1550.003</Entry_ID>
               <Entry_Name>Use Alternate Authentication Material:Pass The Ticket</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-584"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="646" Name="Peripheral Footprinting" Abstraction="Standard" Status="Stable">
         <Description>Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169">
               <Exclude_Related Exclude_ID="512"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary needs either physical or remote access to the victim system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The adversary needs to be able to infect the victim system in a manner that gives them remote access.</Skill>
            <Skill Level="Medium">If analyzing the Windows registry, the adversary must understand the registry structure to know where to look for devices.</Skill>
         </Skills_Required>
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1120</Entry_ID>
               <Entry_Name>Peripheral Device Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Skills_Required</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="647" Name="Collect Data from Registries" Abstraction="Detailed" Status="Draft">
         <Description>An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150">
               <Exclude_Related Exclude_ID="514"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Gain logical access to system] An adversary must first gain logical access to the system it wants to gather registry information from,</Description>
               <Technique>Obtain user account credentials and access the system</Technique>
               <Technique>Plant malware on the system that will give remote logical access to the adversary</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Determine if the permissions are correct] Once logical access is gained, an adversary will determine if they have the proper permissions, or are authorized, to view registry information. If they do not, they will need to escalate privileges on the system through other means</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Peruse registry for information] Once an adversary has access to a registry, they will gather all system-specific data and sensitive information that they deem useful.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).</Prerequisite>
            <Prerequisite>The adversary must have capability to navigate the operating system to peruse the registry.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>The adversary is able to read sensitive information about the system in the registry.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.</Mitigation>
            <Mitigation>Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="285"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1005</Entry_ID>
               <Entry_Name>Data from Local System</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1012</Entry_ID>
               <Entry_Name>Query Registry</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1552.002</Entry_ID>
               <Entry_Name>Unsecured Credentials: Credentials in Registry</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-15</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="648" Name="Collect Data from Screen Capture" Abstraction="Detailed" Status="Draft">
         <Description>An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="150">
               <Exclude_Related Exclude_ID="514"/>
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>None: No specialized resources are required to execute this type of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Note>The adversary is able to capture potentially sensitive information and processes as they appear on the screen.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.</Mitigation>
            <Mitigation>While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="267"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1113</Entry_ID>
               <Entry_Name>Screen Capture</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1513</Entry_ID>
               <Entry_Name>Screen Capture</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2018-07-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="649" Name="Adding a Space to a File Extension" Abstraction="Detailed" Status="Draft">
         <Description>An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="635"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The use of the file must be controlled by the file extension.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>File extensions should be checked to see if non-visible characters are being included.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="46"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1036.006</Entry_ID>
               <Entry_Name>Masquerading:Space after Filename</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="65" Name="Sniff Application Code" Abstraction="Detailed" Status="Draft">
         <Description>An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="37"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Set up a sniffer] The adversary sets up a sniffer in the path between the server and the client and watches the traffic.</Description>
               <Technique>The adversary sets up a sniffer in the path between the server and the client.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Capturing Application Code Bound During Patching]adversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.</Description>
               <Technique>adversary loads the sniffer to capture the application code bound during a dynamic update.</Technique>
               <Technique>The adversary proceeds to reverse engineer the captured code.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The attacker must have the ability to place themself in the communication path between the client and server.</Prerequisite>
            <Prerequisite>The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.</Prerequisite>
            <Prerequisite>The attacker must be able to employ a sniffer on the network without being detected.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>
               <xhtml:p>The Attacker needs the ability to capture communications between the client being updated and the server providing the update.</xhtml:p>
               <xhtml:p>In the case that encryption obscures client/server communication the attacker will either need to lift key material from the client.</xhtml:p>
            </Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Encrypt all communication between the client and server.</Mitigation>
            <Mitigation>Implementation: Use SSL, SSH, SCP.</Mitigation>
            <Mitigation>Operation: Use "ifconfig/ipconfig" or other tools to detect the sniffer installed in the network.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..</Example>
            <Example>Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="319"/>
            <Related_Weakness CWE_ID="311"/>
            <Related_Weakness CWE_ID="318"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1040</Entry_ID>
               <Entry_Name>Network Sniffing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-11-09</Modification_Date>
               <Modification_Comment>Updated Description Summary, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>Updated Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Prerequisites</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses, Skills_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2015-12-07">Passively Sniff and Capture Application Code Bound for Authorized Client</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="650" Name="Upload a Web Shell to a Web Server" Abstraction="Detailed" Status="Draft">
         <Description>By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a "gateway" to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.</Description>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The web server is susceptible to one of the various web application exploits that allows for uploading a shell file.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.</Mitigation>
            <Mitigation>Ensure that the file permissions in directories on the web server from which files can be execute is set to the "least privilege" settings, and that those directories contents is controlled by an allowlist.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="287"/>
            <Related_Weakness CWE_ID="553"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1505.003</Entry_ID>
               <Entry_Name>Server Software Component:Web Shell</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2018-05-31</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="651" Name="Eavesdropping" Abstraction="Standard" Status="Draft">
         <Description>An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.</Description>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="117"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The adversary typically requires physical proximity to the target's environment, whether for physical eavesdropping or for placing recording equipment. This is not always the case for software-based eavesdropping, if the adversary has the capability to install malware on the target system that can activate a microphone and record audio digitally.</Prerequisite>
         </Prerequisites>
         <Resources_Required>
            <Resource>For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>The adversary gains unauthorized access to information.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Be mindful of your surroundings when discussing sensitive information in public areas.</Mitigation>
            <Mitigation>Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.</Mitigation>
            <Mitigation>If possible, physically disable the microphone on your machine if it is not needed.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="200"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1111</Entry_ID>
               <Entry_Name>Multi-Factor Authentication Interception</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="652" Name="Use of Known Kerberos Credentials" Abstraction="Standard" Status="Draft">
         <Description>An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.</Description>
         <Extended_Description>
            <xhtml:p>Kerberos is the default authentication method for Windows domains and is also used across many operating systems. Attacks leveraging trusted Kerberos credentials can result in numerous consequences, depending on what Kerberos credential is stolen. For example, Kerberos service accounts are typically used to run services or scheduled tasks pertaining to authentication. However, these credentials are often weak and never expire, in addition to possessing local or domain administrator privileges. If an adversary is able to acquire these credentials, it could result in lateral movement within the domain or access to any resources the service account is privileged to access, among other things. Ultimately, successful spoofing and impersonation of trusted Kerberos credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="560">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.</Description>
               <Technique>An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.</Technique>
               <Technique>An adversary guesses the credentials to a weak Kerberos service account.</Technique>
               <Technique>An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.</Technique>
               <Technique>An adversary conducts a Kerberoasting attack.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.</Description>
               <Technique>Manually or automatically enter each Kerberos service account credential through the target's interface.</Technique>
               <Technique>Attempt a Pass the Ticket attack.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>5</Step>
               <Phase>Exploit</Phase>
               <Description>[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system/application leverages Kerberos authentication.</Prerequisite>
            <Prerequisite>The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.</Prerequisite>
            <Prerequisite>The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.</Prerequisite>
            <Prerequisite>The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.</Prerequisite>
            <Prerequisite>The targeted network allows for network sniffing attacks to succeed.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once an adversary obtains a known Kerberos credential, leveraging it is trivial.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>A valid Kerberos ticket or a known Kerberos service account credential.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Authentication attempts use expired or invalid credentials.</Indicator>
            <Indicator>Authentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.</Indicator>
            <Indicator>Data is being transferred and/or removed from systems/applications within the network.</Indicator>
            <Indicator>Suspicious or Malicious software is downloaded/installed on systems within the domain.</Indicator>
            <Indicator>Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Authorization</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.</Mitigation>
            <Mitigation>Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.</Mitigation>
            <Mitigation>Do not reuse Kerberos service account credentials across systems.</Mitigation>
            <Mitigation>Deny remote use of Kerberos service account credentials to log into domain systems.</Mitigation>
            <Mitigation>Do not allow Kerberos service accounts to be a local administrator on more than one system.</Mitigation>
            <Mitigation>Enable at least AES Kerberos encryption for tickets.</Mitigation>
            <Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]</Example>
            <Example>PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="522"/>
            <Related_Weakness CWE_ID="307"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="309"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="654"/>
            <Related_Weakness CWE_ID="294"/>
            <Related_Weakness CWE_ID="836"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1558</Entry_ID>
               <Entry_Name>Steal or Forge Kerberos Tickets</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-584"/>
            <Reference External_Reference_ID="REF-585"/>
            <Reference External_Reference_ID="REF-586"/>
         </References>
         <Notes>
            <Note Type="Other">Kerberos centers around a ticketing system that is used to request/grant access to resources and to then access the requested resources. If one of these tickets is acquired, an adversary could gain access to a specific resource; access any resource a user has privileges to access; gain access to services that use Kerberos as an authentication mechanism and generate tickets to access a particular resource and the system that hosts the resource; or generate Ticket Granting Tickets (TGTs) for any domain account within Active Directory.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2020-07-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Description, Notes, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Extended_Description, Prerequisites</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="654" Name="Credential Prompt Impersonation" Abstraction="Detailed" Status="Stable">
         <Description>An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.</Description>
         <Extended_Description>
            <xhtml:p>The adversary may monitor the task list maintained by the operating system and wait for a specific legitimate credential prompt to become active. Once the prompt is detected, the adversary launches a new credential prompt in the foreground that mimics the user interface of the legitimate credential prompt. At this point, the user thinks that they are interacting with the legitimate credential prompt, but instead they are interacting with the malicious credential prompt.</xhtml:p>
            <xhtml:p>A second approach involves the adversary impersonating an unexpected credential prompt, but one that may often be spawned by legitimate background processes. For example, an adversary may randomly impersonate a system credential prompt, implying that a background process or commonly used application (e.g., email reader) requires authentication for some purpose. The user, believing they are interacting with a legitimate credential prompt, enters their credentials which the adversary then leverages for nefarious purposes. The ultimate goal of this attack is to obtain sensitive information (e.g., credentials) from the user.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="504"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing their credentials.</Description>
               <Technique>Determine what tasks prompt a user for their credentials.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.</Description>
               <Technique>Prompt a user for their credentials, while making the user believe the credential request is legitimate.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must already have access to the target system via some means.</Prerequisite>
            <Prerequisite>A legitimate task must exist that an adversary can impersonate to glean credentials.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Malware or some other means to initially comprise the target system.</Resource>
            <Resource>Additional malware to impersonate a legitimate credential prompt.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Credential prompts that appear illegitimate or unexpected.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authentication</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.</Example>
            <Example>An adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1021"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1056</Entry_ID>
               <Entry_Name>Input Capture</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1548.004</Entry_ID>
               <Entry_Name>Abuse Elevation Control Mechanism: Elevated Execution with Prompt</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2020-07-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="655" Name="Avoid Security Tool Identification by Adding Data" Abstraction="Detailed" Status="Draft">
         <Description>
            <xhtml:p>An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions.</xhtml:p>
            <xhtml:p>In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="572"/>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Accountability</Scope>
               <Impact>Hide Activities</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>
               <xhtml:p>Adding data to change the checksum of a file and can be used to avoid hash-based denylists and static anti-virus signatures.</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1027.001</Entry_ID>
               <Entry_Name>Obfuscated Files or Information:Binary padding</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2020-07-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Example_Instances</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="657" Name="Malicious Automated Software Update via Spoofing" Abstraction="Detailed" Status="Draft">
         <Description>An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="186">
               <Exclude_Related Exclude_ID="403"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Availability</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Example_Instances>
            <Example>An example of the spoofing strategy would be the eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1072</Entry_ID>
               <Entry_Name>Software Deployment Tools</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2020-12-17</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="660" Name="Root/Jailbreak Detection Evasion via Hooking" Abstraction="Detailed" Status="Stable">
         <Description>An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to "hook" code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="251"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).</Description>
               <Technique>Search application stores for mobile applications worth exploiting</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Develop code to be hooked into chosen target application] The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.</Description>
               <Technique>Develop code or leverage existing code to bypass Root/Jailbreak detection methods.</Technique>
               <Technique>Test the code to see if it works.</Technique>
               <Technique>Iteratively develop the code until Root/Jailbreak detection methods are evaded.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Execute code hooking to evade Root/Jailbreak detection methods] Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.</Description>
               <Technique>Hook code into the target application.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The targeted application must be non-restricted to allow code hooking.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Knowledge about Root/Jailbreak detection and evasion techniques.</Skill>
            <Skill Level="Medium">Knowledge about code hooking.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary must have a Rooted/Jailbroken mobile device.</Resource>
            <Resource>The adversary needs to have enough access to the target application to control the included code or file.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Note>Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Data</Impact>
               <Note>An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.</Note>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.</Mitigation>
            <Mitigation>Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.</Mitigation>
            <Mitigation>Inspect the application's stack trace for suspicious method calls.</Mitigation>
            <Mitigation>Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.</Mitigation>
            <Mitigation>For iOS applications, ensure application methods do not originate from outside of Apple's SDK.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns "false" when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns "false", so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.</Example>
            <Example>An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1055</Entry_ID>
               <Entry_Name>Process Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-624"/>
            <Reference External_Reference_ID="REF-625"/>
            <Reference External_Reference_ID="REF-626"/>
            <Reference External_Reference_ID="REF-627"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2020-12-17</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="662" Name="Adversary in the Browser (AiTB)" Abstraction="Standard" Status="Stable">
         <Description>
            <xhtml:p>An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>This attack first requires the adversary to trick the victim into installing a Trojan Horse application on their system, such as a malicious web browser plugin, which the adversary then leverages to mount the attack. The victim interacts with a web application, such as a banking website, in a normal manner and under the assumption that the connection is secure. However, the adversary can now alter and/or reroute traffic between the client application (e.g., web browser) and the coinciding endpoint, while simultaneously displaying intended transactions and data back to the user. The adversary may also be able to glean cookies, HTTP sessions, and SSL client certificates, which can be used to pivot into an authenticated intranet. Identifying AITB is often difficult because these attacks are successful even when security mechanisms such as SSL/PKI and multifactor authentication are present, since they still function as intended during the attack.</xhtml:p>
         </Extended_Description>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Man in the Browser</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Boy in the Browser</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Man in the Mobile</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>The adversary tricks the victim into installing the Trojan Horse malware onto their system.</Description>
               <Technique>Conduct phishing attacks, drive-by malware installations, or masquerade malicious browser extensions as being legitimate.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>The adversary observes, filters, or alters passed data of their choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must install or convince a user to install a Trojan.</Prerequisite>
            <Prerequisite>There are two components communicating with each other.</Prerequisite>
            <Prerequisite>An attacker is able to identify the nature and mechanism of communication between the two target components.</Prerequisite>
            <Prerequisite>Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.</Prerequisite>
            <Prerequisite>For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.</Mitigation>
            <Mitigation>Leverage anti-malware tools, which can detect Trojan Horse malware.</Mitigation>
            <Mitigation>Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.</Mitigation>
            <Mitigation>Limit user permissions to prevent browser pivoting.</Mitigation>
            <Mitigation>Ensure browser sessions are regularly terminated and when their effective lifetime ends.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An adversary conducts a phishing attack and tricks a victim into installing a malicious browser plugin. The adversary then positions themself between the victim and their banking institution. The victim begins by initiating a funds transfer from their personal savings to their personal checking account. Using injected JavaScript, the adversary captures this request and modifies it to transfer an increased amount of funds to an account that they controls, before sending it to the bank. The bank processes the transfer and sends the confirmation notice back to the victim, which is instead intercepted by the adversary. The adversary modifies the confirmation to reflect the original transaction details and sends this modified message back to the victim. Upon receiving the confirmation, the victim assumes the transfer was successful and is unaware that their money has just been transferred to the adversary.</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>In 2020, the Agent Tesla malware was leveraged to conduct AiTB attacks against organizations within the gas, oil, and other energy sectors. The malware was delivered via a spearphishing campaign and has the capability to form-grab, keylog, copy clipboard data, extract credentials, and capture screenshots. [REF-630]</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>Boy in the browser attacks are a subset of AiTB attacks. Similar to AiTB attacks, the adversary must first trick the victim into installing a Trojan, either via social engineering or drive-by-download attacks. The malware then modifies the victim's "hosts" file in order to reroute web traffic from an intended website to an adversary-controlled website that mimics the legitimate website. The adversary is now able to observe, intercept, and/or modify all traffic, as in a traditional Adversary in the Middle attack (CAPEC-94). BiTB attacks are low-cost, easy to execute, and more difficult to detect since the malware often removes itself once the attack has concluded. [REF-631]</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>Man in the Mobile attacks are a subset of AiTB attacks that target mobile device users. Like AiTB attacks, an adversary convinces a victim to install a Trojan mobile application on their mobile device, often under the guise of security. Once the victim has installed the application, the adversary can capture all SMS traffic to bypass SMS-based out-of-band authentication systems. [REF-632]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="300"/>
            <Related_Weakness CWE_ID="494"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1185</Entry_ID>
               <Entry_Name>Man in the Browser</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <Entry_Name>Man-in-the-browser attack</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-629"/>
            <Reference External_Reference_ID="REF-630"/>
            <Reference External_Reference_ID="REF-631"/>
            <Reference External_Reference_ID="REF-632"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Description, Extended_Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="665" Name="Exploitation of Thunderbolt Protection Flaws" Abstraction="Detailed" Status="Stable">
         <Description>
            <xhtml:p>An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="276"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="390"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="458"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="148"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="151"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Survey physical victim environment and potential Thunderbolt system targets] The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Evaluate the target system and its Thunderbolt interface] The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Experiment</Phase>
               <Description>[Obtain and/or clone firmware image] The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.</Description>
               <Technique>Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer.</Technique>
               <Technique>Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts.</Technique>
               <Technique>Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information] The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.</Description>
               <Technique>Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it.</Technique>
               <Technique>Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID.</Technique>
               <Technique>Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID.</Technique>
               <Technique>Locate data structure containing challenge-response key information between appropriate offsets.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Experiment</Phase>
               <Description>[Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary)] The adversary overrides the target device's Thunderbolt Security Level to "None" (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.</Description>
               <Technique>The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Experiment</Phase>
               <Description>[Modify/replace victim Thunderbolt firmware image] The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Exploit</Phase>
               <Description>[Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions] The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.</Description>
               <Technique>Observe victim device identify adversary device as the victim device and enables PCIe tunneling.</Technique>
               <Technique>Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled.</Technique>
               <Technique>Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of "None" (SL0)</Technique>
               <Technique>Observe after installation of Firmware update that within Thunderbolt Management UI the "NVM version" is unchanged/same prior to the prompt of successful Firmware update/installation.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Exploit</Phase>
               <Description>[Exfiltration of desired data from victim device to adversary device] Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices.</Skill>
            <Skill Level="High">Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage.</Skill>
            <Skill Level="High">Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>SPI Programming device capable of modifying/configuring or replacing the firmware of Thunderbolt device stored on SPI Flash of target Thunderbolt controller, as well as modification/spoofing of adversary-controlled Thunderbolt controller.</Resource>
            <Resource>Precrafted scripts/tools capable of implementing the modification and replacement of Thunderbolt Firmware.</Resource>
            <Resource>Thunderbolt-enabled computing device capable of interfacing with target Thunderbolt device and extracting/dumping data and memory contents of target device.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implementation: Kernel Direct Memory Access Protection</Mitigation>
            <Mitigation>Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface</Mitigation>
            <Mitigation>Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface</Mitigation>
            <Mitigation>Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode</Mitigation>
            <Mitigation>Configuration: Set Security Level to SL3 for Thunderbolt 2 system port</Mitigation>
            <Mitigation>Configuration: Disable PCIe tunneling to set Security Level to SL3</Mitigation>
            <Mitigation>Configuration: Disable Boot Camp upon MacOS systems</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="345"/>
            <Related_Weakness CWE_ID="353"/>
            <Related_Weakness CWE_ID="288"/>
            <Related_Weakness CWE_ID="1188"/>
            <Related_Weakness CWE_ID="862"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1211</Entry_ID>
               <Entry_Name>Exploitation for Defensive Evasion</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1542.002</Entry_ID>
               <Entry_Name>Pre-OS Boot: Component Firmware</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1556</Entry_ID>
               <Entry_Name>Modify Authentication Process</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-647"/>
            <Reference External_Reference_ID="REF-648"/>
            <Reference External_Reference_ID="REF-649"/>
            <Reference External_Reference_ID="REF-650"/>
            <Reference External_Reference_ID="REF-651"/>
            <Reference External_Reference_ID="REF-652"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="666" Name="BlueSmacking" Abstraction="Standard" Status="Draft">
         <Description>An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Scan for Bluetooth Enabled Devices] Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.</Description>
               <Technique>Note the MAC address of the device you want to attack.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Change L2CAP Packet Length] The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.</Description>
               <Technique>An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Flood] An adversary sends the packets to the target device, and floods it until performance is degraded.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The system/application has Bluetooth enabled.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common.</Skill>
         </Skills_Required>
         <Indicators>
            <Indicator>Performance is degraded or halted by incoming L2CAP packets.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Unreliable Execution</Impact>
               <Impact>Resource Consumption</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Disable Bluetooth when not being used.</Mitigation>
            <Mitigation>When using Bluetooth, set it to hidden or non-discoverable mode.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="404"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1498.001</Entry_ID>
               <Entry_Name>Network Denial of Service: Direct Network Flood</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1499.001</Entry_ID>
               <Entry_Name>Endpoint Denial of Service: OS Exhaustion Flood</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-655"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="668" Name="Key Negotiation of Bluetooth Attack (KNOB)" Abstraction="Standard" Status="Draft">
         <Description>An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="115"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="148"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Discovery] Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.</Description>
               <Technique>Use packet capture tools.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Change the entropy bits] Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Capture and decrypt data] Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Person in the Middle network setup.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Ability to modify packets.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Bluetooth adapter, packet capturing capabilities.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="425"/>
            <Related_Weakness CWE_ID="285"/>
            <Related_Weakness CWE_ID="693"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1565.002</Entry_ID>
               <Entry_Name>Data Manipulation: Transmitted Data Manipulation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-657"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="669" Name="Alteration of a Software Update" Abstraction="Standard" Status="Draft">
         <Description>
            <xhtml:p>An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="184"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="673"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify software with frequent updates] The adversary must first identify a target software that has updates at least with some frequency, enough that there is am update infrastructure.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Gain access to udpate infrastructure] The adversary must then gain access to the organization's software update infrastructure. This can either be done by gaining remote access from outside the organization, or by having a malicious actor inside the organization gain access. It is often easier if someone within the organization gains access.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Alter the software update] Through access to the software update infrastructure, an adversary will alter the software update by injecting malware into the content of an outgoing update.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.</Mitigation>
            <Mitigation>Require elevated privileges for distribution of software and software updates.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor.</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.002</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-658"/>
            <Reference External_Reference_ID="REF-659"/>
            <Reference External_Reference_ID="REF-660"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-10-21</Modification_Date>
               <Modification_Comment>Updated Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="670" Name="Software Development Tools Maliciously Altered" Abstraction="Detailed" Status="Draft">
         <Description>An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="669"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary would need to have access to a targeted developer’s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Modify Data</Impact>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.</Mitigation>
            <Mitigation>Avoid giving elevated privileges to developers.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary with access to software build tools inside an Integrated Development Environment IDE alters a script used for downloading dependencies from a dependent code repository where the script has been changed to include malicious code implanted in the repository by the adversary.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1127</Entry_ID>
               <Entry_Name>Trusted Developer Utilities Proxy Execution</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.001</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-660"/>
            <Reference External_Reference_ID="REF-439"/>
            <Reference External_Reference_ID="REF-667"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="671" Name="Requirements for ASIC Functionality Maliciously Altered" Abstraction="Detailed" Status="Draft">
         <Description>An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="447"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary would need to have access to a foundry’s or chip maker’s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.</Mitigation>
            <Mitigation>Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.</Mitigation>
            <Mitigation>Require that provenance of COTS microelectronic components be known whenever procured.</Mitigation>
            <Mitigation>Conduct detailed vendor assessment before acquiring COTS hardware.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary with access to ASIC functionality requirements for various customers, targets a particular customer’s ordered lot of ASICs by altering its functional requirements such that the ASIC design will result in a manufactured chip that does not meet the customer’s capability needs.</Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="672" Name="Malicious Code Implanted During Chip Programming" Abstraction="Detailed" Status="Draft">
         <Description>
            <xhtml:p>During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="688"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary would need to have access to a foundry’s or chip maker’s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.</Mitigation>
            <Mitigation>Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.</Mitigation>
            <Mitigation>Require that provenance of COTS microelectronic components be known whenever procured.</Mitigation>
            <Mitigation>Conduct detailed vendor assessment before acquiring COTS hardware.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Following a chip’s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chip’s function(s) inserts a malicious instruction that will become part of the chip’s program. When integrated into a system, the chip will produce an effect intended by the adversary.</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-662"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="673" Name="Developer Signing Maliciously Altered Software" Abstraction="Detailed" Status="Draft">
         <Description>
            <xhtml:p>Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems.</xhtml:p>
            <xhtml:p>This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <Exclude_Related Exclude_ID="515"/>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.</Mitigation>
            <Mitigation>Employ intrusion detection and malware detection capabilities on IDE systems where feasible.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An adversary who has infiltrated an organization’s build environment maliciously alters code intended to be included in a product’s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developer’s intent with respect to functionality unaware of the adversary’s malicious intent harbored within.</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.002</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-658"/>
            <Reference External_Reference_ID="REF-659"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="674" Name="Design for FPGA Maliciously Altered" Abstraction="Detailed" Status="Stable">
         <Description>
            <xhtml:p>An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="447"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker’s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.</Mitigation>
            <Mitigation>Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.</Mitigation>
            <Mitigation>Require that provenance of COTS microelectronic components be known whenever procured.</Mitigation>
            <Mitigation>Conduct detailed vendor assessment before acquiring COTS hardware.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>An adversary with access and the ability to alter the configuration/programming of FPGAs in organizational systems, introduces a trojan backdoor that can be used to alter the behavior of the original system resulting in, for example, compromise of confidentiality of data being processed.</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-660"/>
            <Reference External_Reference_ID="REF-439"/>
            <Reference External_Reference_ID="REF-662"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="675" Name="Retrieve Data from Decommissioned Devices" Abstraction="Standard" Status="Stable">
         <Description>
            <xhtml:p>An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>Medium</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="116"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="37"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation.</Skill>
            <Skill Level="Medium">An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Accountability</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Backup device data before erasure to retain intellectual property and inside knowledge.</Mitigation>
            <Mitigation>Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.</Mitigation>
            <Mitigation>Use a secure erase software.</Mitigation>
            <Mitigation>Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.</Mitigation>
            <Mitigation>Physically destroy memory and SIM cards for mobile devices not intended to be reused.</Mitigation>
            <Mitigation>Ensure that the user account has been terminated or switched to a new device before destroying.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization.</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="1266"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1052</Entry_ID>
               <Entry_Name>Exfiltration Over Physical Medium</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-663"/>
            <Reference External_Reference_ID="REF-717"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-06-24</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="677" Name="Server Motherboard Compromise" Abstraction="Detailed" Status="Draft">
         <Description>
            <xhtml:p>Malware is inserted in a server motherboard (e.g., in the flash memory) in order to alter server functionality from that intended. The development environment or hardware/software support activity environment is susceptible to an adversary inserting malicious software into hardware components during development or update.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="534"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary with access to hardware/software processes and tools within the development or hardware/software support environment can insert malicious software into hardware components during development or update/maintenance.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Purchase IT systems, components and parts from government approved vendors whenever possible.</Mitigation>
            <Mitigation>Establish diversity among suppliers.</Mitigation>
            <Mitigation>Conduct rigorous threat assessments of suppliers.</Mitigation>
            <Mitigation>Require that Bills of Material (BoM) for critical parts and components be certified.</Mitigation>
            <Mitigation>Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.</Mitigation>
            <Mitigation>Establish trusted supplier networks.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>Malware is inserted into the Unified Extensible Firmware Interface (UEFI) software that resides on a flash memory chip soldered to a computer’s motherboard. It is the first thing to turn on when a system is booted and is allowed access to almost every part of the operating system. Hence, the malware will have extensive control over operating system functions and persist after system reboots. [REF-685]</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.003</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
            <Reference External_Reference_ID="REF-660"/>
            <Reference External_Reference_ID="REF-685"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-10-21</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated @Name</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2023-01-24">Server Functionality Compromise</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="678" Name="System Build Data Maliciously Altered" Abstraction="Detailed" Status="Draft">
         <Description>
            <xhtml:p>During the system build process, the system is deliberately misconfigured by the alteration of the build data. Access to system configuration data files and build processes is susceptible to deliberate misconfiguration of the system.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>An adversary has access to the data files and processes used for executing system configuration and performing the build.</Prerequisite>
         </Prerequisites>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Modify Data</Impact>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Implement configuration management security practices that protect the integrity of software and associated data.</Mitigation>
            <Mitigation>Monitor and control access to the configuration management system.</Mitigation>
            <Mitigation>Harden centralized repositories against attack.</Mitigation>
            <Mitigation>Establish acceptance criteria for configuration management check-in to assure integrity.</Mitigation>
            <Mitigation>Plan for and audit the security of configuration management administration processes.</Mitigation>
            <Mitigation>Maintain configuration control over operational systems.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>‘Make’ is a program used for building executable programs and libraries from source code by executing commands and following rules in a ‘makefile’. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.002</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-439"/>
            <Reference External_Reference_ID="REF-660"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2021-10-21</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Description</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="68" Name="Subvert Code-signing Facilities" Abstraction="Standard" Status="Draft">
         <Description>Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.</Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="233"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>A framework-based language that supports code signing (such as, and most commonly, Java or .NET)</Prerequisite>
            <Prerequisite>Deployed code that has been signed by its authoring vendor, or a partner.</Prerequisite>
            <Prerequisite>The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="High">Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.</Mitigation>
            <Mitigation>If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the "Magic Coat" attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.</Example>
            <Example>Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit "true" at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.</Example>
            <Example>The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="325"/>
            <Related_Weakness CWE_ID="328"/>
            <Related_Weakness CWE_ID="1326"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1553.002</Entry_ID>
               <Entry_Name>Subvert Trust Controls: Code Signing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-01-09</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Description Summary</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="691" Name="Spoof Open-Source Software Metadata" Abstraction="Standard" Status="Stable">
         <Description>
            <xhtml:p>An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>Due to open-source software's popularity, it serves as a desirable attack-vector for adversaries since a single malicious component may result in the exploitation of numerous systems/applications. Adversaries may, therefore, spoof the metadata pertaining to the open-source software in order to trick victims into downloading and using their malicious software. Examples of metadata that may be spoofed include:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>Owner of the software (e.g., repository or package owner)</xhtml:li>
               <xhtml:li>Author(s) of repository commits</xhtml:li>
               <xhtml:li>Frequency of repository commits</xhtml:li>
               <xhtml:li>Date/Time of repository commits</xhtml:li>
               <xhtml:li>Package or Repository "stars"</xhtml:li>
            </xhtml:ul>
            <xhtml:p>Once the malicious software component has been integrated into an underlying application or executed on a system, the adversary is ultimately able to achieve numerous negative technical impacts within the system/application. This often occurs without any indication of compromise.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="690"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="184"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="444"/>
            <Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="630"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>Identification of a popular open-source component whose metadata is to be spoofed.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Ability to spoof a variety of software metadata to convince victims the source is trusted.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Impact>Hide Activities</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.</Mitigation>
            <Mitigation>Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.</Mitigation>
            <Mitigation>Reference vulnerability databases to determine if the software contains known vulnerabilities.</Mitigation>
            <Mitigation>Only download open-source software from reputable hosting sites or package managers.</Mitigation>
            <Mitigation>Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the "Verified" status and for developers leveraging "Vigilant Mode" (GitHub) or similar modes.</Mitigation>
            <Mitigation>After downloading open-source software, ensure integrity values have not changed.</Mitigation>
            <Mitigation>Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>An adversary provides a malicious open-source library, claiming to provide extended logging features and functionality, and spoofs the metadata with that of a widely used legitimate library. The adversary then tricks victims into including this library in their underlying application. Once the malicious software is incorporated into the application, the adversary is able to manipulate and exfiltrate log data.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.001</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.002</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2022-09-29</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="694" Name="System Location Discovery" Abstraction="Standard" Status="Stable">
         <Description>
            <xhtml:p>An adversary collects information about the target system in an attempt to identify the system's geographical location.</xhtml:p>
            <xhtml:p>Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks.</xhtml:p>
         </Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very Low</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="169"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[System Locale Information Discovery] The adversary examines system information from various sources such as registry and native API functions and correlates the gathered information to infer the geographical location of the target system</Description>
               <Technique>Registry Query: Query the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ContentIndex\Language\Language_Dialect on Windows to obtain system language, Computer\HKEY_CURRENT_USER\Keyboard Layout\Preload to obtain the hexadecimal language IDs of the current user's preloaded keyboard layouts, and Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation to obtain the system timezone configuration</Technique>
               <Technique>Native API Requests: Parse the outputs of Windows API functions GetTimeZoneInformation, GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID to obtain information about languages, keyboard layouts, and timezones installed on the system or on macOS or Linux systems, query locale to obtain the $LANG environment variable and view keyboard layout information or use timeanddatectl status to show the system clock settings.</Technique>
               <Technique>Read Configuration Files: For macOS and Linux-based systems, view the /etc/vconsole.conf file to get information about the keyboard mapping and console font.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary requires access to the target's operating system tools to query relevant system information. On windows, registry queries can be conducted with powershell, wmi, or regedit. On Linux or macOS, queries can be performed with through a shell.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.</Mitigation>
         </Mitigations>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="497"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1614</Entry_ID>
               <Entry_Name>System Language Discovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-727"/>
            <Reference External_Reference_ID="REF-728"/>
            <Reference External_Reference_ID="REF-729"/>
            <Reference External_Reference_ID="REF-730"/>
            <Reference External_Reference_ID="REF-731"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2022-09-29</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="695" Name="Repo Jacking" Abstraction="Detailed" Status="Stable">
         <Description>
            <xhtml:p>An adversary takes advantage of the redirect property of directly linked Version Control System (VCS) repositories to trick users into incorporating malicious code into their applications.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>Software developers may directly reference a VCS repository (i.e., via a hardcoded URL) within source code to integrate the repository as a dependency for the underlying application. If the repository owner/maintainer modifies the repository name, changes their VCS username, or transfers ownership of the repository, the VCS implements a redirect to the new repository location so that existing software referencing the repository will not break. However, if the original location of the repository is reestablished, the VCS will revert to resolving the hardcoded path. Adversaries may, therefore, re-register deleted or previously used usernames and recreate repositories with malicious code to infect applications referencing the repository. When an application then fetches the desired dependency, it will now reference the adversary's malicious repository since the hardcoded repository path is once again active. This ultimately allows the adversary to infect numerous applications, while achieving a variety of negative technical impacts.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="616"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify target] The adversary must first identify a target repository that is commonly used and whose owner/maintainer has either changed/deleted their username or transferred ownership of the repository and then deleted their account. The target should typically be a popular and widely used package, as to increase the scope of the attack.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Recreate initial repository path] The adversary re-registers the account that was renamed/deleted by the target repository's owner/maintainer and recreates the target repository with malicious code intended to exploit an application. These steps may need to happen in reverse (i.e., recreate repository and then rename an existing account to the target account) if protections are in place to prevent repository reuse.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Exploit victims] The adversary's malicious code is incorporated into applications that directly reference the initial repository, which further allows the adversary to conduct additional attacks.</Description>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>Identification of a popular repository that may be directly referenced in numerous software applications</Prerequisite>
            <Prerequisite>A repository owner/maintainer who has recently changed their username or deleted their account</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">Ability to create an account on a VCS hosting site and recreate an existing directory structure.</Skill>
            <Skill Level="Low">Ability to create malware that can exploit various software applications.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Read Data</Impact>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Leverage dedicated package managers instead of directly linking to VCS repositories.</Mitigation>
            <Mitigation>Utilize version pinning and lock files to prevent use of maliciously modified repositories.</Mitigation>
            <Mitigation>Implement "vendoring" (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.</Mitigation>
            <Mitigation>Leverage automated tools, such as Checkmarx's "ChainJacking" tool, to determine susceptibility to Repo Jacking attacks.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In May 2022, the CTX Python package and PhPass PHP package were both exploited by the same adversary via Repo Jacking attacks. For the CTX package, the adversary performed an account takeover via a password reset, due to an expired domain-hosting email. The attack on PhPass entailed bypassing GitHub's authentication for retired repositories. In both cases, sensitive data in the form of API keys and passwords, each stored in the form of environment variables, were exfiltrated. [REF-732] [REF-733]</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>In October 2021, the popular JavaScript library UAParser.js was exploited via the takeover of the author's Node Package Manager (NPM) account. The adversary-provided malware downloaded and executed binaries from a remote server to conduct crypto-mining and to exfiltrate sensitive data on Windows systems. This was a wide-scale attack as the package receives 8 to 9 million downloads per week. [REF-732]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="494"/>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1195.001</Entry_ID>
               <Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-722"/>
            <Reference External_Reference_ID="REF-732"/>
            <Reference External_Reference_ID="REF-733"/>
            <Reference External_Reference_ID="REF-734"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2022-09-29</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="697" Name="DHCP Spoofing" Abstraction="Standard" Status="Stable">
         <Description>
            <xhtml:p>An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>DHCP is broadcast to the entire Local Area Network (LAN) and does not have any form of authentication by default. Therefore, it is susceptible to spoofing.</xhtml:p>
            <xhtml:p>An adversary with access to the target LAN can receive DHCP messages; obtaining the topology information required to potentially manipulate other hosts' network configurations.</xhtml:p>
            <xhtml:p>To improve the likelihood of the DHCP request being serviced by the Rogue server, an adversary can first starve the DHCP pool.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Low</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="194"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="158"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine Exsisting DHCP lease] An adversary observes network traffic and waits for an existing DHCP lease to expire on a target machine in the LAN.</Description>
               <Technique>Adversary observes LAN traffic for DHCP solicitations</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Capture the DHCP DISCOVER message] The adversary captures "DISCOVER" messages and crafts "OFFER" responses for the identified target MAC address. The success of this attack centers on the capturing of and responding to these "DISCOVER" messages.</Description>
               <Technique>Adversary captures and responds to DHCP "DISCOVER" messages tailored to the target subnet.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Compromise Network Access and Collect Network Activity] An adversary successfully acts as a rogue DHCP server by redirecting legitimate DHCP requests to itself.</Description>
               <Technique>Adversary sends repeated DHCP "REQUEST" messages to quickly lease all the addresses within network's DHCP pool and forcing new DHCP requests to be handled by the rogue DHCP server.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must have access to a machine within the target LAN which can send DHCP offers to the target.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary requires access to a machine within the target LAN on a network which does not secure its DHCP traffic through MAC-Forced Forwarding, port security, etc.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Access Control</Scope>
               <Impact>Modify Data</Impact>
               <Impact>Execute Unauthorized Commands</Impact>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>Resource Consumption</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: MAC-Forced Forwarding</Mitigation>
            <Mitigation>Implementation: Port Security and DHCP snooping</Mitigation>
            <Mitigation>Implementation: Network-based Intrusion Detection Systems</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="923"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1557.003</Entry_ID>
               <Entry_Name>Adversary-in-the-Middle: DHCP Spoofing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-737"/>
            <Reference External_Reference_ID="REF-738"/>
            <Reference External_Reference_ID="REF-739"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2022-09-29</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="698" Name="Install Malicious Extension" Abstraction="Detailed" Status="Stable">
         <Description>
            <xhtml:p>An adversary directly installs or tricks a user into installing a malicious extension into existing trusted software, with the goal of achieving a variety of negative technical impacts.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>Many software applications allow users to install third-party software extensions/plugins that provide additional features and functionality. Adversaries can take advantage of this behavior to install malware on a system with relative ease. This may require the adversary compromising a system and then installing the malicious extension themself. An alternate approach entails masquerading the malicious extension as a legitimate extension. The adversary then convinces users to install the malicious component, via means such as social engineering, or simply waits for victims to unknowingly install the malware on their systems. Once the malicious extension has been installed, the adversary can achieve a variety of negative technical impacts such as obtaining sensitive information, executing unauthorized commands, observing/modifying network traffic, and more.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify target(s)] The adversary must first identify target software that allows for extensions/plugins and which they wish to exploit, such as a web browser or desktop application. To increase the attack space, this will often be popular software with a large user-base.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Create malicious extension] Having identified a suitable target, the adversary crafts a malicious extension/plugin that can be installed by the underlying target software. This malware may be targeted to execute on specific operating systems or be operating system agnostic.</Description>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Install malicious extension] The malicious extension/plugin is installed by the underlying target software and executes the adversary-created malware, resulting in a variety of negative technical impacts.</Description>
               <Technique>Adversary-Installed: Having already compromised the target system, the adversary simply installs the malicious extension/plugin themself.</Technique>
               <Technique>User-Installed: The adversary tricks the user into installing the malicious extension/plugin, via means such as social engineering, or may upload the malware on a reputable extension/plugin hosting site and wait for unknowing victims to install the malicious component.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must craft malware based on the type of software and system(s) they intend to exploit.</Prerequisite>
            <Prerequisite>If the adversary intends to install the malicious extension themself, they must first compromise the target machine via some other means.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Ability to create malicious extensions that can exploit specific software applications and systems.</Skill>
            <Skill Level="Medium">Optional: Ability to exploit target system(s) via other means in order to gain entry.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Access Control</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Authorization</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Only install extensions/plugins from official/verifiable sources.</Mitigation>
            <Mitigation>Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.</Mitigation>
            <Mitigation>Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.</Mitigation>
            <Mitigation>Implement an extension/plugin allow list, based on the given security policy.</Mitigation>
            <Mitigation>If applicable, confirm extensions/plugins are properly signed by the official developers.</Mitigation>
            <Mitigation>For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In January 2018, Palo Alto's Unit 42 reported that a malicious Internet Information Services (IIS) extension they named RGDoor was used to create a backdoor into several Middle Eastern government organizations, as well as a financial institution and an educational institution. This malware was used in conjunction with the TwoFace webshell and allowed the adversaries to upload/download files and execute unauthorized commands. [REF-740]</xhtml:p>
            </Example>
            <Example>
               <xhtml:p>In December 2018, it was reported that North Korea-based APT Kimusky (also known as Velvet Chollima) infected numerous legitimate academic organizations within the U.S., many specializing in biomedical engineering, with a malicious Google Chrome extension. Dubbed "Operation STOLEN PENCIL", the attack entailed conducting spear-phishing attacks to trick victims into installing a malicious PDF reader named "Auto Font Manager". Once installed, the malware allowed adversaries to steal cookies and site passwords, as well as forward emails from some compromised accounts. [REF-741]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="507"/>
            <Related_Weakness CWE_ID="829"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1176</Entry_ID>
               <Entry_Name>Browser Extensions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1505.004</Entry_ID>
               <Entry_Name>Server Software Component: IIS Components</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-740"/>
            <Reference External_Reference_ID="REF-741"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2022-09-29</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="70" Name="Try Common or Default Usernames and Passwords" Abstraction="Detailed" Status="Draft">
         <Description>An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. "secret" or "password") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.</Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="49"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="600"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="560"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="561"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="653"/>
         </Related_Attack_Patterns>
         <Prerequisites>
            <Prerequisite>The system uses one factor password based authentication.The adversary has the means to interact with the system.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Low">An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Technology or vendor specific list of default usernames and passwords.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>Many incorrect login attempts are detected by the system.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Delete all default account credentials that may be put in by the product vendor.</Mitigation>
            <Mitigation>Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.</Mitigation>
            <Mitigation>Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.</Mitigation>
            <Mitigation>Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>A user sets their password to "123" or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.</Example>
            <Example>Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username "root" with a password "password". This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288</Example>
            <Example>In April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer’s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="521"/>
            <Related_Weakness CWE_ID="262"/>
            <Related_Weakness CWE_ID="263"/>
            <Related_Weakness CWE_ID="798"/>
            <Related_Weakness CWE_ID="654"/>
            <Related_Weakness CWE_ID="308"/>
            <Related_Weakness CWE_ID="309"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1078.001</Entry_ID>
               <Entry_Name>Valid Accounts:Default Accounts</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-572"/>
            <Reference External_Reference_ID="REF-574"/>
            <Reference External_Reference_ID="REF-596" Section="Testing for Account Enumeration and Guessable User Account"/>
            <Reference External_Reference_ID="REF-597" Section="Testing for Default Credentials"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Example_Instances, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-08-04">Try Common(default) Usernames and Passwords</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="700" Name="Network Boundary Bridging" Abstraction="Standard" Status="Draft">
         <Description>An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.</Description>
         <Extended_Description>
            <xhtml:p>Network boundary devices are network devices such as routers and firewalls which segment networks by restricting certain types of traffic from flowing through the device. Network boundary devices are often directly accessible through a portal page for management purposes. An adversary’s goal when conducting network boundary bridging is to connect networks which are being segmented by the device. To do so, the adversary must first compromise the network boundary device.</xhtml:p>
         </Extended_Description>
         <Likelihood_Of_Attack>Medium</Likelihood_Of_Attack>
         <Typical_Severity>High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="161"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="70"/>
            <Related_Attack_Pattern Nature="CanFollow" CAPEC_ID="560"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Identify potential targets] An adversary identifies network boundary devices that can be compromised.</Description>
               <Technique>The adversary traces network traffic to identify which devices the traffic flows through. Additionally, the adversary can identify devices using fingerprinting methods or locating the management page to determine identifying information about the device.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Compromise targets] The adversary must compromise the identified targets in the previous step.</Description>
               <Technique>Once the device is identified, the adversary can attempt to input known default credentials for the device to gain access to the management console.</Technique>
               <Technique>Adversaries with sufficient identifying knowledge about the target device can exploit known vulnerabilities in network devices to obtain administrative access.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Bridge Networks] The adversary changes the configuration of the compromised network device to connect the networks the device was segmenting. Depending on the type of network boundary device and its capabilities, bridging can be implemented using various methods.</Description>
               <Technique>The adversary can abuse Network Address Translation (NAT) in firewalls and routers to manipulate traffic flow to their own design. With control of the network device, the adversary can manipulate NAT by either using existing configurations or creating their own to allow two previously unconnected networks to communicate.</Technique>
               <Technique>Some network devices can be configured to become a proxy server. Adversaries can set up or exploit an existing proxy server on compromised network devices to create a bridge between separate networks.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>The adversary must have control of a network boundary device.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">The adversary must understand how to manage the target network device to create or edit policies which will bridge networks.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>The adversary requires either high privileges or full control of a boundary device on a target network.</Resource>
         </Resources_Required>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Data</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Authorization</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Design: Ensure network devices are storing credentials in encrypted stores</Mitigation>
            <Mitigation>Design: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.</Mitigation>
            <Mitigation>Configuration: When possible, configure network boundary devices to use MFA.</Mitigation>
            <Mitigation>Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.</Mitigation>
            <Mitigation>Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.</Mitigation>
            <Mitigation>Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco’s unauthenticated SMI management protocol to download a target’s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device’s configurations, they could modify it to redirect network traffic through other network infrastructure.</xhtml:p>
            </Example>
         </Example_Instances>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1599</Entry_ID>
               <Entry_Name>Network Boundary Bridging</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-746"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Date>2023-01-24</Submission_Date>
            </Submission>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="94" Name="Adversary in the Middle (AiTM)" Abstraction="Meta" Status="Stable">
         <Description>
            <xhtml:p>An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.</xhtml:p>
         </Description>
         <Extended_Description>
            <xhtml:p>Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first flows through the adversary, who has the opportunity to observe or alter it, before being passed on to the intended recipient as if it was never observed. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for these attacks yields an implicit lack of trust in communication or identify between two components.</xhtml:p>
            <xhtml:p>These attacks differ from Sniffing Attacks (CAPEC-157) since these attacks often modify the communications prior to delivering it to the intended recipient.</xhtml:p>
         </Extended_Description>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Man-in-the-Middle / MITM</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Person-in-the-Middle / PiTM</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Monkey-in-the-Middle</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Monster-in-the-Middle</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>On-path Attacker</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="668"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.</Description>
               <Technique>Perform a sniffing attack and observe communication to determine a communication protocol.</Technique>
               <Technique>Look for application documentation that might describe a communication mechanism used by a target.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Experiment</Phase>
               <Description>[Position In Between Targets] The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.</Description>
               <Technique>Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.</Technique>
               <Technique>Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Use Intercepted Data Maliciously] The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.</Description>
               <Technique>Prevent some messages from reaching their destination, causing a denial of service.</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>There are two components communicating with each other.</Prerequisite>
            <Prerequisite>An attacker is able to identify the nature and mechanism of communication between the two target components.</Prerequisite>
            <Prerequisite>An attacker can eavesdrop on the communication between the target components.</Prerequisite>
            <Prerequisite>Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.</Prerequisite>
            <Prerequisite>The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">This attack can get sophisticated since the attack may use cryptography.</Skill>
         </Skills_Required>
         <Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Ensure Public Keys are signed by a Certificate Authority</Mitigation>
            <Mitigation>Encrypt communications using cryptography (e.g., SSL/TLS)</Mitigation>
            <Mitigation>Use Strong mutual authentication to always fully authenticate both ends of any communications channel.</Mitigation>
            <Mitigation>Exchange public keys using a secure channel</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>
               <xhtml:p>In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]</xhtml:p>
            </Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="300"/>
            <Related_Weakness CWE_ID="290"/>
            <Related_Weakness CWE_ID="593"/>
            <Related_Weakness CWE_ID="287"/>
            <Related_Weakness CWE_ID="294"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1557</Entry_ID>
               <Entry_Name>Adversary-in-the-Middle</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <Entry_Name>Man-in-the-middle attack</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-553"/>
            <Reference External_Reference_ID="REF-633"/>
            <Reference External_Reference_ID="REF-634"/>
            <Reference External_Reference_ID="REF-635"/>
            <Reference External_Reference_ID="REF-636"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2017-08-04</Modification_Date>
               <Modification_Comment>Updated Examples-Instances, Related_Vulnerabilities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-09-30</Modification_Date>
               <Modification_Comment>Updated @Abstraction, Description, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated @Name, @Status, Alternate_Terms, Description, Example_Instances, Execution_Flow, Mitigations, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-02-22</Modification_Date>
               <Modification_Comment>Updated Description, Execution_Flow, Extended_Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2021-06-24">Man in the Middle Attack</Previous_Entry_Name>
         </Content_History>
      </Attack_Pattern>
      <Attack_Pattern xmlns:capec="http://capec.mitre.org/capec-3" ID="98" Name="Phishing" Abstraction="Standard" Status="Draft">
         <Description>Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or "fishing" for information.</Description>
         <Likelihood_Of_Attack>High</Likelihood_Of_Attack>
         <Typical_Severity>Very High</Typical_Severity>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="151">
               <Exclude_Related Exclude_ID="515"/>
               <Exclude_Related Exclude_ID="512"/>
               <Exclude_Related Exclude_ID="513"/>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="89"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="543"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="611"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="630"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="631"/>
            <Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="632"/>
         </Related_Attack_Patterns>
         <Execution_Flow>
            <Attack_Step>
               <Step>1</Step>
               <Phase>Explore</Phase>
               <Description>[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.</Description>
               <Technique>Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)</Technique>
               <Technique>Optionally obtain a legitimate SSL certificate for the new domain name.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>2</Step>
               <Phase>Explore</Phase>
               <Description>[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.</Description>
               <Technique>Use spidering software to get copy of web pages on legitimate site.</Technique>
               <Technique>Manually save copies of required web pages from legitimate site.</Technique>
               <Technique>Create new web pages that have the legitimate site's look and feel, but contain completely new content.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>3</Step>
               <Phase>Exploit</Phase>
               <Description>[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.</Description>
               <Technique>Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.</Technique>
               <Technique>Place phishing link in post to online forum.</Technique>
            </Attack_Step>
            <Attack_Step>
               <Step>4</Step>
               <Phase>Exploit</Phase>
               <Description>[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.</Description>
               <Technique>Log in to the legitimate site using another user's supplied credentials</Technique>
            </Attack_Step>
         </Execution_Flow>
         <Prerequisites>
            <Prerequisite>An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.</Prerequisite>
            <Prerequisite>An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their "hooks" to many potential victims.</Prerequisite>
            <Prerequisite>An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.</Prerequisite>
            <Prerequisite>The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.</Prerequisite>
         </Prerequisites>
         <Skills_Required>
            <Skill Level="Medium">Basic knowledge about websites: obtaining them, designing and implementing them, etc.</Skill>
         </Skills_Required>
         <Resources_Required>
            <Resource>Some web development tools to put up a fake website.</Resource>
         </Resources_Required>
         <Indicators>
            <Indicator>You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.</Indicator>
            <Indicator>You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.</Indicator>
         </Indicators>
         <Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Authorization</Scope>
               <Impact>Gain Privileges</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Data</Impact>
            </Consequence>
         </Consequences>
         <Mitigations>
            <Mitigation>Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.</Mitigation>
         </Mitigations>
         <Example_Instances>
            <Example>The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.</Example>
            <Example>An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content.</Example>
         </Example_Instances>
         <Related_Weaknesses>
            <Related_Weakness CWE_ID="451"/>
         </Related_Weaknesses>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1566</Entry_ID>
               <Entry_Name>Phishing</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <Entry_ID>1598</Entry_ID>
               <Entry_Name>Phishing for Information</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-656"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2014-06-23</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2018-07-31</Modification_Date>
               <Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2019-04-04</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-07-30</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Execution_Flow, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2020-12-17</Modification_Date>
               <Modification_Comment>Updated Example_Instances, Execution_Flow</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2021-06-24</Modification_Date>
               <Modification_Comment>Updated Example_Instances, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2022-09-29</Modification_Date>
               <Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CAPEC Content Team</Modification_Name>
               <Modification_Organization>The MITRE Corporation</Modification_Organization>
               <Modification_Date>2023-01-24</Modification_Date>
               <Modification_Comment>Updated Related_Weaknesses</Modification_Comment>
            </Modification>
         </Content_History>
      </Attack_Pattern>
   </Attack_Patterns>
   <Views>
      <View ID="658" Name="ATT&amp;CK Related Patterns " Type="Implicit" Status="Draft">
         <Objective>This view (slice) covers patterns with mappings to the ATT&amp;CK knowledge base.</Objective>
         <Filter>/Attack_Pattern_Catalog/*/*[Taxonomy_Mappings/Taxonomy_Mapping[@Taxonomy_Name='ATTACK']]</Filter>
         <References>
            <Reference External_Reference_ID="REF-622"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CAPEC Content Team</Submission_Name>
               <Submission_Organization>The MITRE Corporation</Submission_Organization>
               <Submission_Date>2020-12-17</Submission_Date>
            </Submission>
         </Content_History>
      </View>
   </Views>
   <External_References>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-1">
         <Author>G. Hoglund</Author>
         <Author>G. McGraw</Author>
         <Title>Exploiting Software: How to Break Code</Title>
         <Publication_Year>2004</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publisher>Addison-Wesley</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-101">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Deadlock</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-108">
         <Title>WASC Threat Classification 2.0</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/Improper-Input-Handling</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-109">
         <Title>OWASP</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Category:Encoding</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-11">
         <Title>WASC Threat Classification 2.0</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>The Web Application Security Consortium (WASC)</Publisher>
         <URL>http://projects.webappsec.org/Directory-Indexing</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-110">
         <Title>OWASP</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-project-proactive-controls/v3/en/c4-encode-escape-data</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-112">
         <Author>David Wheeler</Author>
         <Title>Secure Programming for Linux and Unix HOWTO</Title>
         <URL>http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/character-encoding.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-113">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Character_encoding</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-114">
         <Author>Eric Hacker</Author>
         <Title>IDS Evasion with Unicode</Title>
         <Publication_Year>2001</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publication_Day>---03</Publication_Day>
         <URL>http://www.securityfocus.com/infocus/1232</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-123">
         <Author>J. Postel</Author>
         <Title>RFC792 - Internet Control Messaging Protocol</Title>
         <Publication_Year>1981</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publisher>Defense Advanced Research Projects Agency (DARPA)</Publisher>
         <URL>http://www.faqs.org/rfcs/rfc792.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-124">
         <Author>R. Braden, Ed.</Author>
         <Title>RFC1122 - Requirements for Internet Hosts - Communication Layers</Title>
         <Publication_Year>1989</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <URL>http://www.faqs.org/rfcs/rfc1122.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-125">
         <Author>Mark Wolfgang</Author>
         <Title>Host Discovery with Nmap</Title>
         <Publication_Year>2002</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <URL>http://nmap.org/docs/discovery.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-128">
         <Author>Defense Advanced Research Projects Agency Information Processing Techniques Office</Author>
         <Author>Information Sciences Institute University of Southern California</Author>
         <Title>RFC793 - Transmission Control Protocol</Title>
         <Publication_Year>1981</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publisher>Defense Advanced Research Projects Agency (DARPA)</Publisher>
         <URL>http://www.faqs.org/rfcs/rfc793.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-13">
         <Author>Shaun Colley</Author>
         <Title>Crafting Symlinks for Fun and Profit</Title>
         <URL>http://www.infosecwriters.com/texts.php?op=display&amp;id=159</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-130">
         <Author>Gordon "Fyodor" Lyon</Author>
         <Title>The Art of Port Scanning</Title>
         <Edition>Volume: 7, Issue. 51</Edition>
         <Publication>Phrack Magazine</Publication>
         <Publication_Year>1997</Publication_Year>
         <URL>http://phrack.org/issues/51/11.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-147">
         <Author>Gordon "Fyodor" Lyon</Author>
         <Title>Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning</Title>
         <Edition>3rd "Zero Day" Edition</Edition>
         <Publication_Year>2008</Publication_Year>
         <Publisher>Insecure.com LLC, ISBN: 978-0-9799587-1-7</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-158">
         <Author>J. Postel</Author>
         <Title>RFC768 - User Datagram Protocol</Title>
         <Publication_Year>1980</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <Publication_Day>---28</Publication_Day>
         <URL>http://www.faqs.org/rfcs/rfc768.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-212">
         <Author>Gordon "Fyodor" Lyon</Author>
         <Title>Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning</Title>
         <Edition>3rd "Zero Day" Edition,</Edition>
         <Publication_Year>2008</Publication_Year>
         <Publisher>Insecure.com LLC</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-22">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/DNS_cache_poisoning</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-23">
         <Title>DNS Threats and DNS Weaknesses</Title>
         <Publisher>DNSSEC</Publisher>
         <URL>http://www.dnssec.net/dns-threats.php</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-24">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/ARP_spoofing</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-27">
         <Title>Vulnerability Note VU#800113</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <Publication_Day>---08</Publication_Day>
         <Publisher>US CERT</Publisher>
         <URL>http://www.kb.cert.org/vuls/id/800113#pat</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-29">
         <Author>Silvio Cesare</Author>
         <Title>Share Library Call Redirection Via ELF PLT Infection</Title>
         <Edition>Issue 56</Edition>
         <Publication>Phrack Magazine</Publication>
         <Publication_Year>2000</Publication_Year>
         <URL>http://phrack.org/issues/56/7.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-30">
         <Title>OWASP Top 10 2007</Title>
         <Edition>2007</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://www.owasp.org/www-pdf-archive/OWASP_Top_10_2007.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-31">
         <Author>Manic Velocity</Author>
         <Title>Footprinting And The Basics Of Hacking</Title>
         <Publication>Web Textfiles</Publication>
         <URL>http://web.textfiles.com/hacking/footprinting.txt</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-32">
         <Author>Eddie Sutton</Author>
         <Title>Footprint: What Is And How Do You Erase Them</Title>
         <URL>http://www.infosecwriters.com/text_resources/pdf/Footprinting.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-327">
         <Author>Tom Stracener</Author>
         <Author>Sean Barnum</Author>
         <Title>So Many Ways [...]: Exploiting Facebook and YoVille</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>Defcon 18</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-33">
         <Author>Stuart McClure</Author>
         <Author>Joel Scambray</Author>
         <Author>George Kurtz</Author>
         <Title>Hacking Exposed: Network Security Secrets &amp; Solutions</Title>
         <Edition>6th Edition</Edition>
         <Publication_Year>2009</Publication_Year>
         <Publisher>McGraw Hill</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-34">
         <Author>Gordon "Fyodor" Lyon</Author>
         <Title>Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning</Title>
         <Edition>3rd "Zero Day" Edition,</Edition>
         <Publication_Year>2008</Publication_Year>
         <Publisher>Insecure.com LLC, ISBN: 978-0-9799587-1-7</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-348">
         <Title>The Official Social Engineering Portal</Title>
         <Publication>Social-Engineer.org</Publication>
         <Publisher>Tick Tock Computers, LLC</Publisher>
         <URL>http://www.social-engineer.org</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-379">
         <Author>Jon Boyens</Author>
         <Author>Angela Smith</Author>
         <Author>Nadya Bartol</Author>
         <Author>Kris Winkler</Author>
         <Author>Alex Holbrook</Author>
         <Author>Matthew Fallon</Author>
         <Title>Cybersecurity Supply Chain Risk Management Practices for Systems and Organizations (2nd Draft)</Title>
         <Publication_Year>2021</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---28</Publication_Day>
         <Publisher>National Institute of Standards and Technology (NIST)</Publisher>
         <URL>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-161r1-draft2.pdf</URL>
         <URL_Date>2022-02-16</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-380">
         <Author>Marcus Sachs</Author>
         <Title>Supply Chain Attacks: Can We Secure Information Technology Supply Chain in the Age of Globalization</Title>
         <Publisher>Verizon, Inc.</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-381">
         <Author>Thea Reilkoff</Author>
         <Title>Hardware Trojans: A Novel Attack Meets a New Defense</Title>
         <Publication_Year>2010</Publication_Year>
         <Publisher>Yale School of Engineering and Applied Science</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-382">
         <Author>Marianne Swanson</Author>
         <Author>Nadya Bartol</Author>
         <Author>Rama Moorthy</Author>
         <Title>Piloting Supply Chain Risk Management Practices for Federal Information Systems</Title>
         <Edition>Draft NISTIR 7622</Edition>
         <Publication_Year>2010</Publication_Year>
         <Publisher>National Institute of Standards and Technology</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-384">
         <Author>SAFECode</Author>
         <Title>The Software Supply Chain Integrity Framework Defining Risks and Responsibilities for Securing Software in the Global Supply Chain</Title>
         <Publication_Year>2009</Publication_Year>
         <Publisher>Safecode.org</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-387">
         <Author>Marshall Brain</Author>
         <Title>How Computer Viruses Work</Title>
         <Publication_Year>2007</Publication_Year>
         <Publisher>MindPride</Publisher>
         <URL>http://www.mindpride.net/root/Extras/how-stuff-works/how_computer_viruses_work.htm</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-401">
         <Author>Samy Kamkar</Author>
         <Title>Evercookie</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publication_Day>---09</Publication_Day>
         <URL>http://samy.pl/evercookie/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-402">
         <Author>Robert Auger</Author>
         <Title>Socket Capable Browser Plugins Result In Transparent Proxy Abuse</Title>
         <Publication_Year>2009</Publication_Year>
         <URL>http://www.thesecuritypractice.com/the_security_practice/TransparentProxyAbuse.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-406">
         <Author>Robert Hansen</Author>
         <Title>Slowris HTTP DoS</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---17</Publication_Day>
         <URL>http://ha.ckers.org/blog/20090617/slowloris-http-dos/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-409">
         <Title>M Trends Report</Title>
         <Publication_Year>2011</Publication_Year>
         <Publisher>Mandiant</Publisher>
         <URL>https://www.mandiant.com</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-411">
         <Author>Sigbjørn Vik</Author>
         <Title>Security breach stopped</Title>
         <Publication_Year>2013</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---26</Publication_Day>
         <Publisher>http://my.opera.com/securitygroup/blog/2013/06/26/opera-infrastructure-attack</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-412">
         <Author>Patrick Morley</Author>
         <Title>Bit9 and Our Customers’ Security</Title>
         <Publication_Year>2013</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---08</Publication_Day>
         <Publisher>https://blog.bit9.com/2013/02/08/bit9-and-our-customers-security/</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-413">
         <Author>Brad Arkin</Author>
         <Title>Inappropriate Use of Adobe Code Signing Certificate</Title>
         <Publication_Year>2012</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publication_Day>---27</Publication_Day>
         <Publisher>http://blogs.adobe.com/asset/2012/09/inappropriate-use-of-adobe-code-signing-certificate.html</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-419">
         <Author>P.J. Leadbitter</Author>
         <Author>D. Page</Author>
         <Author>N.P. Smart</Author>
         <Title>Attacking DSA Under a Repeated Bits Assumption</Title>
         <Publication_Year>2004</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <Publisher>http://www.iacr.org/archive/ches2004/31560428/31560428.pdf</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-420">
         <Author>Debian Security</Author>
         <Title>DSA-1571-1 openssl -- predictable random number generator</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---13</Publication_Day>
         <Publisher>http://www.debian.org/security/2008/dsa-1571</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-434">
         <Author>Adrienne Porter Felt</Author>
         <Author>David Wagner</Author>
         <Title>Phishing on Mobile Devices</Title>
         <Publication_Year>2011</Publication_Year>
         <Publisher>University of California, Berkeley</Publisher>
         <URL>https://people.eecs.berkeley.edu/~daw/papers/mobphish-w2sp11.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-439">
         <Author>John F. Miller</Author>
         <Title>Supply Chain Attack Framework and Attack Patterns</Title>
         <Publication_Year>2013</Publication_Year>
         <Publisher>The MITRE Corporation</Publisher>
         <URL>http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-493">
         <Author>Means, Ryan L.</Author>
         <Title>Alternate Data Streams: Out of the Shadows and into the Light</Title>
         <Publisher>SANS Institute</Publisher>
         <URL>https://www.giac.org/paper/gcwn/230/alternate-data-streams-shadows-light/104234</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-501">
         <Author>Stewart A.</Author>
         <Title>DLL SIDE-LOADING: A Thorn in the Side of the Anti-Virus Industry</Title>
         <Publisher>FireEye</Publisher>
         <URL>https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-51">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Decompiler</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-52">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Debugger</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-53">
         <Title>Wikipedia</Title>
         <Publisher>The Wikimedia Foundation, Inc</Publisher>
         <URL>http://en.wikipedia.org/wiki/Disassembler</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-553">
         <Author>M. Bishop</Author>
         <Title>Computer Security: Art and Science</Title>
         <Publication_Year>2003</Publication_Year>
         <Publisher>Addison-Wesley</Publisher>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-559">
         <Author>Jeff Warren</Author>
         <Title>Extracting Service Account Passwords with Kerberoasting</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---09</Publication_Day>
         <URL>https://blog.stealthbits.com/extracting-service-account-passwords-with-kerberoasting/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-565">
         <Title>ACSC Releases Advisory on Password Spraying Attacks</Title>
         <Publication_Year>2019</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <Publication_Day>---08</Publication_Day>
         <Publisher>Cybersecurity and Infrastructure Security Agency (CISA)</Publisher>
         <URL>https://www.us-cert.gov/ncas/current-activity/2019/08/08/acsc-releases-advisory-password-spraying-attacks</URL>
         <URL_Date>2020-04-30</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-566">
         <Author>Andy Greenberg</Author>
         <Title>A notorious Iranian hacking crew is targeting industrial control systems</Title>
         <Publication_Year>2019</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <Publication_Day>---23</Publication_Day>
         <Publisher>Ars Technica</Publisher>
         <URL>https://arstechnica.com/information-technology/2019/11/a-notorious-iranian-hacking-crew-is-targeting-industrial-control-systems/</URL>
         <URL_Date>2020-04-30</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-567">
         <Title>Alert (TA18-086A): Brute Force Attacks Conducted by Cyber Actors</Title>
         <Publication_Year>2018</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---27</Publication_Day>
         <Publisher>Cybersecurity and Infrastructure Security Agency (CISA)</Publisher>
         <URL>https://www.us-cert.gov/ncas/alerts/TA18-086A</URL>
         <URL_Date>2020-05-01</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-568">
         <Title>Credential stuffing</Title>
         <Publisher>Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-community/attacks/Credential_stuffing</URL>
         <URL_Date>2020-05-01</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-569">
         <Author>Jessica Silver-Greenberg</Author>
         <Author>Matthew Goldstein</Author>
         <Author>Nicole Perlroth</Author>
         <Title>JPMorgan Chase Hacking Affects 76 Million Households</Title>
         <Publication_Year>2014</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---02</Publication_Day>
         <Publisher>The New York Times</Publisher>
         <URL>https://dealbook.nytimes.com/2014/10/02/jpmorgan-discovers-further-cyber-security-issues/</URL>
         <URL_Date>2020-05-01</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-570">
         <Title>Attractive Accounts for Credential Theft</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---31</Publication_Day>
         <Publisher>Microsoft Corporation</Publisher>
         <URL>https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/attractive-accounts-for-credential-theft?redirectedfrom=MSDN</URL>
         <URL_Date>2020-05-05</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-571">
         <Author>Feike Hacquebord</Author>
         <Title>Two Years of Pawn Storm: Examining an Increasingly Relevant Threat</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publication_Day>---25</Publication_Day>
         <Publisher>Trend Micro</Publisher>
         <URL>https://documents.trendmicro.com/assets/wp/wp-two-years-of-pawn-storm.pdf</URL>
         <URL_Date>2020-05-05</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-572">
         <Title>Corporate IoT – a path to intrusion</Title>
         <Publication_Year>2019</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---05</Publication_Day>
         <Publisher>Microsoft Security Response Center (MSRC)</Publisher>
         <URL>https://msrc-blog.microsoft.com/2019/08/05/corporate-iot-a-path-to-intrusion</URL>
         <URL_Date>2020-05-05</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-573">
         <Author>Brendan McKeague</Author>
         <Author>Van Ta</Author>
         <Author>Ben Fedore</Author>
         <Author>Geoff Ackerman</Author>
         <Author>Alex Pennino</Author>
         <Author>Andrew Thompson</Author>
         <Author>Douglas Bienstock</Author>
         <Title>Pick-Six: Intercepting a FIN6 Intrusion, an Actor Recently Tied to Ryuk and LockerGoga Ransomware</Title>
         <Publication_Year>2019</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publication_Day>---05</Publication_Day>
         <Publisher>Microsoft Security Response Center (MSRC)</Publisher>
         <URL>https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html</URL>
         <URL_Date>2020-05-05</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-574">
         <Title>Risks of Default Passwords on the Internet</Title>
         <Publication_Year>2016</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---07</Publication_Day>
         <Publisher>Cybersecurity and Infrastructure Security Agency (CISA)</Publisher>
         <URL>https://www.us-cert.gov/ncas/alerts/TA13-175A</URL>
         <URL_Date>2020-05-05</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-575">
         <Author>Dan Goodin</Author>
         <Title>Attackers can use Zoom to steal users’ Windows credentials with no warning</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publication_Day>---01</Publication_Day>
         <Publisher>Ars Technica</Publisher>
         <URL>https://arstechnica.com/information-technology/2020/04/unpatched-zoom-bug-lets-attackers-steal-windows-credentials-with-no-warning/</URL>
         <URL_Date>2020-05-07</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-577">
         <Title>Overview of problems that may occur when administrative shares are missing</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---13</Publication_Day>
         <Publisher>Microsoft Corporation</Publisher>
         <URL>https://support.microsoft.com/en-us/help/842715/overview-of-problems-that-may-occur-when-administrative-shares-are-mis</URL>
         <URL_Date>2020-05-07</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-578">
         <Author>Rob Smallridge</Author>
         <Title>HAPT15 is alive and strong: An analysis of RoyalCli and RoyalDNS</Title>
         <Publication_Year>2018</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---10</Publication_Day>
         <Publisher>NCC Group</Publisher>
         <URL>https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/march/apt15-is-alive-and-strong-an-analysis-of-royalcli-and-royaldns/</URL>
         <URL_Date>2020-05-07</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-579">
         <Author>Assaf Dahan</Author>
         <Title>Operation Cobalt Kitty: Cybereason Labs Analysis</Title>
         <Publication_Year>2017</Publication_Year>
         <Publisher>CyberReason</Publisher>
         <URL>https://cdn2.hubspot.net/hubfs/3354902/Cybereason%20Labs%20Analysis%20Operation%20Cobalt%20Kitty.pdf</URL>
         <URL_Date>2020-05-07</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-580">
         <Author>Mor Levi</Author>
         <Author>Assaf Dahan</Author>
         <Author>Amit Serper</Author>
         <Title>Operation Soft Cell: A Worldwide Campaign Against Telecommunications Providers</Title>
         <Publication_Year>2019</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---25</Publication_Day>
         <Publisher>CyberReason</Publisher>
         <URL>https://www.cybereason.com/blog/operation-soft-cell-a-worldwide-campaign-against-telecommunications-providers</URL>
         <URL_Date>2020-05-07</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-581">
         <Title>Mitigating Pass-the-Hash and Other Credential Theft v2</Title>
         <Publisher>Microsoft Corporation</Publisher>
         <URL>https://docs.microsoft.com/en-us/previous-versions/dn785092(v=msdn.10)?redirectedfrom=MSDN</URL>
         <URL_Date>2020-05-07</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-582">
         <Title>How Pass-the-Hash works</Title>
         <Publisher>Microsoft Corporation</Publisher>
         <URL>https://docs.microsoft.com/en-us/previous-versions/dn785092(v=msdn.10)?redirectedfrom=MSDN</URL>
         <URL_Date>2020-05-07</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-583">
         <Author>Bashar Ewaida</Author>
         <Title>Pass-the-hash attacks: Tools and Mitigation</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---23</Publication_Day>
         <Publisher>The SANS Institute</Publisher>
         <URL>https://www.sans.org/reading-room/whitepapers/testing/paper/33283</URL>
         <URL_Date>2020-05-07</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-584">
         <Title>BRONZE BUTLER Targets Japanese Enterprises</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---12</Publication_Day>
         <Publisher>Secureworks® Counter Threat Unit™ Threat Intelligence</Publisher>
         <URL>https://www.secureworks.com/research/bronze-butler-targets-japanese-businesses</URL>
         <URL_Date>2020-05-15</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-585">
         <Title>Kerberoasting Without Mimikatz</Title>
         <Publication_Year>2016</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <Publication_Day>---01</Publication_Day>
         <URL>https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/</URL>
         <URL_Date>2020-05-15</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-586">
         <Title>Invoke-Kerberoast</Title>
         <URL>https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/</URL>
         <URL_Date>2020-05-15</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-596">
         <Title>OWASP Web Security Testing Guide</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-597">
         <Title>OWASP Web Security Testing Guide</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-598">
         <Title>OWASP Web Security Testing Guide</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-599">
         <Title>OWASP Web Security Testing Guide</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-6">
         <Title>Orion Application Server JSP Source Disclosure Vulnerability (Bugtraq ID: 17204)</Title>
         <Publisher>SecurityFocus</Publisher>
         <URL>http://www.securityfocus.com/bid/17204/info</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-600">
         <Title>OWASP Web Security Testing Guide</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-603">
         <Title>OWASP Web Security Testing Guide</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/09-Testing_for_Session_Hijacking.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-609">
         <Title>OWASP Web Security Testing Guide</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-613">
         <Title>OWASP Web Security Testing Guide</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-62">
         <Author>Thomas Schreiber</Author>
         <Title>Session Riding: A Widespread Vulnerability in Today's Web Applications</Title>
         <Publisher>SecureNet GmbH</Publisher>
         <URL>https://crypto.stanford.edu/cs155old/cs155-spring08/papers/Session_Riding.pdf</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-622">
         <Title>MITRE ATT&amp;CK</Title>
         <URL>https://attack.mitre.org/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-624">
         <Author>Ansgar Kellner</Author>
         <Author>Micha Horlboge</Author>
         <Author>Konrad Rieck</Author>
         <Author>Christian Wressnegger</Author>
         <Title>False Sense of Security: A Study on the Effectivity of Jailbreak Detection in Banking Apps</Title>
         <Publication_Year>2019</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---17</Publication_Day>
         <Publisher>Technische Universität Braunschweig</Publisher>
         <URL>https://cybersecurity.att.com/blogs/security-essentials/mobile-phishing</URL>
         <URL_Date>2020-12-15</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-625">
         <Author>San-Tsai Sun</Author>
         <Author>Andrea Cuadros</Author>
         <Author>Konstantin Beznosov</Author>
         <Title>Android Rooting: Methods, Detection, and Evasion</Title>
         <Publication_Year>2019</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---17</Publication_Day>
         <Publisher>Technische Universität Braunschweig</Publisher>
         <URL>http://lersse-dl.ece.ubc.ca/record/310/files/p3.pdf?subformat=pdfa</URL>
         <URL_Date>2020-12-15</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-626">
         <Author>Jose Lopes</Author>
         <Title>Who owns your runtime?</Title>
         <Publication_Year>2015</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---12</Publication_Day>
         <Publisher>Nettitude Labs</Publisher>
         <URL>https://labs.nettitude.com/blog/ios-and-android-runtime-and-anti-debugging-protections/#hooking</URL>
         <URL_Date>2020-12-15</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-627">
         <Author>Suresh Khutale</Author>
         <Title>Android Root Detection Bypass by Reverse Engineering APK</Title>
         <Publication_Year>2018</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---06</Publication_Day>
         <Publisher>InfoSec Institute</Publisher>
         <URL>https://resources.infosecinstitute.com/topic/android-root-detection-bypass-reverse-engineering-apk/</URL>
         <URL_Date>2020-12-15</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-629">
         <Title>Man-in-the-browser attack</Title>
         <Publisher>Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-community/attacks/Man-in-the-browser_attack</URL>
         <URL_Date>2021-02-09</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-63">
         <Title>OWASP Testing Guide</Title>
         <Edition>v4</Edition>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>http://www.owasp.org/index.php/Testing_for_Session_Management</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-630">
         <Author>Liviu Arsene</Author>
         <Title>Oil and Gas Spearphishing Campaigns Drop Agent Tesla Spyware in Advance of Historic OPEC+ Deal</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publication_Day>---21</Publication_Day>
         <Publisher>Bitdefender Labs</Publisher>
         <URL>https://labs.bitdefender.com/2020/04/oil-gas-spearphishing-campaigns-drop-agent-tesla-spyware-in-advance-of-historic-opec-deal/</URL>
         <URL_Date>2021-02-09</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-631">
         <Author>Amit Klein</Author>
         <Title>Man-in-the-Mobile Attacks Single Out Android</Title>
         <Publication_Year>2012</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <Publication_Day>---10</Publication_Day>
         <Publisher>SecurityIntelligence</Publisher>
         <URL>https://securityintelligence.com/man-in-the-mobile-attacks-single-out-android/</URL>
         <URL_Date>2021-02-10</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-632">
         <Author>Kelly Jackson Higgins</Author>
         <Title>New 'Boy In The Browser' Attacks On The Rise</Title>
         <Publication_Year>2011</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---14</Publication_Day>
         <Publisher>Dark Reading, Informa PLC</Publisher>
         <URL>https://www.darkreading.com/risk/new-boy-in-the-browser-attacks-on-the-rise/d/d-id/1135247</URL>
         <URL_Date>2021-02-10</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-633">
         <Title>Man-in-the-middle attack</Title>
         <Publisher>Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://owasp.org/www-community/attacks/Man-in-the-middle_attack</URL>
         <URL_Date>2021-02-10</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-634">
         <Author>Kyle Chivers</Author>
         <Title>What is a man-in-the-middle attack?</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---26</Publication_Day>
         <Publisher>NortonLifeLock Inc.</Publisher>
         <URL>https://us.norton.com/internetsecurity-wifi-what-is-a-man-in-the-middle-attack.html</URL>
         <URL_Date>2021-02-10</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-635">
         <Title>Man in the middle (MITM) attack</Title>
         <Publisher>Imperva</Publisher>
         <URL>https://www.imperva.com/learn/application-security/man-in-the-middle-attack-mitm/</URL>
         <URL_Date>2021-02-10</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-636">
         <Author>Jerry Decime</Author>
         <Title>Settling the score: taking down the Equifax mobile application</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publication_Day>---13</Publication_Day>
         <URL>https://www.linkedin.com/pulse/settling-score-taking-down-equifax-mobile-application-jerry-decime/</URL>
         <URL_Date>2021-02-10</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-647">
         <Author>Björn Ruytenberg</Author>
         <Title>Thunderspy When Lighting Strikes Thrice: Breaking Thunderbolt 3 Security</Title>
         <Publication_Year>2020</Publication_Year>
         <Publisher>Eindhoven University of Technology</Publisher>
         <URL>https://thunderspy.io/</URL>
         <URL_Date>2021-05-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-648">
         <Author>Björn Ruytenberg</Author>
         <Title>Breaking Thunderbolt Protocol Security: Vulnerability Report</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publication_Day>---17</Publication_Day>
         <Publisher>Eindhoven University of Technology</Publisher>
         <URL>https://thunderspy.io/assets/reports/breaking-thunderbolt-security-bjorn-ruytenberg-20200417.pdf</URL>
         <URL_Date>2021-05-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-649">
         <Author>Liam Tung</Author>
         <Title>Thunderbolt flaws affect millions of computers – even locking unattended devices won't help</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---11</Publication_Day>
         <Publisher>ZDNet</Publisher>
         <URL>https://www.zdnet.com/article/thunderbolt-flaws-affect-millions-of-computers-even-locking-unattended-devices-wont-help/</URL>
         <URL_Date>2021-05-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-650">
         <Author>Liam Tung</Author>
         <Title>Microsoft: Worried about Thunderbolt attacks? Get a Windows 10 Secured-Core PC</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---14</Publication_Day>
         <Publisher>ZDNet</Publisher>
         <URL>https://www.zdnet.com/article/microsoft-worried-about-thunderbolt-attacks-get-a-windows-10-secured-core-pc/</URL>
         <URL_Date>2021-05-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-651">
         <Author>Jon Porter</Author>
         <Title>Thunderbolt flaw allows access to a PC’s data in minutes</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---11</Publication_Day>
         <Publisher>The Verge</Publisher>
         <URL>https://www.theverge.com/2020/5/11/21254290/thunderbolt-security-vulnerability-thunderspy-encryption-access-intel-laptops</URL>
         <URL_Date>2021-05-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-652">
         <Author>Jerry Bryant</Author>
         <Title>MORE INFORMATION ON THUNDERBOLT(TM) SECURITY</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---10</Publication_Day>
         <Publisher>Intel Corporation</Publisher>
         <URL>https://blogs.intel.com/technology/2020/05/more-information-on-thunderspy/#gs.0o6pmk</URL>
         <URL_Date>2021-05-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-653">
         <Author>Amrita Mitra</Author>
         <Title>What is Car Whisperer?</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---08</Publication_Day>
         <Publisher>The Security Buddy</Publisher>
         <URL>https://www.thesecuritybuddy.com/bluetooth-security/what-is-car-whisperer/</URL>
         <URL_Date>2021-06-11</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-654">
         <Title>What is Bluesnarfing?</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---13</Publication_Day>
         <Publisher>Finjan Mobile</Publisher>
         <URL>https://www.finjanmobile.com/what-is-bluesnarfing/</URL>
         <URL_Date>2021-06-11</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-655">
         <Author>Amrita Mitra</Author>
         <Title>What is BlueSmack Attack?</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---08</Publication_Day>
         <Publisher>The Security Buddy</Publisher>
         <URL>https://www.thesecuritybuddy.com/bluetooth-security/what-is-bluesmack-attack/</URL>
         <URL_Date>2021-06-11</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-656">
         <Title>Wireless Security - Bluejack a Victim</Title>
         <Publisher>TutorialsPoint</Publisher>
         <URL>https://www.tutorialspoint.com/wireless_security/wireless_security_bluejack_a_victim.htm</URL>
         <URL_Date>2021-06-11</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-657">
         <Author>Jovi Umawing</Author>
         <Title>Bluetooth vulnerability can be exploited in Key Negotiation of Bluetooth (KNOB) attacks</Title>
         <Publication_Year>2019</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <Publication_Day>---21</Publication_Day>
         <Publisher>MalwareBytes</Publisher>
         <URL>https://blog.malwarebytes.com/awareness/2019/08/bluetooth-vulnerability-can-be-exploited-in-key-negotiation-of-bluetooth-knob-attacks/</URL>
         <URL_Date>2021-06-11</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-658">
         <Title>Defending Against Software Supply Chain Attacks</Title>
         <Publication_Year>2021</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publisher>Cybersecurity and Infrastructure Security Agency (CISA)</Publisher>
         <URL>https://www.cisa.gov/sites/default/files/publications/defending_against_software_supply_chain_attacks_508_1.pdf</URL>
         <URL_Date>2021-06-22</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-659">
         <Author>Dr. Charles Clancy</Author>
         <Author>Joe Ferraro</Author>
         <Author>Robert A. Martin</Author>
         <Author>Adam G. Pennington</Author>
         <Author>Christopher L. Sledjeski</Author>
         <Author>Dr. Craig J. Wiener</Author>
         <Title>Deliver Uncompromised: Securing Critical Software Supply Chains</Title>
         <Publication_Year>2021</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publisher>The MITRE Corporation</Publisher>
         <URL>https://www.mitre.org/publications/technical-papers/deliver-uncompromised-securing-critical-software-supply-chains</URL>
         <URL_Date>2021-06-22</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-660">
         <Author>Melinda Reed</Author>
         <Author>John F. Miller</Author>
         <Author>Paul Popick</Author>
         <Title>Supply Chain Attack Patterns: Framework and Catalog</Title>
         <Publication_Year>2014</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <Publisher>Office of the Assistant Secretary of Defense for Research and Engineering</Publisher>
         <URL>https://docplayer.net/13041016-Supply-chain-attack-patterns-framework-and-catalog.html</URL>
         <URL_Date>2021-06-22</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-662">
         <Author>Jeremy Muldavin</Author>
         <Title>Assuring Microelectronics Innovation for National Security &amp; Economic Competitiveness (MINSEC)</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <Publisher>Office of the Deputy Assistant Secretary of Defense for Systems Engineering</Publisher><!--TAME Forum, Gainesville, FL--></External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-663">
         <Author>Richard Kissel</Author>
         <Author>Andrew Regenscheid</Author>
         <Author>Matthew Scholl</Author>
         <Author>Kevin Stine</Author>
         <Title>NIST Special Publication 800-88 Revision 1: Guidelines for Media Sanitization</Title>
         <Publication_Year>2014</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publisher>National Institute of Standards and Technology</Publisher>
         <URL>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-88r1.pdf</URL>
         <URL_Date>2021-06-22</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-664">
         <Title>EQUATION GROUP: QUESTIONS AND ANSWERS</Title>
         <Edition>1.5</Edition>
         <Publication_Year>2015</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publisher>Kaspersky Lab HQ</Publisher>
         <URL>https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08064459/Equation_group_questions_and_answers.pdf</URL>
         <URL_Date>2021-06-23</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-665">
         <Author>Preston Hood</Author>
         <Title>Hard Drive Firmware Implant IRATEMONK</Title>
         <Publication_Year>2014</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---26</Publication_Day>
         <Publisher>PJHoodsCo Blog</Publisher>
         <URL>https://blog.pjhoodsco.org/hard-drive-firmware-implant-iratemonk/</URL>
         <URL_Date>2021-06-23</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-666">
         <Author>Bruce Schneier</Author>
         <Title>IRATEMONK: NSA Exploit of the Day</Title>
         <Publication_Year>2014</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publication_Day>---31</Publication_Day>
         <Publisher>Schneier on Security</Publisher>
         <URL>https://www.schneier.com/blog/archives/2014/01/iratemonk_nsa_e.html</URL>
         <URL_Date>2021-06-23</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-667">
         <Title>Highly Evasive Attacker Leverages SolarWinds Supply Chain to Compromise Multiple Global Victims With SUNBURST Backdoor</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publication_Day>---13</Publication_Day>
         <Publisher>Schneier on Security</Publisher>
         <URL>https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html</URL>
         <URL_Date>2021-06-24</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-685">
         <Title>Kaspersky Finds Sophisticated UEFI Malware in the Wild</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---05</Publication_Day>
         <Publisher>ExtremeTech</Publisher>
         <URL>https://www.extremetech.com/computing/315860-kaspersky-finds-sophisticated-uefi-malware-in-the-wild</URL>
         <URL_Date>2021-10-19</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-69">
         <Title>OWASP Cheatsheets</Title>
         <Publisher>The Open Web Application Security Project (OWASP)</Publisher>
         <URL>https://www.owasp.org/www-community/xss-filter-evasion-cheatsheet</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-697">
         <Author>Microsoft Defender Security Research Team</Author>
         <Title>New ransomware, old techniques: Petya adds worm capabilities</Title>
         <Publication_Year>2017</Publication_Year>
         <Publisher>Microsoft</Publisher>
         <URL>https://www.microsoft.com/security/blog/2017/06/27/new-ransomware-old-techniques-petya-adds-worm-capabilities/</URL>
         <URL_Date>2022-02-15</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-699">
         <Author>Nicolas Falliere</Author>
         <Author>Liam O Murchu</Author>
         <Author>Eric Chien</Author>
         <Title>W32.Stuxnet Dossier</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <Publisher>Symantec</Publisher>
         <URL>https://www.wired.com/images_blogs/threatlevel/2010/11/w32_stuxnet_dossier.pdf</URL>
         <URL_Date>2022-02-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-700">
         <Author>Cristin Goodwin</Author>
         <Author>Joram Borenstein</Author>
         <Title>Guarding against supply chain attacks—Part 3: How software becomes compromised</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---11</Publication_Day>
         <Publisher>Microsoft</Publisher>
         <URL>https://www.microsoft.com/security/blog/2020/03/11/guarding-against-supply-chain-attacks-part-3-how-software-becomes-compromised/</URL>
         <URL_Date>2022-02-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-704">
         <Author>Ax Sharma</Author>
         <Title>Dev corrupts NPM libs 'colors' and 'faker' breaking thousands of apps</Title>
         <Publication_Year>2022</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publication_Day>---09</Publication_Day>
         <Publisher>BleepingComputer</Publisher>
         <URL>https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/</URL>
         <URL_Date>2022-02-16</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-705">
         <Author>Alberto Pellitteri</Author>
         <Title>Malicious modifications to open source projects affecting thousands</Title>
         <Publication_Year>2022</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publication_Day>---12</Publication_Day>
         <Publisher>SysDig</Publisher>
         <URL>https://sysdig.com/blog/malicious-modifications-detection-sysdig/</URL>
         <URL_Date>2022-02-16</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-706">
         <Title>Chef Manage deserializes cookie data insecurely</Title>
         <Publication_Year>2016</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---17</Publication_Day>
         <Publisher>Carnegie Mellon University</Publisher>
         <URL>https://www.kb.cert.org/vuls/id/586503</URL>
         <URL_Date>2022-02-16</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-707">
         <Author>Thomas Brewster</Author>
         <Title>How Lenovo's Superfish 'Malware' Works And What You Can Do To Kill It</Title>
         <Publication_Year>2015</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---19</Publication_Day>
         <Publisher>Forbes</Publisher>
         <URL>https://www.forbes.com/sites/thomasbrewster/2015/02/19/superfish-need-to-know/?sh=991ab8c38776</URL>
         <URL_Date>2022-02-16</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-708">
         <Author>Dan Goodin</Author>
         <Title>Lenovo PCs ship with man-in-the-middle adware that breaks HTTPS connections</Title>
         <Publication_Year>2015</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---19</Publication_Day>
         <Publisher>Ars Technica</Publisher>
         <URL>https://arstechnica.com/information-technology/2015/02/lenovo-pcs-ship-with-man-in-the-middle-adware-that-breaks-https-connections/</URL>
         <URL_Date>2022-02-16</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-709">
         <Author>Rob Graham</Author>
         <Title>Extracting the SuperFish certificate</Title>
         <Publication_Year>2015</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---19</Publication_Day>
         <Publisher>Errata Security</Publisher>
         <URL>https://blog.erratasec.com/2015/02/extracting-superfish-certificate.html#.VOX5Ky57RqE</URL>
         <URL_Date>2022-02-16</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-712">
         <Author>Cristin Goodwin</Author>
         <Author>Joram Borenstein</Author>
         <Title>Guarding against supply chain attacks—Part 2: Hardware risks</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---03</Publication_Day>
         <Publisher>Microsoft</Publisher>
         <URL>https://www.microsoft.com/security/blog/2020/02/03/guarding-against-supply-chain-attacks-part-2-hardware-risks/</URL>
         <URL_Date>2022-02-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-713">
         <Author>Jordan Robertson</Author>
         <Author>Michael Riley</Author>
         <Title>The Big Hack: How China Used a Tiny Chip to Infiltrate U.S. Companies</Title>
         <Publication_Year>2018</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---04</Publication_Day>
         <Publisher>Bloomberg</Publisher>
         <URL>https://www.bloomberg.com/news/features/2018-10-04/the-big-hack-how-china-used-a-tiny-chip-to-infiltrate-america-s-top-companies</URL>
         <URL_Date>2022-02-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-714">
         <Title>Operation Wilted Tulip: Exposing a cyber espionage apparatus</Title>
         <Publication_Year>2017</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <Publisher>ClearSky cyber security and Trend Micro</Publisher>
         <URL>https://www.clearskysec.com/wp-content/uploads/2017/07/Operation_Wilted_Tulip.pdf</URL>
         <URL_Date>2022-02-17</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-716">
         <Author>Daniel Simpson</Author>
         <Author>Dani Halfin</Author>
         <Author>Andrews Mariano Gorzelany</Author>
         <Author>Beth Woodbury</Author>
         <Title>Supply chain attacks</Title>
         <Publication_Year>2021</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---28</Publication_Day>
         <Publisher>Microsoft</Publisher>
         <URL>https://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/supply-chain-malware</URL>
         <URL_Date>2022-02-21</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-717">
         <Author>Linda Pesante</Author>
         <Author>Christopher King</Author>
         <Author>George Silowash</Author>
         <Title>Disposing of Devices Safely</Title>
         <Publication_Year>2012</Publication_Year>
         <Publisher>CISA United States Computer Emergency Readiness Team (US-CERT)</Publisher>
         <URL>https://www.cisa.gov/uscert/sites/default/files/publications/DisposeDevicesSafely.pdf</URL>
         <URL_Date>2022-02-21</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-722">
         <Author>Indiana Moreau</Author>
         <Title>Repo Jacking: Exploiting the Dependency Supply Chain</Title>
         <Publication_Year>2020</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---22</Publication_Day>
         <Publisher>Security Innovation</Publisher>
         <URL>https://www.concretecms.org/about/project-news/security/supply-chain-hack-phpass-repo-jacking</URL>
         <URL_Date>2022-09-09</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-727">
         <Title>Language-Specific Registry Entries</Title>
         <URL>https://learn.microsoft.com/en-us/previous-versions/windows/desktop/indexsrv/language-specific-registry-entries</URL>
         <URL_Date>2018-05-31</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-728">
         <Title>winnls.h header</Title>
         <URL>https://learn.microsoft.com/en-us/windows/win32/api/winnls/</URL>
         <URL_Date>2022-08-23</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-729">
         <Title>local (1p) - Linux Man Pages</Title>
         <URL>https://www.systutorials.com/docs/linux/man/1p-locale/</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-730">
         <Title>vconsole.conf</Title>
         <URL>https://www.freedesktop.org/software/systemd/man/vconsole.conf.html</URL>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-731">
         <Title>timedatectl</Title>
         <URL>https://www.freedesktop.org/software/systemd/man/timedatectl.html</URL>
         <URL_Date>2022-08-12</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-732">
         <Author>Theo Burton</Author>
         <Title>CyRC Vulnerability Analysis: Repo jacking in the software supply chain</Title>
         <Publication_Year>2022</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <Publication_Day>---02</Publication_Day>
         <Publisher>Synopsys</Publisher>
         <URL>https://www.synopsys.com/blogs/software-security/cyrc-vulnerability-analysis-repo-jacking/</URL>
         <URL_Date>2022-09-09</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-733">
         <Author>Jossef Harush</Author>
         <Title>Attacker Caught Hijacking Packages Using Multiple Techniques to Steal AWS Credentials</Title>
         <Publication_Year>2022</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---25</Publication_Day>
         <Publisher>Checkmarx</Publisher>
         <URL>https://checkmarx.com/blog/attacker-caught-hijacking-packages-using-multiple-techniques-to-steal-aws-credentials/</URL>
         <URL_Date>2022-09-09</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-734">
         <Author>Jossef Harush</Author>
         <Title>GitHub RepoJacking Weakness Exploited in the Wild by Attackers</Title>
         <Publication_Year>2022</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---27</Publication_Day>
         <Publisher>Checkmarx</Publisher>
         <URL>https://checkmarx.com/blog/github-repojacking-weakness-exploited-in-the-wild-by-attackers/</URL>
         <URL_Date>2022-09-09</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-737">
         <Author>Yuval Lazar</Author>
         <Title>DHCP Spoofing 101</Title>
         <Publication_Year>2021</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <Publication_Day>---03</Publication_Day>
         <Publisher>Pentera</Publisher>
         <URL>https://pentera.io/blog/dhcp-spoofing-101</URL>
         <URL_Date>2022-09-22</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-738">
         <Author>T. Melsen</Author>
         <Author>S. Blake</Author>
         <Author>Ericsson</Author>
         <Title>DHCP Spoofing 101</Title>
         <Publication_Year>2006</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publisher>The Internet Society</Publisher>
         <URL>https://www.rfc-editor.org/rfc/rfc4562.html</URL>
         <URL_Date>2022-09-22</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-739">
         <Author>Bosco Sebastian</Author>
         <Title>DHCP Spoofing 101</Title>
         <Publication_Year>2019</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <Publication_Day>---02</Publication_Day>
         <Publisher>McAfee</Publisher>
         <URL>https://www.mcafee.com/blogs/other-blogs/mcafee-labs/dhcp-client-remote-code-execution-vulnerability-demystified/</URL>
         <URL_Date>2022-09-22</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-740">
         <Author>Robert Falcone</Author>
         <Title>OilRig uses RGDoor IIS Backdoor on Targets in the Middle East</Title>
         <Publication_Year>2018</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publication_Day>---25</Publication_Day>
         <Publisher>Palo Alto Networks</Publisher>
         <URL>https://unit42.paloaltonetworks.com/unit42-oilrig-uses-rgdoor-iis-backdoor-targets-middle-east/</URL>
         <URL_Date>2022-09-23</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-741">
         <Author>ASERT Team</Author>
         <Title>STOLEN PENCIL Campaign Targets Academia</Title>
         <Publication_Year>2018</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publication_Day>---05</Publication_Day>
         <Publisher>NETSCOUT</Publisher>
         <URL>https://www.netscout.com/blog/asert/stolen-pencil-campaign-targets-academia</URL>
         <URL_Date>2022-09-23</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-746">
         <Author>CISA</Author>
         <Title>Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices</Title>
         <Publication_Year>2018</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publication_Day>---16</Publication_Day>
         <URL>https://www.cisa.gov/uscert/ncas/alerts/TA18-106A</URL>
         <URL_Date>2023-01-13</URL_Date>
      </External_Reference>
      <External_Reference xmlns:capec="http://capec.mitre.org/capec-3" Reference_ID="REF-751">
         <Title>HTTP Flood Attack</Title>
         <URL>https://www.cloudflare.com/learning/ddos/http-flood-ddos-attack/</URL>
         <URL_Date>2023-01-20</URL_Date>
      </External_Reference>
   </External_References>
</Attack_Pattern_Catalog>